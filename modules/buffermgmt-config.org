#+begin_src emacs-lisp :exports none
;;; -*- lexical-binding: t -*-
;;; buffermgmt-config.el --- Buffer and File related configuration
;;
;; Author: Sampath Singamsetty
;;
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file
;; addons-config.org
;;
;;; Commentary:
;; This module contains all configurations options and package settings
;; related to the buffer management and file management.
;;
;;; Code:
;;;
#+end_src

#+TITLE: Buffer Management Configuration
#+AUTHOR: Sampath Singamsetty

* Buffer Management Configuration                                     :TOC_4:
- [[#configurations-related-to-buffers][Configurations related to Buffers]]
    - [[#buffer-selection][Buffer Selection]]
    - [[#code-folding][Code folding]]
    - [[#popup-buffers][Popup Buffers]]
    - [[#window-navigation][Window Navigation]]
    - [[#buffer-handling][Buffer handling]]
    - [[#undo-tree-for-emacs][Undo tree for emacs]]
    - [[#autorevert][Autorevert]]
    - [[#toggle-between-the-most-recent-buffers][Toggle between the most recent buffers]]
- [[#file-and-directory-management][File and Directory Management]]
    - [[#packages-to-enhance-dired][Packages to enhance Dired]]
      - [[#dired-x][dired-x]]
      - [[#dired-aux][dired-aux]]
  - [[#file-system-analyser][File system analyser]]

* Configurations related to Buffers
*** Buffer Selection
    IBuffer provides a nice overview interface of open buffers

    - https://www.emacswiki.org/emacs/IbufferMode

    #+begin_src emacs-lisp
(use-package ibuffer
  :defer 3
  :commands (ibuffer)
  :init
  (bind-key "C-x C-b" 'ibuffer)
  :config
  (progn
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("Emacs"
                    (or
                     (mode . help-mode)
                     (mode . grep-mode)
                     (mode . completion-list-mode)
                     (mode . emacs-lisp-mode)
                     (name . "\\*scratch\\*")
                     (name . "\\*Messages\\*")))
                   ("Org"
                    (mode . org-mode))
                   ("Code Review"
                    (or
                     (mode . github-review-mode)))
                   ("Programming"
                    (or
                     (name . "\\*inferior-lisp\\*")
                     (name . "*slime*")
                     (mode . perl-mode)
                     (mode . cperl-mode)
                     (mode . java-mode)
                     (mode . python-mode)
                     (mode . c-mode)
                     (mode . lisp-mode)
                     (mode . js2-mode)
                     (mode . typescript-mode)
                     (mode . js-mode)
                     (mode . nix-mode)
                     (mode . kotlin-mode)
                     (mode . web-mode)))
                   ("Data/Config"
                    (or
                     (name . "JSON")
                     (name . "YAML")))
                   ("Source Ctrl"
                    (or
                     (mode . magit-mode)
                     (mode . magit-cherry-mode)
                     (mode . magit-diff-mode)
                     (mode . magit-log-mode)
                     (mode . magit-log-select-mode)
                     (mode . magit-merge-preview-mode)
                     (mode . magit-process-mode)
                     (mode . magit-refs-mode)
                     (mode . magit-reflog-mode)
                     (mode . magit-revision-mode)
                     (mode . magit-stash-mode)
                     (mode . magit-stashes-mode)
                     (mode . magit-status-mode))))))))

  (setq ibuffer-show-empty-filter-groups nil)

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default"))))
    #+end_src

*** Code folding
    Vimish-fold allows creation of arbitrary in-buffer folds based on the
    selected region
    #+begin_src emacs-lisp :lexical no
;; vim type folds
(use-package vimish-fold
  :defer 3
  :commands (vimish-fold-toggle vimish-fold)
  :init
  (vimish-fold-global-mode 1))
    #+end_src

*** Popup Buffers
Enable rules for popups in Emacs.
    #+begin_src emacs-lisp
(winner-mode t)

(use-package shackle
  :config
  (setq-default shackle-rules '((compilation-mode :noselect t))
                shackle-default-rule '(:regexp t :popup t :select t :align bottom)))
    #+end_src

*** Window Navigation
    Windmove allows navigation between windows using arrow keys which is
    useful for quickly switching between a couple of active windows. Ace
    Window allows jumping between numbered windows which is useful when there
    are more to navigate

    #+begin_src emacs-lisp
(use-package ace-window
  :defer 3
  :init
  (progn
    (global-set-key (kbd "C-x o") 'ace-window)))

(use-package windmove
  :defer 3
  :config
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down))
    #+end_src

*** Buffer handling
To kill all the buffers at once, use the below
/key combo C-c K/
    #+begin_src emacs-lisp
(defun kill-all-buffers ()
  "Close all buffers."
  (interactive)
  (let ((lsp-restart 'ignore))
    ;; (maybe-unset-buffer-modified)
    (delete-other-windows)
    (save-some-buffers)
    (let
        ((kill-buffer-query-functions '()))
      (mapc 'kill-buffer (buffer-list)))))

(bind-key "C-c K" #'kill-all-buffers)
    #+end_src

*** Undo tree for emacs
#+begin_src emacs-lisp
;; undo-tree for undoing anything
(use-package undo-tree
  :demand t
  :diminish (undo-tree-mode . "")
  :bind (:map undo-tree-map ("C-x y u" . hydra-undo-tree/body))
  ;; :hook (org-mode . undo-tree-mode)
  :init
  ;; Persistent undo-tree history across emacs sessions
  (let ((aqua/undo-tree-history-directory (expand-file-name "undo-tree" aqua-savefile-dir)))
    (setq undo-tree-history-directory-alist `(("." . ,aqua/undo-tree-history-directory))))
  ;; Hydra definition for keymaps
  (defhydra hydra-undo-tree (:hint nil)
    "
  _p_: undo  _n_: redo _s_: save _l_: load   "
    ("p"   undo-tree-undo)
    ("n"   undo-tree-redo)
    ("s"   undo-tree-save-history)
    ("l"   undo-tree-load-history)
    ("u"   undo-tree-visualize "visualize" :color blue)
    ("q"   nil "quit" :color blue))
  :config
  (global-undo-tree-mode 1)
  ;; Each node in the undo tree should have a timestamp.
  (setq undo-tree-visualizer-timestamps t)
  ;; Show a diff window displaying changes between undo nodes.
  (setq undo-tree-visualizer-diff t)
  ;; https://irreal.org/blog/?p=8614
  ;; C-u C-x u to undo changes in region.
  (setq undo-tree-enable-undo-in-region t))
#+end_src

*** Autorevert
In certain cases it is helpful to discard the current changes to a file and
revert back to a saved version of the file. The built-in package ~autorevert~ can
help in such cases.
#+begin_src emacs-lisp :lexical no
;; Press C-x R to revert to a previous version of the file
(use-package autorevert
  :demand
  :ensure nil
  :delight auto-revert-mode
  :bind ("C-x R" . revert-buffer)
  :custom (auto-revert-verbose nil)
  :config (global-auto-revert-mode))
#+end_src

*** Toggle between the most recent buffers
We define a handy function to toggle between the two most recent buffers. It
has the same effect as =C-x b RET= combination, but can be bound to a simple key
combination. It is being set it to =C-`=.

#+begin_src emacs-lisp :lexical no
;; toggle between most recent buffers
(defun aqua/switch-to-previous-buffer ()
  "Switch to most recent buffer. Repeated calls toggle back and forth between the most recent two buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

;; set key binding
(global-set-key (kbd "C-`") 'aqua/switch-to-previous-buffer)
#+end_src

* File and Directory Management
File and directory as well as buffer management handling using =dired=

Install =dired-icons= to show case file type icons in =dired-mode=

#+begin_src emacs-lisp :lexical no
;;  Adds dired support to all-the-icons
(use-package all-the-icons-dired
  :after (all-th-icons)
  :quelpa
  (:fetcher github :repo "wyuenho/all-the-icons-dired")
  :hook
  (dired-mode . all-the-icons-dired-mode))
#+end_src

Dired is a built-in feature of Emacs that builds a file listing and allows you
to see/modify/open/etc files that are in a directory.

=OSX= does not support the options like =--group-directories-first=, so we can
install ~coreutils~ which contains ~gls~ for file listing.

#+begin_src emacs-lisp :lexical no
;; brew install coreutils
(if (executable-find "gls")
    (progn
      (setq insert-directory-program "gls"
            dired-listing-switches "-lFaGh1v --group-directories-first"))
  (setq dired-listing-switches "-ahlF"))
#+end_src

By default ~dired~ will list files and directories in alphabetical order. If you
would rather have directories at the top of the file and files below, you can
set ~ls-lisp-dirs-first~ to *t* and they will always be at the top.

#+begin_src emacs-lisp :lexical no
(setq ls-lisp-dirs-first t)
#+end_src

When deleting or copying files, you can have dired default to acting recursively
by setting:

#+begin_src emacs-lisp :lexical no
;; Confirmations, Recursive copying and deleting
(setq dired-free-space nil
      dired-deletion-confirmer 'y-or-n-p
      dired-filter-verbose nil
      dired-clean-confirm-killing-deleted-buffers nil
      dired-recursive-deletes 'top
      dired-recursive-copies  'always
      dired-create-destination-dirs 'ask)
#+end_src

Just like with ls, if you want an "@" appended to the end of file names if
they're symlinks, you can set the following:

#+begin_src emacs-lisp :lexical no
;; Showing symlinks differently
(setq dired-ls-F-marks-symlinks t)
;; Instead of a hard delete, move a file to the trash
(setq delete-by-moving-to-trash t)
#+end_src

*** Packages to enhance Dired

There are a bunch of packages that can enhance dired or make it better, here are
some we are exploring.

**** dired-x

=dired-x= is a package, but not really an external one because it's built into
Emacs, by doing this you can easily jump to dired while browsing for files with
=C-j=.

#+begin_src emacs-lisp :lexical no
;; builtin dired-x
(require 'dired-x)
(setq-default dired-omit-files-p t)
(add-to-list 'dired-omit-extensions ".DS_Store")
#+end_src

**** dired-aux

Also built into Emacs, this is what provides the =chgrp=, =chown=, =chmod=
functionality as well as some other builtins.

#+begin_src emacs-lisp :lexical no
(require 'dired-aux)
#+end_src


** File system analyser
Get a tabulated view of file listings sorted by size using =disk-usage=. These
results are cached for speed.

#+begin_src emacs-lisp :lexical no
(use-package disk-usage
  :demand
  :commands (disk-usage))
#+end_src
