* YaSnippet Configuration

=YASnippet= is a code template system for Emacs. For snippet completion's use ~yasnippet~

#+begin_src emacs-lisp :lexical no
(use-package yasnippet
  :defer 2

  :diminish (yas-minor-mode . " â“Ž")

  ;; :hook (after-init-hook . yas-global-mode)

  :bind (:map yas-minor-mode-map
              ("M-<tab>" . yas-expand))

  :hook (yas-minor-mode . aqua/yas-auto-setup)

  :init (progn
          ;; enable yasnippet globally
          (yas-global-mode +1)

          (setq yas-minor-mode-map nil)

          ;; silent message in start.
          (advice-add #'yas-reload-all :around #'ad/silent-message)

          ;; set snippets directory location
          ;; (setq yas-snippet-dirs `(,(expand-file-name "snippets" user-emacs-directory)))
          (if (file-exists-p "~/.emacs.d/snippets")
              (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
            (setq yas-snippet-dirs '()))
          (setq yas-snippet-dirs (cons (expand-file-name "snippets" user-emacs-directory)
                                       (yas-snippet-dirs)))
          (setq yas-triggers-in-field t))

  :config (progn
            (add-to-list 'yas-key-syntaxes 'yas-shortest-key-until-whitespace)

            ;; Do not activate for read only and non-existent snippets
            (set-default 'yas--dont-activate
                         #'(lambda ()
                             (or buffer-read-only
                                 (and yas-snippet-dirs
                                      (null (yas--get-snippet-tables))))))

            ;; Select a snippet with popup library
            (setq yas-prompt-functions '(yas-dropdown-prompt
                                         yas-ido-prompt
                                         yas-completing-prompt
                                         yas-no-prompt))

            ;; Tweaking Yasnippet for Org mode
            (defun yas--org-very-safe-expand ()
              (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))
            (add-hook 'org-mode-hook
                      (lambda ()
                        (make-variable-buffer-local 'yas-trigger-key)
                        (setq yas-trigger-key [tab])
                        (add-to-list 'org-tab-first-hook 'yas--org-very-safe-expand)))

            (let ((ydus yas--default-user-snippets-dir))
              (and (member ydus yas-snippet-dirs)
                   (yas-load-directory ydus)))

            (setq yas-wrap-around-region t
                  yas-triggers-in-field t))

  :preface
  (defun ad/silent-message (original &rest args)
    "Silent function `ORIGINAL' message."
    (let ((inhibit-message t)
          (message-log-max nil))
      (apply original args)))

  (defun aqua/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand))))

  (defun aqua/yas-auto-setup ()
    (add-hook 'post-self-insert-hook #'aqua/yas-try-expanding-auto-snippets nil t))


  ;; Silences the warning when running a snippet with backticks (runs a command in the snippet)
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
#+end_src

** Snippets collection
=yasnippet-snippets= is a package that provides a collection of yasnippet snippets for many languages.

#+begin_src emacs-lisp :lexical no
;; a collection of yasnippet snippets for many languages
(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

** Completion at a point for Yasnippet
~yasnippet-capf~ is a simple capf (*Completion-At-Point Function*) for completing
yasnippet snippets.
#+begin_src emacs-lisp :lexical no
;; Yasnippet Completion At Point Function
(use-package yasnippet-capf
  :after cape
  :init (add-to-list 'completion-at-point-functions #'yasnippet-capf))
#+end_src

** 3rd party snippet collection from Doom
Doom Emacs' Snippet Library provides snippets as well as exposes a small API to assist you in writing your own snippets.
#+begin_src emacs-lisp :lexical no
;; 3rd party snippet collection from doom emacs
(use-package doom-snippets
  :after yasnippet
  :straight (doom-snippets :type git :host github :repo "doomemacs/snippets" :files ("*.el" "*")))
#+end_src
