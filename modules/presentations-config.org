#+begin_src emacs-lisp :exports none
  ;;; package --- org mode configuration -*- lexical-binding:t ; -*-
  ;;;
  ;;; Commentary
  ;;; DO NOT EDIT THIS FILE DIRECTLY
  ;;; This is a file generated from a literate programing source file
  ;;; ORG mode configuration
  ;;; Filename   : presentations-config.el
  ;; Description : Create online presentations in Emacs using org-mode
  ;;               and the javascript library revealjs.  In case of any
  ;;               html5 based slides are needed, we can use ox-html5
  ;;; Date               :
  ;;; Last Modified Date :
  ;;
  ;; elisp code for customizing the org-mode slideshow settings
  ;; https://github.com/hakimel/reveal.js/wiki/Example-Presentations
  ;; https://github.com/jr0cket/slides/tree/gh-pages
  ;; https://gitlab.com/oer/emacs-reveal
  ;;
  ;; Templates are available in Latex format by Beamer at
  ;; https://ctan.org/tex-archive/macros/latex/contrib/beamer/doc/solutions/
  ;;
  ;; - For Beautiful Presentations -
  ;; https://latex-beamer.com/
  ;;
  ;; #+OPTIONS: num:nil toc:nil
  ;; #+REVEAL_TRANS: None/Fade/Slide/Convex/Concave/Zoom
  ;; #+REVEAL_THEME: Black/White/League/Sky/Beige/Simple/Serif/Blood/Night/Moon/Solarized
  ;; #+Title: Title of Your Talk
  ;; #+Author: Your Name
  ;; #+Email: Your Email Address or Twitter Handle
  ;;
  ;;; Code:
  ;;;
#+end_src

#+RESULTS:

* Auxiliary modes working with org for creating presentations
Here we have a few configurations for creating presentations using org mode.

** Writing Beamer presentations in org-mode
Beamer is a LaTeX package for writing presentations. A working LaTeX
installation is required for exporting to PDF. If it is not yet installed on
your system, install ~MacTex~ or ~TeX Live~ after which we must define a beamer
class in ~org-latex-export-classes~.

A guide for [[https://latex-beamer.com/][Latex Beamer]] is available for reference.

#+begin_src emacs-lisp
;; http://emacs-fu.blogspot.com/2009/10/writing-presentations-with-org-mode-and.html
;; ox-beamer export - allow for export=>beamer by placing
;; to use any of the classes, add the following to org-mode file
;; #+LaTeX_CLASS: <classname>
;; #+latex_class: beamer in Org files
;; org mode default classes: article, book, report, beamer

(use-package ox-beamer
  :ensure org
  :after ox
  :init
  (defun org-beamer-backend-p (info)
    (eq 'beamer (and (plist-get info :back-end)
                     (org-export-backend-name (plist-get info :back-end)))))

  ;; (add-to-list 'org-export-conditional-features
  ;;              '(org-beamer-backend-p . beamer) t)
  :config
  (setq org-beamer-theme "metropolis"
        org-beamer-frame-level 2))

(use-package ox-latex
  :ensure org
  :after (org))
#+end_src

*** Starting a Beamer
#+begin_example
#+LaTeX_CLASS: beamer
#+MACRO: BEAMERMODE presentation
#+MACRO: BEAMERTHEME Antibes
#+MACRO: BEAMERCOLORTHEME lily
#+MACRO: BEAMERSUBJECT RMRF
#+MACRO: BEAMERINSTITUTE Miskatonic University, Astrology Dept.
#+TITLE: Presentation with Org-Mode and Beamer
#+AUTHOR: Someone
#+end_example

#+begin_src emacs-lisp :lexical no
;; Beamer latex class definition
(eval-after-load "ox-latex"
  ;; update the list of LaTeX classes and associated header (encoding, etc.)
  ;; and structure
  '(add-to-list 'org-latex-classes
                `("beamer"
                  ,(concat "\\documentclass[presentation]{beamer}\n"
                           "[DEFAULT-PACKAGES]"
                           "[PACKAGES]"
                           "[EXTRA]\n")
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

** Custom settings for BEAMER exports

Define list of functions for transcoding the text. The filters are called with
the arguments transcoded data, the backend and the communication channel.

#+begin_src emacs-lisp :lexical no :tangle no
(defun aqua-beamer-bold (contents backend info)
  (when (eq backend 'beamer)
    (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\structure" contents)))
(defun aqua-beamer-underline (contents backend info)
  (when (eq backend 'beamer)
    (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))
(defun aqua-beamer-strike (contents backend info)
  (when (eq backend 'beamer)
    (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\alert" contents)))

(add-to-list 'org-export-filter-bold-functions 'aqua-beamer-bold)
(add-to-list 'org-export-filter-underline-functions 'aqua-beamer-underline)
(add-to-list 'org-export-filter-strike-through-functions 'aqua-beamer-strike)
#+end_src

** Change face of strike through

This is not exported.
#+begin_src emacs-lisp :lexical no :tangle no
;; change strike through face
(require 'cl-lib)
(setq org-emphasis-alist
      (cons '("+" '(:inherit org-warning :inherit bold))
            (delete* "+" org-emphasis-alist :key 'car :test 'equal)))
#+end_src

** Add frame options to footnote

#+begin_src emacs-lisp :lexical no :tangle no
;; frame options to footnote
(defun aqua-beamer-footnote (contents backend info)
  (when (eq backend 'beamer)
    (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\footnote[frame]" contents)))

(add-to-list 'org-export-filter-footnote-reference-functions 'aqua-beamer-footnote)
#+end_src

** Colored box environment
Provide a new environment for "colored" box

#+begin_src emacs-lisp :lexical no
;; colored box
;; (add-to-list 'org-beamer-environments-extra '("cbox" "c" "\\begin{cbox}%o(%h)" "\\end{cbox}"))
#+end_src

** Beamer posters

The beamer poster setup from the [[https://github.com/dangom/org-beamerposter][repository]]  encapsulates most boilerplate
required to get a nice Org -> Poster export. It includes not only the necessary
LaTeX headers and Org Mode options, but eventually will also include a set of
useful macros to help defining things such as authors and affiliations.

To get it working the provided =classes= need to be included in the list.

#+begin_src emacs-lisp :lexical no :tangle no
;; The defined class landscape_poster_a1 is meant to be compatible
;; with both PdfLaTeX or XeLaTeX. The template locally redefines
;; org-latex-pdf-process to ensure that the compilation works as expected.
(add-to-list 'org-latex-classes
             '("landscape_poster_a1"
               "\\documentclass[t]{beamer}
           \\usepackage[orientation=landscape,size=a1,scale=1.25]{beamerposter}
           \\usepackage[absolute,overlay]{textpos}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(add-to-list 'org-latex-classes
             '("portrait_poster_a0"
               "\\documentclass[t]{beamer}
           \\usepackage[orientation=portrait,size=a0,scale=1.2,debug]{beamerposter}
           \\usepackage[absolute,overlay]{textpos}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src

** RevealJS

~RevealJS~ exports ~org-mode~ contents to good looking Reveal.js HTML
presentation. For working in the org mode it needs ~org-reveal~ that exports the
~org~ documents to reveal.js presentations. With Org-reveal, you can create
beautiful presentations with 3D effects from simple but powerful Org contents.
#+begin_src emacs-lisp :lexical no
;; reveal.js setup
;; set the location of the reveal js
(use-package ox-reveal
  :ensure t
  :quelpa (:fetcher github :repo "https://github.com/yjwen/org-reveal")
  :init
  ;; (require 'ox-reveal)
  ;; (setq org-reveal-root (concat "file:///" vendor-dir "/javascript/reveal.js"))
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-enable-revealjs-support t
        org-reveal-mathjax t
        org-reveal-postamble "<p>By Sampath Singamsetty</p>"
        org-reveal-hlevel 1
        org-reveal-progress t
        org-reveal-control t
        org-reveal-keyboard t)
  ;; available transitions
  ;;   - default
  ;;   - cube
  ;;   - page
  ;;   - concave
  ;;   - zoom
  ;;   - linear
  ;;   - fade
  ;;   - none
  (setq org-reveal-transition "default")
  ;; available themes
  ;; beige blood moon night serif simple sky solarized
  ;; - Styles:
  ;;   - black (default)
  ;;   - white
  ;;   - league
  ;;     - gray one
  ;;   - sky
  ;;     - nice bright one
  ;;   - beige
  ;;     - nice bright one
  ;;   - simple
  ;;     - bright
  ;;   - serif
  ;;     - old school
  ;;   - blood
  ;;     - cool!
  ;;   - *night*
  ;;     - very nice
  ;;   - moon
  ;;   - solarized
  (setq org-reveal-theme "night")
  (add-hook 'org-mode-hook (lambda () (load-library "ox-reveal"))))
#+end_src

** Trying the org-re-reveal
Not using this at the moment
#+begin_src emacs-lisp :lexical no
;; trying org-re-reveal
(use-package org-re-reveal
  :ensure nil
  :disabled t
  :quelpa (:fetcher github :repo "https://github.com/emacsmirror/org-re-reveal")
  :init
  (setq org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
        org-re-reveal-hlevel 2
        org-re-reveal-revealjs-version 4)
  (add-hook 'org-mode-hook (lambda () (load-library "ox-re-reveal"))))
#+end_src

The below code snippet if executed will generate a sample =html= presentation
=Trying_out_reveal.html= which gets opened in the default browser.

#+begin_src emacs-lisp :tangle no
(progn (shell-command "curl https://raw.githubusercontent.com/yjwen/org-reveal/696613edef0fe17a9c53146f79933fe7c4101100/Readme.org >> Trying_out_reveal.org")
       (switch-to-buffer (find-file "Trying_out_reveal.org"))
       (org-reveal-export-to-html-and-browse))
#+end_src


** Presentation tool for org-mode with org-tree-slide
A presentation tool for ~org-mode~ based on the visibility of outline trees using
~org-tree-slide~ package. As per the documentation, the main purpose of this
elisp is to handle each tree in an org buffer as a slide by simple
narrowing. This emacs lisp is a minor mode for Emacs Org-mode.

The package is available at the report
https://github.com/takaxp/org-tree-slide.

#+begin_src emacs-lisp :lexical no
;; org-tree-slide for presenting in org-mode
;; Press C-< or C-> to navigate back and forth between the slides.
(use-package org-tree-slide
  :quelpa (:fetcher github :repo "https://github.com/takaxp/org-tree-slide")
  :after (org)
  :config
  (setq org-tree-slide-slide-in-effect t
        org-tree-slide-never-touch-face nil
        org-tree-slide-skip-outline-level 8
        org-tree-slide-heading-emphasis t
        org-tree-slide-cursor-init nil
        org-tree-slide-header t
        org-tree-slide-breadcrumbs " > "
        org-tree-slide-activate-message (propertize "Presentation Started!" 'face 'success)
        org-tree-slide-deactivate-message (propertize "Presentation Finished!" 'face 'error)))
#+end_src

** Convert buffer text and decorations to HTML
#+begin_src emacs-lisp :lexical no
(use-package htmlize
  :defer 3
  :commands (htmlize-buffer
             htmlize-file
             htmlize-many-files
             htmlize-many-files-dired
             htmlize-region))
#+end_src

** Change pdf file to png image format
#+begin_src emacs-lisp :lexical no
;; Change pdf file to png image
(defun aqua/change-pdf-to-png (backend)
  (when (org-export-derived-backend-p backend 'reveal)
    (while (re-search-forward "\\(.png\\)" nil t)
      (replace-match ".png"))))

(add-hook 'org-export-before-parsing-hook 'aqua/change-pdf-to-png)
#+end_src

*** Troubleshooting
Issues with rainbow delimiters
#+begin_src emacs-lisp :lexical no
;; to fix conflict with rainbow-delimiters
(defadvice htmlize-buffer-1 (around ome-htmlize-buffer-1 disable)
  (rainbow-delimiters-mode -1)
  ad-do-it
  (rainbow-delimiters-mode t))

(defun ome-htmlize-setup ()
  (when (featurep 'rainbow-delimiters)
     (progn
        (ad-enable-advice 'htmlize-buffer-1 'around 'ome-htmlize-buffer-1)
        (ad-activate 'htmlize-buffer-1))))
#+end_src
