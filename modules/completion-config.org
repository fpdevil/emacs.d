#+TITLE: Emacs completion configuration using IVY from completion-config.org
#+AUTHOR: Sampath Singamsetty

* Completion frameworks                                               :TOC_4:
  - [[#smex-a-smart-m-x-enhancement-for-emacs][SMEX A smart M-x enhancement for Emacs.]]
  - [[#an-alternative-m-x-interface-for-emacs-with-amx][An alternative M-x interface for Emacs with amx]]
  - [[#ivy][IVY]]
    - [[#counsel][Counsel]]
  - [[#a-more-friendly-interface-with-ivy-rich][A More friendly interface with ivy-rich]]
  - [[#ivy-with-yasnippet][IVY with Yasnippet]]
  - [[#using-ivy-posframe][Using ivy posframe]]
  - [[#all-the-icons][All the icons]]
  - [[#all-the-icons-for-ivy-rich][All the icons for ivy-rich]]
    - [[#nerd-icons][Nerd icons]]
  - [[#hydra-counsel-menu][Hydra Counsel Menu]]
  - [[#minibuffer-completion][Minibuffer completion]]
    - [[#vertico][Vertico]]
    - [[#orderless][Orderless]]
    - [[#magnalia][Magnalia]]
    - [[#icon-completion-with-all-the-icons-completion][Icon completion with all-the-icons-completion]]

** SMEX A smart M-x enhancement for Emacs.
*smex* is an =M-x= enhancement for Emacs. Built on top of Ido, it provides a
convenient interface to your recently and most frequently used commands., and
to all the other commands, too.

 #+begin_src emacs-lisp :lexical no
   ;; A smart M-x enhancement for Emacs.
   ;; currently disabled in favour of amx
   (use-package smex
     :if (not (featurep 'helm-mode))
     :ensure t
     :bind ("M-x" . smex)
     :config
     (setq smex-history-length 35)
     (setq smex-completion-method 'ivy))
  #+end_src


** An alternative M-x interface for Emacs with amx
  Command help available:
  - ~C-h f~, while amx is active, runs describe-function on the currently
    selected command.
  - ~M-.~ jumps to the definition of the selected command.
  - ~C-h w~ shows the key bindings for the selected command. (Via where-is.)
  #+begin_src emacs-lisp :tangle no
    ;; An alternative M-x interface for Emacs
    (use-package amx
      :ensure t
      :init (amx-mode))
 #+end_src

** IVY
  Ivy is a generic completion mechanism for Emacs.
#+begin_src emacs-lisp
;; Ivy - a generic completion frontend for Emacs
(use-package ivy
  ;;:after amx
  :ensure t
  :diminish
  :bind
  (("C-s"   . swiper)
   ("M-s ." . swiper-isearch-thing-at-point))
  :config
  (ivy-mode 1)
  (setq ivy-wrap t
        ;; enable bookmarks and recentf
        ivy-use-virtual-buffers t
        ivy-count-format "(%d/%d) "
        ivy-virtual-abbreviate 'full ; Show the full virtual file paths
  	    ivy-display-style 'fancy
        ivy-on-del-error-function 'ignore)
  ;; minibuffer killing...
  (when (setq enable-recursive-minibuffers t)
    (minibuffer-depth-indicate-mode 1))
  (define-key ivy-minibuffer-map (kbd "<escape>") 'minibuffer-keyboard-quit))

;; inline search with overview
(use-package swiper
  :ensure t)

;; hydra
(use-package hydra
  :init
  (setq hydra-is-helpful t)
  :config
  (require 'hydra-ox))

(use-package ivy-hydra
  :defer t
  :after hydra
  :commands defhydra
  :config
  (progn
    (setq hydra-verbose t
          hydra--work-around-dedicated nil)
    (hydra-add-font-lock)))

(use-package ivy-prescient
  :ensure t
  :after counsel
  :config
  (ivy-prescient-mode 1))
  #+end_src

*** Counsel

=counsel= is an add-on for =ivy= that can provide various completion functions via
=ivy=.

#+begin_src emacs-lisp :lexical no
;; counsel package
(use-package counsel
  :ensure t
  :config (counsel-mode)
  :diminish (counsel-mode . " â’¸")
  :bind
  (("M-x"     . counsel-M-x)
   ("C-x b"   . counsel-ibuffer)
   ("C-x B"   . counsel-switch-buffer-other-window)
   ("C-x C-f" . counsel-find-file)
   ("C-c ci"  . counsel-imenu)
   ("C-c cl"  . counsel-load-theme)
   ("C-c co"  . counsel-outline)
   ("C-c cf"  . counsel-recentf)
   ("C-c cs"  . swiper-thing-at-point)
   ("C-c cv"  . counsel-set-variable)
   ("C-c cw"  . counsel-switch-buffer)
   ("C-h f"   . counsel-describe-function)
   ("C-h v"   . counsel-describe-variable)
   ("C-h k"   . counsel-descbinds)))
   #+end_src

To produce a buffer of list of options while within the ivy, press ~C-c C-o~ which
brings a buffer with all the options from the ivy using ~ivy-occur~.

** A More friendly interface with ivy-rich

=ivy-rich= provides a more friendly interface to =ivy=. The package comes with rich
transformers for the commands from =ivy= and =counsel=. It should be easy enough to
define your own transformers too.

#+begin_src emacs-lisp :lexical no
;; A friendly interface to IVY using ivy-rich
(use-package ivy-rich
  :ensure t
  :init
  (ivy-rich-mode 1)
  :after (ivy)
  :hook (counsel-mode . ivy-rich-mode)
  :config
  ;; support for all the icon to ivy-rich
  (defun ivy-rich-switch-buffer-icon (candidate)
    (with-current-buffer
        (get-buffer candidate)
      (all-the-icons-icon-for-mode major-mode)))

  (setq ivy-format-function #'ivy-format-function-line)
  ;; for better performance and icons
  (setq ivy-rich-parse-remote-buffer nil)
  ;; update definitions for ivy display transformers
  (setq ivy-rich-display-transformers-list
  	    (plist-put ivy-rich-display-transformers-list
  		           'ivy-switch-buffer
  		           '(:columns
  		             ((ivy-rich-candidate (:width 40))
                      (ivy-rich-switch-buffer-icon (:width 2))
                      (ivy-rich-switch-buffer-size (:width 7))
  			          (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
  			          (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
  			          (ivy-rich-switch-buffer-project (:width 15 :face success))
  			          (ivy-rich-switch-buffer-path (:width (lambda
                                                             (x)
                                                             (ivy-rich-switch-buffer-shorten-path
  					                                          x (ivy-rich-minibuffer-width 0.3))))))))))
#+end_src

** IVY with Yasnippet
=ivy= may be integrated with =yasnippet= for better snippet
management. ~ivy-yasnippet~ is a package that provides preview of the =yasnippet=
snippets using *ivy*.

#+begin_src emacs-lisp :lexical no
;; Preview yasnippet snippets with ivy
(use-package ivy-yasnippet
  :after (ivy)
  :quelpa
  (ivy-yasnippet :fetcher github :repo "mkcms/ivy-yasnippet"))
  #+end_src

** Using ivy posframe

=ivy-posframe= is an ivy extension, which let ivy use posframe to show its
candidate menu. So, instead of showing the ivy options at the bottom of emacs,
it shows the same in a floating window.

#+begin_src emacs-lisp :lexical no
;; ivy-posframe is a ivy extension, which let ivy use posframe
;; to show its candidate menu.
(use-package ivy-posframe
  :diminish ivy-posframe-mode
  :ensure t
  :init
  (ivy-posframe-mode 1)
  :custom
  (defun ivy-posframe-get-size ()
  "The default functon used by `ivy-posframe-size-function'."
  (list
   :height ivy-posframe-height
   :width ivy-posframe-width
   :min-height (or ivy-posframe-min-height
                   (let ((height (+ ivy-height 1)))
                     (min height (or ivy-posframe-height height))))
   :min-width (or ivy-posframe-min-width
                  (let ((width (round (* (frame-width) 0.62))))
                    (min width (or ivy-posframe-width width))))))

  (setq ivy-posframe-size-function 'ivy-posframe-get-size)
  :config
  (defun my-toggle-ivy-posframe ()
    "Toggle `ivy-posframe'."
    (interactive)
    (ivy-posframe-mode (if ivy-posframe-mode -1 1)))

  (setq ivy-posframe-display-functions-alist
        '((counsel-M-x . ivy-posframe-display-at-point)
          (t           . ivy-posframe-display)
          (t           . ivy-posframe-display-at-frame-center)))
  (setq ivy-posframe-parameters '((parent-frame . nil)
                                  (left-fringe  . 8)
                                  (right-fringe . 8)))
  (setq ivy-posframe-border-width 2))
#+end_src

** All the icons
~all-the-icons~ is a utility package to collect various Icon Fonts and propertize
them within Emacs.

#+begin_src emacs-lisp :lexical no
;; A utility package to collect various Icon Fonts and propertize them within Emacs.
(use-package all-the-icons
  :init
  (add-hook 'after-init-hook (lambda () (require 'all-the-icons)))
  :config
  (setq all-the-icons-scale-factor 1.0))
#+end_src

#+begin_src emacs-lisp :lexical no
;; install all-the-icons-ivy
(use-package all-the-icons-ivy
  :after (ivy all-the-icons)
  :init
  ;; (add-hook 'counsel-projectile-mode-hook 'all-the-icons-ivy-setup)
  (add-hook 'ivy-mode-hook 'all-the-icons-ivy-setup)
  :config
  (progn
    (defun all-the-icons-ivy-file-transformer (s)
	  "Return a candidate string for filename S preceded by an icon."
	  (format "%s %s"
		      (propertize "\t" 'display (all-the-icons-ivy-icon-for-file s))
		      s))
    (defun all-the-icons-ivy--buffer-transformer (b s)
	  "Return a candidate string for buffer B named S preceded by an icon.
 Try to find the icon for the buffer's B `major-mode'.
 If that fails look for an icon for the mode that the `major-mode' is derived from."
	  (let ((mode (buffer-local-value 'major-mode b)))
	    (format "%s %s"
		        (propertize "\t" 'display (or
					                       (all-the-icons-ivy--icon-for-mode mode)
					                       (all-the-icons-ivy--icon-for-mode (get mode 'derived-mode-parent))))
		        (all-the-icons-ivy--buffer-propertize b s))))
    (all-the-icons-ivy-setup)))
#+end_src


** All the icons for ivy-rich

This package is extracted from =Centaur Emacs= and leverages =ivy-rich= and
=all-the-icons=.

#+begin_src emacs-lisp :lexical no
;; icons for icy-rich
(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1)
  :config
  ;; Whether display the icons
  (setq all-the-icons-ivy-rich-icon t)

  ;; Whether display the colorful icons.
  ;; It respects `all-the-icons-color-icons'.
  (setq all-the-icons-ivy-rich-color-icon t)

  ;; The icon size
  (setq all-the-icons-ivy-rich-icon-size 1.0)

  ;; Whether support project root
  (setq all-the-icons-ivy-rich-project t)

  ;; Maximum truncation width of annotation fields.
  ;; This value is adjusted depending on the `window-width'.
  (setq all-the-icons-ivy-rich-field-width 80)

  ;; Definitions for ivy-rich transformers.
  ;; See `ivy-rich-display-transformers-list' for details."
  all-the-icons-ivy-rich-display-transformers-list

  ;; Slow Rendering
  ;; If you experience a slow down in performance when rendering multiple icons simultaneously,
  ;; you can try setting the following variable
  (setq inhibit-compacting-font-caches t))
#+end_src

*** Nerd icons
The package ~nerd-icons-ivy-rich~ provides an excellent user experience while
using =IVY=. The repository is available at [[https://github.com/seagle0128/nerd-icons-ivy-rich][nerd-icons-ivy-rich]].
#+begin_src emacs-lisp :lexical no
;; nerd icons for ivy
(use-package nerd-icons-ivy-rich
  :defer t
  :quelpa
  (nerd-icons-ivy-rich :fetcher github :repo "seagle0128/nerd-icons-ivy-rich")
  :commands (nerd-icons-ivy-rich-mode)
  :config
  (setq nerd-icons-ivy-rich-icon t
        nerd-icons-ivy-rich-color-icon t
        nerd-icons-ivy-rich-icon-size 1.0))
#+end_src

** Hydra Counsel Menu
Create a hydra menu for the counsel commands that are used frequently
#+begin_src emacs-lisp
;; Hydra menu to for counsel.
(defhydra hydra-counsel-menu (:hint nil
                              :foreign-keys warn
                              :exit t
                              :pre (setq which-key-inhibit t)
                              :post (setq which-key-inhibit nil))
  "====== Counsel Menu (F4) ======\n"
  ("f" (my/counsel-org-agenda-headlines) "Agenda")
  ("n" (org-roam-node-find) "Roam")
  ("r" (counsel-recentf) "Recentf")
  ("i" (counsel-ibuffer) "IBuffer")
  ("q" nil "quit menu" :color blue))
(global-set-key (kbd "<f4>") 'hydra-counsel-menu/body)
#+end_src

** Minibuffer completion
Additional completion information under the minibuffer while using ~ivy~ or using
~emacs~ commands.

*** Vertico
Vertico provides a  performant and minimalistic vertical completion  UI based on
the default  completion system.  The main focus  of Vertico is  to provide  a UI
which  behaves  correctly  under  all circumstances.  By  reusing  the  built-in
facilities  system,  Vertico achieves  full  compatibility  with built-in  Emacs
completion commands and completion tables.  Vertico only provides the completion
UI  but  aims  to  be   highly  flexible,  extensible  and  modular.  Additional
enhancements are available as extensions or complementary packages.

~vertico~ provides completion and additional information in the minibuffer while
working  with either  ~helm~  or ~ivy~.  It  is a  nice,  fast minibuffer  narrowing
framework. It works well with quite a lot of package.

#+begin_src emacs-lisp :lexical no
  ;; vertico for minibuffer completion
  (use-package vertico
    :defer t
    :quelpa
    (:fetcher github :repo "https://github.com/minad/vertico")
    :init
    (vertico-mode 1)
    :custom
    (vertico-cycle t)
    :custom-face
    (vertico-current ((t (:background "#1d1f21"))))
    :config
    ;; Enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    ;; Hide commands in M-x that do not work in the current mode.
    (setq read-extended-command-predicate #'command-completion-default-include-p)
    ;; Add prompt indicator to `completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    ;; Use `consult-completion-in-region' which works with vertico
    ;; Otherwise use the default `completion--in-region' function.
    ;; completion-at-point command is usually bound to M-TAB or TAB
    (setq completion-in-region-function
      (lambda (&rest args)
        (apply (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)
               args))))
#+end_src

*** Orderless
It  provides  Emacs  completion  style  that matches  multiple  regexps  in  any
order.  The default  behaviour  of ~vertico~  package is  to  sort the  candidates
according  to   their  history   position,  then  by   length  and   finally  by
alphabetical.  For an  improved  searching across  completion  (e.g., via  regex
matches and filter expressions separated by spaces), we can use ~orderless~.

#+begin_src emacs-lisp
;; Emacs completion style that matches multiple regexps in any order
(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic partial-completion)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))
        orderless-component-separator "[ |]"))
#+end_src

*** Magnalia
Using Magnalia to enable richer  annotations (e.g., summary documentation of the
functions and variables, as well as having the size and the last consultation of
the files) for minibuffer completions.

#+begin_src emacs-lisp :lexical no
;; `magnalia' for richer annotations.  This will display useful
;; annotations next to entries in the minibuffer.  For example, when
;; using M-x it will show a brief description of the command as well
;; as the keybinding associated with it (if any).
(use-package marginalia
  :after vertico
  :init (marginalia-mode)
  :custom
  (marginalia-annotators
   '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :config
  (define-key minibuffer-local-map (kbd "M-m") #'marginalia-cycle))
#+end_src

*** Icon completion with all-the-icons-completion
~all-the-icons-completion~ enables to add icons to completion candidates in
Emacs.
#+begin_src emacs-lisp :lexical no
;; Add icons to completion candidates in Emacs
(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src
