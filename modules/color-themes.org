#+TITLE: Color themes customisation for Emacs

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

* Colour Themes Configuration                                         :TOC_4:
  - [[#treat-all-themes-as-safe-no-query-before-use][Treat all themes as safe; no query before use.]]
  - [[#advice-for-adding-hooks][Advice for adding hooks]]
  - [[#toggle-the-color-themes][Toggle the color themes]]
  - [[#base16-themes][Base16 themes]]
  - [[#solarized-theme][Solarized theme]]
  - [[#doom-themes][Doom themes]]
  - [[#additional-themes][Additional themes]]
    - [[#monokai-alt-theme][Monokai Alt theme]]
    - [[#gruvbox-light-and-dark-theme][Gruvbox light and dark Theme]]
    - [[#darkokai-dark-theme][Darkokai dark theme]]
    - [[#darktooth-theme][Darktooth theme]]
    - [[#github-theme][Github theme]]
    - [[#kaolin-themes][Kaolin themes]]
    - [[#dracula-theme][Dracula theme]]
    - [[#tomorrow-themes-by-sanityinc][Tomorrow themes by Sanityinc]]
    - [[#atom-one-dark-theme][Atom One Dark theme]]
    - [[#material-theme][Material theme]]
    - [[#majapahit-dark-and-light-themes][Majapahit Dark and Light themes]]
    - [[#poet-theme-for-writers][Poet theme for writers]]
    - [[#leuven-dark-and-light-theme][Leuven Dark and Light theme]]
    - [[#spacemancs-dark-and-light-themes][Spacemancs Dark and Light themes]]
    - [[#nano-theme][Nano theme]]
    - [[#flacui-theme][Flacui theme]]
    - [[#ayu-dark-and-light-themes][AYU Dark and Light Themes]]
    - [[#modus-light-and-dark-themes][Modus Light and Dark Themes]]
    - [[#humanoid-theme-for-emacs][Humanoid theme for Emacs]]
    - [[#tangonov-dark-and-light-theme][Tangonov Dark and Light theme]]
    - [[#catppuccin-soothing-theme][Catppuccin Soothing theme]]
    - [[#shanty-emacs-theme][Shanty Emacs Theme]]
- [[#set-a-colour-theme][Set a colour theme]]
- [[#switch-themes-using-hydra][Switch themes using Hydra]]
- [[#custom-utilities][Custom Utilities]]
  - [[#list-of-available-themes][List of available themes]]
  - [[#switch-colour-themes-from-emacs][Switch colour themes from Emacs]]
- [[#profiling][Profiling]]
  - [[#final-report][Final report]]

** Treat all themes as safe; no query before use.
#+begin_src emacs-lisp :lexical no
(setf custom-safe-themes t)
(setq custom--inhibit-theme-enable nil)
#+end_src

** Advice for adding hooks
#+begin_src emacs-lisp :lexical no
(defvar aqua/theme-hooks nil
  "((theme-id . function) ...)")

(defun aqua/add-theme-hook (theme-id hook-func)
  (add-to-list 'aqua/theme-hooks (cons theme-id hook-func)))

(defun aqua/disable-themes ()
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(defun aqua/load-theme-advice (f theme-id &optional no-confirm no-enable &rest args)
  "Enhances `load-theme' in two ways:
1. Disables enabled themes for a clean slate.
2. Calls functions registered using `aqua/add-theme-hook'."
  (unless no-enable
    (aqua/disable-themes))
  (prog1
      (apply f theme-id no-confirm no-enable args)
    (unless no-enable
      (pcase (assq theme-id aqua/theme-hooks)
        (`(,_ . ,f) (funcall f))))))

(advice-add 'load-theme
            :around
            #'aqua/load-theme-advice)
#+end_src

** Toggle the color themes
We can toggle from a list of commonly used themes that we can maintain in a
variable. Whenever we select the toggle function, one of the listed themes will
be selected.
#+begin_src emacs-lisp :lexical no
;; list of some commonly used themes.
(setq aqua/themes '(doom-laserwave
                    doom-solarized-light
                    doom-vibrant spacemacs-light
                    solarized-gruvbox-dark
                    solarized-gruvbox-light
                    doom-material
                    doom-material-dark
                    leuven))

(setcdr (last aqua/themes) aqua/themes)
#+end_src

Reset any existing themes
#+begin_src emacs-lisp
;; to reset themes
(cl-defun aqua/switch-themes (&optional (new-theme (pop aqua/themes)))
  "Disable all themes and load NEW-THEME, which defaults from ‘aqua/themes’.

When a universal prefix is given, “C-u C-c t”, we load a random
theme from all possible themes."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes)
  (-let [theme (if current-prefix-arg
                   (nth (random (length (custom-available-themes)))
                        (custom-available-themes))
                 new-theme)]
    (when theme
      (load-theme theme)
      (message "Theme %s" theme))))
;; end reset-themes

(defalias 'aqua/toggle-theme #'aqua/switch-themes)
;;(global-set-key "\C-u\C-c\ t" 'aqua/toggle-theme)

;; to toggle a specific theme
;; (aqua/toggle-theme 'doom-laserwave)
#+end_src

** Base16 themes

  - Using the base16-emacs theme implementation
  - https://github.com/belak/base16-emacs
  - This has a version of solarized-dark which is the theme I generally use
  - The theme is loaded and then a few minor tweaks applied before reloading
    to apply these
  - The cursor colour is also changed after loading as it's set to a horrible
    red by default

#+begin_src emacs-lisp
  (use-package base16-theme
    :disabled
    :init
    ;; (load-theme 'base16-solarized-dark t)
    :config
    (setq base16-solarized-dark-colors
          (plist-put base16-solarized-dark-colors ':base09 "#586e75"))
    ;; (load-theme 'base16-solarized-dark t)
    (set-cursor-color (plist-get base16-solarized-dark-colors ':base02))
    (face-spec-set 'font-lock-variable-name-face
                   `((t :foreground ,(plist-get base16-solarized-dark-colors ':base06)))
                   'face-override-spec))
#+end_src

** Solarized theme

Setup the standard =solarized-themes= with required customisation's as below.

#+begin_src emacs-lisp
(use-package solarized-theme
  :ensure solarized-theme
  :defer t
  :init
  ;; (load-theme 'solarized-gruvbox-dark t)
  (defun aqua/solarized-theme-hook ()
    (set-face-attribute 'font-lock-constant-face nil :weight 'normal)
    (set-face-attribute 'font-lock-function-name-face nil :weight 'bold))
  (aqua/add-theme-hook 'solarized-dark  #'aqua/solarized-theme-hook)
  (aqua/add-theme-hook 'solarized-light #'aqua/solarized-theme-hook)
  :config
  (setq solarized-use-variable-pitch nil        ;; Don't change font for some headings and titles
        solarized-distinct-fringe-background t  ;; make fringe stand out from background
        solarized-use-less-bold t               ;; Use less bolding
        solarized-use-more-italic t             ;; Use more italics
        solarized-distinct-doc-face t           ;; standout distinctly for docs
        solarized-high-contrast-mode-line t     ;; make the modeline high contrast
        solarized-emphasize-indicators nil      ;; less colors for indicators git:gutter, flycheck etc
        ;; Avoid all font-size changes
        solarized-height-minus-1 1.0
        solarized-height-plus-1 1.0
        solarized-height-plus-2 1.0
        solarized-height-plus-3 1.0
        solarized-height-plus-4 1.0))
#+end_src

** Doom themes

Download =doom= color themes from it's git repository.

#+begin_src emacs-lisp
(use-package doom-themes
  :quelpa (:fetcher github :repo "https://github.com/doomemacs/themes")
  :ensure t
  :commands
    doom-themes-visual-bell-config
    doom-themes-org-config
    doom-themes-neotree-config
    doom-themes-treemacs-config
  :config
  ;; global settings (defaults)
  (setq doom-themes-enable-bold t               ; if nil, bold is universally disabled
	      doom-themes-enable-italic t             ; if nil, italics is universally disabled
        doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fortification.
  (doom-themes-org-config)
  (doom-themes-neotree-config)
  :custom-face
  (font-lock-doc-face ((t (:foreground ,(doom-color 'base4) :slant italic)))))
#+end_src

** Additional themes

Additional themes, all installed but loaded in a deferred way. We can select
and enable whichever we want as per our choice.

*** Monokai Alt theme
#+begin_src emacs-lisp :lexical no
;; monokai alt theme
(use-package monokai-alt-theme
  :ensure t
  :defer t)
#+end_src

*** Gruvbox light and dark Theme
#+begin_src emacs-lisp :lexical no
;; Gruvbox theme
(use-package gruvbox-theme
  :ensure t
  :defer t)
#+end_src

*** Darkokai dark theme
#+begin_src emacs-lisp :lexical no
;; darkokai dark theme
(use-package darkokai-theme
  :ensure t
  :defer t)
#+end_src

*** Darktooth theme
#+begin_src emacs-lisp :lexical no
;; darktooth dark theme
(use-package darktooth-theme
  :ensure t
  :defer t)
#+end_src

*** Github theme
#+begin_src emacs-lisp :lexical no
;; github flavour theme
(use-package github-theme
  :ensure t
  :defer t)
#+end_src

*** Kaolin themes
#+begin_src emacs-lisp :lexical no
;; set of themes by kaolin
(use-package kaolin-themes
  :ensure t
  :defer t)
#+end_src

*** Dracula theme
#+begin_src emacs-lisp :lexical no
;; Dark theme from Dracula
(use-package dracula-theme
  :ensure t
  :defer t)
#+end_src

*** Tomorrow themes by Sanityinc
#+begin_src emacs-lisp :lexical no
;; Sanityinc Tomorrow themes set
(use-package color-theme-sanityinc-tomorrow
  :ensure t
  :defer t
  :init
  (load-theme 'sanityinc-tomorrow-day 'no-confirm 'no-enable)
  (load-theme 'sanityinc-tomorrow-night 'no-confirm 'no-enable)
  (load-theme 'sanityinc-tomorrow-bright 'no-confirm 'no-enable)
  (load-theme 'sanityinc-tomorrow-eighties 'no-confirm 'no-enable))
#+end_src

*** Atom One Dark theme
#+begin_src emacs-lisp :lexical no
;; Atom one dark theme
(use-package atom-one-dark-theme
  :ensure t
  :defer t)
#+end_src

*** Material theme
#+begin_src emacs-lisp
;; Material theme
(use-package material-theme
  :ensure t
  :defer t)
#+end_src

*** Majapahit Dark and Light themes
#+begin_src emacs-lisp
;; majapahit theme
(use-package majapahit-themes
  :ensure t
  :defer t)
#+end_src

*** Poet theme for writers
#+begin_src emacs-lisp
;; https://explog.in/notes/poet.html
(use-package poet-theme
  :ensure t
  :defer t
  :config
  (set-face-attribute 'default nil :family "Fira Mono for Powerline Regular" :height 130)
  (set-face-attribute 'fixed-pitch nil :family "Fira Mono for Powerline Regular")
  (set-face-attribute 'variable-pitch nil :family "Baskerville Regular"))
#+end_src

*** Leuven Dark and Light theme
#+begin_src emacs-lisp
;; Leuven Dark and Light themes
(use-package leuven-theme
  :ensure t
  :defer t
  :config
  (setq leuven-scale-org-agenda-structure nil
        leuven-scale-volatile-highlight nil
        ;; Fontify the whole line for headings (with a background color).
        org-fontify-whole-heading-line t)
  :custom
  (org-block-begin-line
   ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
  (org-block-background
   ((t (:background "#FFFFEA"))))
  (org-block-end-line
   ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
  (defface org-block-begin-line
    '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
    "Face used for the line delimiting the begin of source blocks.")

  (defface org-block-background
    '((t (:background "#FFFFEA")))
    "Face used for the source block background.")

  (defface org-block-end-line
    '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
    "Face used for the line delimiting the end of source blocks."))
#+end_src

*** Spacemancs Dark and Light themes
#+begin_src emacs-lisp
;; Dark and Light themes by Spacemacs
(use-package spacemacs-common
  :defer t
  :ensure spacemacs-theme)
#+end_src


*** Nano theme
#+begin_src emacs-lisp
;; A light weight Nano theme
(use-package nano-theme
  :ensure nil
  :defer t
  :quelpa (nano-theme
           :fetcher github
           :repo "rougier/nano-theme")
  :config
  (setq nano-font-family-proportional nil
        nano-font-size 14
        nano-font-family-monospaced "Roboto Mono"))
#+end_src

*** Flacui theme
#+begin_src emacs-lisp
;; Flacui light theme
(use-package flucui-theme
  :ensure nil
  :defer t
  :quelpa
  (flacui-theme :repo "MetroWind/flucui-theme" :fetcher github))
#+end_src

*** AYU Dark and Light Themes
#+begin_src emacs-lisp
;; set of light and dark themes by AYU
(use-package ayu-theme
  :ensure nil
  :defer t
  :quelpa
  (ayu-theme :repo "vutran1710/Ayu-Theme-Emacs" :fetcher github))
#+end_src

*** Modus Light and Dark Themes
#+begin_src emacs-lisp
;; Modus Light and Dark themes
(use-package modus-themes
  :quelpa
  (modus-themes :fetcher github :repo "protesilaos/modus-themes")

  :init
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-completions '((matches . (extrabold intense background))
                                   (selection . (semibold accented intense))
                                   (popup . (accented)))
        modus-themes-diffs 'desaturated
        modus-themes-headings '((1 . (1.2))
                                (2 . (rainbow 1.1))
                                (3 . (1))
                                (t . (monochrome)))
        modus-themes-hl-line '(intense)
        modus-themes-links '(nil)
        modus-themes-mixed-fonts t
        modus-themes-mode-line '(moody borderless)
        modus-themes-tabs-accented t
        modus-themes-prompts '(background)
        modus-themes-region '(accented bg-only)
        modus-themes-syntax '(yellow-comments)
        modus-themes-tabs-accented nil
        modus-themes-org-blocks 'gray-background)

  (setq modus-themes-org-agenda
        '((header-date . (grayscale workaholic bold-today))
          (header-block . (1.5 semibold))
          (scheduled . uniform)
          (event . (italic))
          (habit . traffic-light)))

  :custom
  (modus-themes-to-toggle
   '(modus-operandi-tinted modus-vivendi-tinted)))

;; :config
;; (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
;; (load-theme 'modus-operandi t)
#+end_src

*** Humanoid theme for Emacs
#+begin_src emacs-lisp
;; Humanoid-themes for Emacs
;; https://github.com/humanoid-colors/emacs-humanoid-themes
(use-package humanoid-themes
  :defer t)
#+end_src

*** Tangonov Dark and Light theme
#+begin_src emacs-lisp
;; Tangonov - A pleasant dark theme with bright, easy to read pastels
(use-package tangonov-theme
  :quelpa
  (tangonov-theme :fetcher git :url "https://git.sr.ht/~trevdev/tangonov-theme"))
#+end_src

*** Catppuccin Soothing theme
#+begin_src emacs-lisp
;; Soothing pastel theme for Emacs
(use-package catppuccin-theme
  :quelpa
  (catppuccin-theme :fetcher github :repo "catppuccin/emacs")
  :config
  ;; or 'latte, 'macchiato, or 'mocha
  ;; (setq catppuccin-flavor 'frappe)
  ;; (catppuccin-reload)
  )
#+end_src

*** Shanty Emacs Theme
The shanty emacs theme is meant for us, you and me - the workers - who may not
get dirty hands very often but love to code and tinker while looking at a screen
full of pleasant colours.
#+begin_src emacs-lisp :lexical no
;; shanty themes
(use-package shanty-themes
  :quelpa
  (shanty-themes :fetcher github :repo "qhga/shanty-themes"))
#+end_src

* Set a colour theme

Now set the required theme for Emacs using the custom function defined.

#+begin_src emacs-lisp
;; (aqua/toggle-theme 'doom-oceanic-next)
;; (load-theme 'doom-oksolar-light t)
(load-theme 'ayu-light t)
#+end_src

* Switch themes using Hydra

A hydra defined for switching the colour themes between some known themes.

#+begin_src emacs-lisp :lexical no
;; Hydra menu to open common files
(defhydra hydra-switch-theme (:color pink :hint nil :foreign-keys warn :exit t)
  "
====================== Switch Color Theme ========================

^Doom One^         ^Doom Material^         ^Doom Solarized^
------------------------------------------------------------------
_o_:Doom One       _m_:Doom Material       _s_:Doom Solarized
_O_:Doom One Dark  _M_:Doom Material Dark  _S_:Doom Solarized Dark

^Leuven^           ^Majapahit^             ^Other^
------------------------------------------------------------------
_l_:Leuven         _j_: Majapahit Light    _h_:Doom Hope
_L_:Leuven Dark    _J_: Majapahit Dark     _v_:Doom Vibrant
"
  ("o" (load-theme 'doom-one-light t))
  ("O" (load-theme 'doom-one t))
  ("h" (load-theme 'doom-old-hope t))
  ("v" (load-theme 'doom-vibrant t))
  ("m" (load-theme 'doom-material t))
  ("M" (load-theme 'doom-material t))
  ("s" (load-theme 'doom-solarized-light t))
  ("S" (load-theme 'doom-solarized-dark t))
  ("l" (load-theme 'leuven t))
  ("L" (load-theme 'leuven-dark t))
  ("j" (load-theme 'majapahit-light t))
  ("J" (load-theme 'majapahit-dark t))
  ("q" nil "Quit Menu" :color blue))

(global-set-key (kbd "C-c c t") 'hydra-switch-theme/body)
#+end_src

* Custom Utilities
In this section, certain customisation's as well as configuration related to
certain custom tools and utilities will be included.

** List of available themes
List all the colour themes available under =Emacs= using the below command.

#+begin_src emacs-lisp :eval no
;; list all available themes
(mapcar 'symbol-name (custom-available-themes))
#+end_src

** Switch colour themes from Emacs
Allow for switching the colour themes directly from ~Emacs~ by clicking on the name.

#+begin_src elisp :results output raw :eval never
;; switching color themes
(setq available-themes (mapcar 'symbol-name (custom-available-themes)))

(dolist (theme available-themes)
  (progn
    (princ (format "- [[elisp:(switch-to-theme '%s)][Switch %s]]\n" theme theme))))

(defun switch-to-theme (theme)
  (interactive)
  (dolist (theme custom-enabled-themes) (disable-theme theme))
  (load-theme theme))
#+end_src

#+RESULTS:
- [[elisp:(switch-to-theme 'atom-one-dark)][Switch atom-one-dark]]
- [[elisp:(switch-to-theme 'ayu-dark)][Switch ayu-dark]]
- [[elisp:(switch-to-theme 'ayu-grey)][Switch ayu-grey]]
- [[elisp:(switch-to-theme 'ayu-light)][Switch ayu-light]]
- [[elisp:(switch-to-theme 'ayu)][Switch ayu]]
- [[elisp:(switch-to-theme 'sanityinc-tomorrow-blue)][Switch sanityinc-tomorrow-blue]]
- [[elisp:(switch-to-theme 'sanityinc-tomorrow-bright)][Switch sanityinc-tomorrow-bright]]
- [[elisp:(switch-to-theme 'sanityinc-tomorrow-day)][Switch sanityinc-tomorrow-day]]
- [[elisp:(switch-to-theme 'sanityinc-tomorrow-eighties)][Switch sanityinc-tomorrow-eighties]]
- [[elisp:(switch-to-theme 'sanityinc-tomorrow-night)][Switch sanityinc-tomorrow-night]]
- [[elisp:(switch-to-theme 'darkokai)][Switch darkokai]]
- [[elisp:(switch-to-theme 'darktooth-dark)][Switch darktooth-dark]]
- [[elisp:(switch-to-theme 'darktooth-darker)][Switch darktooth-darker]]
- [[elisp:(switch-to-theme 'darktooth)][Switch darktooth]]
- [[elisp:(switch-to-theme 'doom-1337)][Switch doom-1337]]
- [[elisp:(switch-to-theme 'doom-Iosvkem)][Switch doom-Iosvkem]]
- [[elisp:(switch-to-theme 'doom-acario-dark)][Switch doom-acario-dark]]
- [[elisp:(switch-to-theme 'doom-acario-light)][Switch doom-acario-light]]
- [[elisp:(switch-to-theme 'doom-ayu-dark)][Switch doom-ayu-dark]]
- [[elisp:(switch-to-theme 'doom-ayu-light)][Switch doom-ayu-light]]
- [[elisp:(switch-to-theme 'doom-ayu-mirage)][Switch doom-ayu-mirage]]
- [[elisp:(switch-to-theme 'doom-badger)][Switch doom-badger]]
- [[elisp:(switch-to-theme 'doom-challenger-deep)][Switch doom-challenger-deep]]
- [[elisp:(switch-to-theme 'doom-city-lights)][Switch doom-city-lights]]
- [[elisp:(switch-to-theme 'doom-dark+)][Switch doom-dark+]]
- [[elisp:(switch-to-theme 'doom-dracula)][Switch doom-dracula]]
- [[elisp:(switch-to-theme 'doom-earl-grey)][Switch doom-earl-grey]]
- [[elisp:(switch-to-theme 'doom-ephemeral)][Switch doom-ephemeral]]
- [[elisp:(switch-to-theme 'doom-fairy-floss)][Switch doom-fairy-floss]]
- [[elisp:(switch-to-theme 'doom-feather-dark)][Switch doom-feather-dark]]
- [[elisp:(switch-to-theme 'doom-feather-light)][Switch doom-feather-light]]
- [[elisp:(switch-to-theme 'doom-flatwhite)][Switch doom-flatwhite]]
- [[elisp:(switch-to-theme 'doom-gruvbox-light)][Switch doom-gruvbox-light]]
- [[elisp:(switch-to-theme 'doom-gruvbox)][Switch doom-gruvbox]]
- [[elisp:(switch-to-theme 'doom-henna)][Switch doom-henna]]
- [[elisp:(switch-to-theme 'doom-homage-black)][Switch doom-homage-black]]
- [[elisp:(switch-to-theme 'doom-homage-white)][Switch doom-homage-white]]
- [[elisp:(switch-to-theme 'doom-horizon)][Switch doom-horizon]]
- [[elisp:(switch-to-theme 'doom-ir-black)][Switch doom-ir-black]]
- [[elisp:(switch-to-theme 'doom-lantern)][Switch doom-lantern]]
- [[elisp:(switch-to-theme 'doom-laserwave)][Switch doom-laserwave]]
- [[elisp:(switch-to-theme 'doom-manegarm)][Switch doom-manegarm]]
- [[elisp:(switch-to-theme 'doom-material-dark)][Switch doom-material-dark]]
- [[elisp:(switch-to-theme 'doom-material)][Switch doom-material]]
- [[elisp:(switch-to-theme 'doom-meltbus)][Switch doom-meltbus]]
- [[elisp:(switch-to-theme 'doom-miramare)][Switch doom-miramare]]
- [[elisp:(switch-to-theme 'doom-molokai)][Switch doom-molokai]]
- [[elisp:(switch-to-theme 'doom-monokai-classic)][Switch doom-monokai-classic]]
- [[elisp:(switch-to-theme 'doom-monokai-machine)][Switch doom-monokai-machine]]
- [[elisp:(switch-to-theme 'doom-monokai-octagon)][Switch doom-monokai-octagon]]
- [[elisp:(switch-to-theme 'doom-monokai-pro)][Switch doom-monokai-pro]]
- [[elisp:(switch-to-theme 'doom-monokai-ristretto)][Switch doom-monokai-ristretto]]
- [[elisp:(switch-to-theme 'doom-monokai-spectrum)][Switch doom-monokai-spectrum]]
- [[elisp:(switch-to-theme 'doom-moonlight)][Switch doom-moonlight]]
- [[elisp:(switch-to-theme 'doom-nord-aurora)][Switch doom-nord-aurora]]
- [[elisp:(switch-to-theme 'doom-nord-light)][Switch doom-nord-light]]
- [[elisp:(switch-to-theme 'doom-nord)][Switch doom-nord]]
- [[elisp:(switch-to-theme 'doom-nova)][Switch doom-nova]]
- [[elisp:(switch-to-theme 'doom-oceanic-next)][Switch doom-oceanic-next]]
- [[elisp:(switch-to-theme 'doom-old-hope)][Switch doom-old-hope]]
- [[elisp:(switch-to-theme 'doom-one-light)][Switch doom-one-light]]
- [[elisp:(switch-to-theme 'doom-one)][Switch doom-one]]
- [[elisp:(switch-to-theme 'doom-opera-light)][Switch doom-opera-light]]
- [[elisp:(switch-to-theme 'doom-opera)][Switch doom-opera]]
- [[elisp:(switch-to-theme 'doom-outrun-electric)][Switch doom-outrun-electric]]
- [[elisp:(switch-to-theme 'doom-palenight)][Switch doom-palenight]]
- [[elisp:(switch-to-theme 'doom-peacock)][Switch doom-peacock]]
- [[elisp:(switch-to-theme 'doom-pine)][Switch doom-pine]]
- [[elisp:(switch-to-theme 'doom-plain-dark)][Switch doom-plain-dark]]
- [[elisp:(switch-to-theme 'doom-plain)][Switch doom-plain]]
- [[elisp:(switch-to-theme 'doom-rouge)][Switch doom-rouge]]
- [[elisp:(switch-to-theme 'doom-shades-of-purple)][Switch doom-shades-of-purple]]
- [[elisp:(switch-to-theme 'doom-snazzy)][Switch doom-snazzy]]
- [[elisp:(switch-to-theme 'doom-solarized-dark-high-contrast)][Switch doom-solarized-dark-high-contrast]]
- [[elisp:(switch-to-theme 'doom-solarized-dark)][Switch doom-solarized-dark]]
- [[elisp:(switch-to-theme 'doom-solarized-light)][Switch doom-solarized-light]]
- [[elisp:(switch-to-theme 'doom-sourcerer)][Switch doom-sourcerer]]
- [[elisp:(switch-to-theme 'doom-spacegrey)][Switch doom-spacegrey]]
- [[elisp:(switch-to-theme 'doom-tokyo-night)][Switch doom-tokyo-night]]
- [[elisp:(switch-to-theme 'doom-tomorrow-day)][Switch doom-tomorrow-day]]
- [[elisp:(switch-to-theme 'doom-tomorrow-night)][Switch doom-tomorrow-night]]
- [[elisp:(switch-to-theme 'doom-vibrant)][Switch doom-vibrant]]
- [[elisp:(switch-to-theme 'doom-wilmersdorf)][Switch doom-wilmersdorf]]
- [[elisp:(switch-to-theme 'doom-xcode)][Switch doom-xcode]]
- [[elisp:(switch-to-theme 'doom-zenburn)][Switch doom-zenburn]]
- [[elisp:(switch-to-theme 'dracula)][Switch dracula]]
- [[elisp:(switch-to-theme 'flucui-dark)][Switch flucui-dark]]
- [[elisp:(switch-to-theme 'flucui-light)][Switch flucui-light]]
- [[elisp:(switch-to-theme 'github)][Switch github]]
- [[elisp:(switch-to-theme 'gruvbox-dark-hard)][Switch gruvbox-dark-hard]]
- [[elisp:(switch-to-theme 'gruvbox-dark-medium)][Switch gruvbox-dark-medium]]
- [[elisp:(switch-to-theme 'gruvbox-dark-soft)][Switch gruvbox-dark-soft]]
- [[elisp:(switch-to-theme 'gruvbox-light-hard)][Switch gruvbox-light-hard]]
- [[elisp:(switch-to-theme 'gruvbox-light-medium)][Switch gruvbox-light-medium]]
- [[elisp:(switch-to-theme 'gruvbox-light-soft)][Switch gruvbox-light-soft]]
- [[elisp:(switch-to-theme 'gruvbox)][Switch gruvbox]]
- [[elisp:(switch-to-theme 'kaolin-aurora)][Switch kaolin-aurora]]
- [[elisp:(switch-to-theme 'kaolin-blossom)][Switch kaolin-blossom]]
- [[elisp:(switch-to-theme 'kaolin-breeze)][Switch kaolin-breeze]]
- [[elisp:(switch-to-theme 'kaolin-bubblegum)][Switch kaolin-bubblegum]]
- [[elisp:(switch-to-theme 'kaolin-dark)][Switch kaolin-dark]]
- [[elisp:(switch-to-theme 'kaolin-eclipse)][Switch kaolin-eclipse]]
- [[elisp:(switch-to-theme 'kaolin-galaxy)][Switch kaolin-galaxy]]
- [[elisp:(switch-to-theme 'kaolin-light)][Switch kaolin-light]]
- [[elisp:(switch-to-theme 'kaolin-mono-dark)][Switch kaolin-mono-dark]]
- [[elisp:(switch-to-theme 'kaolin-mono-light)][Switch kaolin-mono-light]]
- [[elisp:(switch-to-theme 'kaolin-ocean)][Switch kaolin-ocean]]
- [[elisp:(switch-to-theme 'kaolin-shiva)][Switch kaolin-shiva]]
- [[elisp:(switch-to-theme 'kaolin-temple)][Switch kaolin-temple]]
- [[elisp:(switch-to-theme 'kaolin-valley-dark)][Switch kaolin-valley-dark]]
- [[elisp:(switch-to-theme 'kaolin-valley-light)][Switch kaolin-valley-light]]
- [[elisp:(switch-to-theme 'leuven-dark)][Switch leuven-dark]]
- [[elisp:(switch-to-theme 'leuven)][Switch leuven]]
- [[elisp:(switch-to-theme 'majapahit-dark)][Switch majapahit-dark]]
- [[elisp:(switch-to-theme 'majapahit-light)][Switch majapahit-light]]
- [[elisp:(switch-to-theme 'majapahit)][Switch majapahit]]
- [[elisp:(switch-to-theme 'material-light)][Switch material-light]]
- [[elisp:(switch-to-theme 'material)][Switch material]]
- [[elisp:(switch-to-theme 'modus-operandi-deuteranopia)][Switch modus-operandi-deuteranopia]]
- [[elisp:(switch-to-theme 'modus-operandi)][Switch modus-operandi]]
- [[elisp:(switch-to-theme 'modus-operandi-tinted)][Switch modus-operandi-tinted]]
- [[elisp:(switch-to-theme 'modus-vivendi-deuteranopia)][Switch modus-vivendi-deuteranopia]]
- [[elisp:(switch-to-theme 'modus-vivendi)][Switch modus-vivendi]]
- [[elisp:(switch-to-theme 'modus-vivendi-tinted)][Switch modus-vivendi-tinted]]
- [[elisp:(switch-to-theme 'monokai-alt)][Switch monokai-alt]]
- [[elisp:(switch-to-theme 'nano-dark)][Switch nano-dark]]
- [[elisp:(switch-to-theme 'nano-light)][Switch nano-light]]
- [[elisp:(switch-to-theme 'nano)][Switch nano]]
- [[elisp:(switch-to-theme 'poet-dark-monochrome)][Switch poet-dark-monochrome]]
- [[elisp:(switch-to-theme 'poet-dark)][Switch poet-dark]]
- [[elisp:(switch-to-theme 'poet-monochrome)][Switch poet-monochrome]]
- [[elisp:(switch-to-theme 'poet)][Switch poet]]
- [[elisp:(switch-to-theme 'solarized-dark-high-contrast)][Switch solarized-dark-high-contrast]]
- [[elisp:(switch-to-theme 'solarized-dark)][Switch solarized-dark]]
- [[elisp:(switch-to-theme 'solarized-gruvbox-dark)][Switch solarized-gruvbox-dark]]
- [[elisp:(switch-to-theme 'solarized-gruvbox-light)][Switch solarized-gruvbox-light]]
- [[elisp:(switch-to-theme 'solarized-light-high-contrast)][Switch solarized-light-high-contrast]]
- [[elisp:(switch-to-theme 'solarized-light)][Switch solarized-light]]
- [[elisp:(switch-to-theme 'solarized-selenized-black)][Switch solarized-selenized-black]]
- [[elisp:(switch-to-theme 'solarized-selenized-dark)][Switch solarized-selenized-dark]]
- [[elisp:(switch-to-theme 'solarized-selenized-light)][Switch solarized-selenized-light]]
- [[elisp:(switch-to-theme 'solarized-selenized-white)][Switch solarized-selenized-white]]
- [[elisp:(switch-to-theme 'solarized)][Switch solarized]]
- [[elisp:(switch-to-theme 'solarized-wombat-dark)][Switch solarized-wombat-dark]]
- [[elisp:(switch-to-theme 'solarized-zenburn)][Switch solarized-zenburn]]
- [[elisp:(switch-to-theme 'spacemacs-dark)][Switch spacemacs-dark]]
- [[elisp:(switch-to-theme 'spacemacs-light)][Switch spacemacs-light]]
- [[elisp:(switch-to-theme 'spacemacs)][Switch spacemacs]]
- [[elisp:(switch-to-theme 'adwaita)][Switch adwaita]]
- [[elisp:(switch-to-theme 'deeper-blue)][Switch deeper-blue]]
- [[elisp:(switch-to-theme 'dichromacy)][Switch dichromacy]]
- [[elisp:(switch-to-theme 'light-blue)][Switch light-blue]]
- [[elisp:(switch-to-theme 'manoj-dark)][Switch manoj-dark]]
- [[elisp:(switch-to-theme 'misterioso)][Switch misterioso]]
- [[elisp:(switch-to-theme 'tango-dark)][Switch tango-dark]]
- [[elisp:(switch-to-theme 'tango)][Switch tango]]
- [[elisp:(switch-to-theme 'tsdh-dark)][Switch tsdh-dark]]
- [[elisp:(switch-to-theme 'tsdh-light)][Switch tsdh-light]]
- [[elisp:(switch-to-theme 'wheatgrass)][Switch wheatgrass]]
- [[elisp:(switch-to-theme 'whiteboard)][Switch whiteboard]]
- [[elisp:(switch-to-theme 'wombat)][Switch wombat]]


* Profiling

** Final report
#+begin_src emacs-lisp
(aqua/report-time "color-themes")
#+end_src
