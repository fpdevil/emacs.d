

#+begin_src emacs-lisp :exports none
  ;;;-*- lexical-binding:t ; -*-
  ;;; package --- eglot lsp client configuration
  ;;;
  ;;; Commentary
  ;;; DO NOT EDIT THIS FILE DIRECTLY
  ;;; This is a file generated from a literate programing source file
  ;;; ORG mode configuration
  ;;; Filename           : eglot-config.el
  ;;; Description        : EGLOT is a client for Language Server Protocol servers
  ;;; Date               :
  ;;; Last Modified Date :
  ;;
  ;;
  ;;; Code:
  ;;;
#+end_src

#+STARTUP: indent

* EGLOT Emacs Polyglot Integration                                      :TOC:
- [[#eglot-configuration][Eglot configuration]]
  - [[#protocol-extensions-for-eglot-eglot-x][Protocol extensions for Eglot: eglot-x]]
  - [[#yasnippet-suggestions-for-eglot][YASnippet suggestions for eglot]]
- [[#boost-eglot-using-lsp-booster][Boost eglot using lsp-booster]]
- [[#language-support][Language support]]
  - [[#golang][golang]]
- [[#consult-integration][Consult Integration]]
- [[#flycheck-integration][FlyCheck integration]]

* Eglot configuration
~eglot~ is a client for Language Server Protocol servers.
Eglot is now in Emacs's core! Upcoming Emacs 29 will have M-x eglot built-in.

#+begin_src emacs-lisp :lexical no
;; eglot lsp client
;; Adds LSP support. Note that you must have the respective LSP
;; server installed on your machine to use it with Eglot. e.g.
;; rust-analyzer to use Eglot with `rust-mode'.
(use-package eglot
  :ensure t
  :preface
  ;; Collects and displays all available documentation immediately, even if
  ;; multiple sources provide it. It concatenates the results.
  (defun mp-eglot-eldoc ()
    (setq eldoc-documentation-strategy
          'eldoc-documentation-compose-eagerly))

  ;; add the modes for which eglot needs to be enabled
  :hook ((js-mode
          web-mode
          css-mode
          c-mode
          c++-mode
          go-mode
          lsp-mode
          latex-mode
          LaTeX-mode
          python-mode
          rust-mode) . eglot-ensure)
  ((eglot-managed-mode . mp-eglot-eldoc))

  :init
  ;; A setting of nil or 0 means Eglot will not block the UI at all, allowing
  ;; Emacs to remain fully responsive, although LSP features will only become
  ;; available once the connection is established in the background.
  (setq eglot-sync-connect             0
        eglot-connect-timeout          10
        eglot-events-buffer-size       0        ; No event buffers, disable providers cause
                                                ; a lot of hover traffic.
        eglot-autoshutdown             t        ; shutdown unused servers after killing last managed buffer
        eglot-extend-to-xref           t        ; activate Eglot in cross-referenced non-project files
        eglot-send-changes-idle-time   0.5
        ;; NOTE We disable eglot-auto-display-help-buffer because :select t in
        ;;      its popup rule causes eglot to steal focus too often.
        eglot-auto-display-help-buffer nil)

  ;; Show all of the available eldoc information when we want it. This way Flymake errors
  ;; don't just get clobbered by docstrings.
  ;; (add-hook 'eglot-managed-mode-hook
  ;;           (lambda ()
  ;;             "Make sure Eldoc will show us all of the feedback at point."
  ;;             (setq-local eldoc-documentation-strategy
  ;;                         #'eldoc-documentation-compose)))

  :config (progn
            ;; set max bytes to read from subprocess in a single chunk
            (setq read-process-output-max (* 1024 1024))

            ;; Disable flymake in eglot buffers
            (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))

            ;; to eliminate laggy typing by removing the debug logging
            (fset #'jsonrpc--log-event #'ignore)

            ;; eglot lsp server registrations
            ;; Additional LSP servers may be configured by modifying `eglot-server-programs'
            ;; For C/C++
            (add-to-list 'eglot-server-programs
                         '((c++-mode c-mode) "clangd"
                           "-j=3"
                           "--enable-config"
                           "--background-index"
                           "--clang-tidy"
                           "--completion-style=detailed"))

            ;; For Python
            (add-to-list 'eglot-server-programs
                         `(python-mode
                           . ,(eglot-alternatives '(("pyright-langserver" "--stdio")
                                                    ("jedi-language-server")
                                                    ("pylsp")))))

            ;; (setq eglot-workspace-configuration
            ;;       '((:pylsp . (:configurationSources
            ;;                    ["flake8"]
            ;;                    :plugins (
            ;;                              :pycodestyle (:enabled :json-false)
            ;;                              :black       (:enabled nil :line_length 88 :cache_config t)
            ;;                              :mccabe      (:enabled nil)
            ;;                              :flake8      (:enabled t :json-false)
            ;;                              :pydocstyle  (:enabled t :convention "numpy")
            ;;                              :yapf        (:enabled :json-false)
            ;;                              :autopep8    (:enabled :json-false))))))

            ;; For JavaScript and TypeScript...
            (add-to-list 'eglot-server-programs
                         '(web-mode . ("typescript-language-server" "--stdio")))

            ;; For Rust
            (add-to-list 'eglot-server-programs
                         `(rust-mode . ("rust-analyzer" :initializationOptions
                                        ( :procMacro (:enable t)
                                          :cargo ( :buildScripts (:enable t)
                                                   :features "all")))))

            ;; For CSS lsp support
            ;; TailwindCSS LSP: npm install -g @tailwindcss/language-server
            ;; (add-to-list 'eglot-server-programs
            ;;              '(js-mode "tailwindcss-language-server" "--stdio"))

            ;; For LaTeX editing
            (add-to-list 'eglot-server-programs '(LaTeX-mode . ("digestif")))

            ;; CSS LSP: npm i -g vscode-langservers-extracted
            ;; https://github.com/hrsh7th/vscode-langservers-extracted
            (add-to-list 'eglot-server-programs
                         '(css-mode . ("vscode-css-language-server" "--stdio"))))
  :bind
  ;; key bindings
  (:map eglot-mode-map
        ("C-c e f" . eglot-format)
        ("C-c e r" . eglot-rename)
        ("C-c e h" . eglot-help-at-point)
        ("C-c e d" . eglot-find-declaration)
        ("C-c e i" . eglot-code-action-organize-imports)))
#+end_src

** Protocol extensions for Eglot: eglot-x

Eglot supports (a subset of) the Language Server Protocol. However, there are
useful protocol extensions that are not (yet) part of the official protocol specification. Eglot-x adds support for some of them.

#+begin_src emacs-lisp :lexical no
;; Protocol extensions for Eglot
(use-package eglot-x
  :after
  (org)
  :quelpa
  (:fetcher github :repo "https://github.com/nemethf/eglot-x"))
#+end_src


** YASnippet suggestions for eglot
For snippet completions while in the eglot mode, we can add the
=company-yasnippet= backend.
#+begin_src emacs-lisp :lexical no
;; show suggestions for YASnippets when using eglot
(with-eval-after-load "company"
  (add-hook 'eglot-managed-mode-hook
            (lambda ()
              (add-to-list 'company-backends
                           '(company-capf :with company-yasnippet)))))
#+end_src

* Boost eglot using lsp-booster
The ~emacs-lsp-booster~ project provides a rust-based wrapper program which substantially speeds up emacs' interactions with lsp servers. This small package enables eglot to use it.

#+begin_src emacs-lisp :tangle no
;; Boost eglot using lsp-booster
(use-package eglot-booster
  :quelpa
  (eglot-booster :fetcher github :repo "jdtsmith/eglot-booster")
  :after eglot
  :config (eglot-booster-mode))
#+end_src

* Language support
** golang
#+begin_src emacs-lisp :lexical no
;; using eglot lsp client for golang
;;
(add-hook 'go-mode-hook 'eglot-ensure)
(with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs '(go-mode . ("gopls"))))
#+end_src

* Consult Integration
The package =consult-eglot= enables to jump to workspace symbols with =eglot= and
=consult=. This package acts as a parallel of consult-lsp for eglot and provides
a front-end interface for the workspace/symbols LSP procedure call.

#+begin_src emacs-lisp
;; consult-eglot
(use-package consult-eglot
  :defer t
  :after (vertico)
  :quelpa (:fetcher github :repo "https://github.com/mohkale/consult-eglot"))
#+end_src

* FlyCheck integration

The module =flycheck-eglot= is a simple "glue" minor mode that allows Flycheck and
Eglot to work together. Thus, the Flycheck frontend can display the results of
syntactic checks performed by the LSP server.

#+begin_src emacs-lisp :lexical no
;;  Flycheck support for eglot
(use-package flycheck-eglot
  :quelpa ((flycheck-eglot :fetcher github :repo "flycheck/flycheck-eglot") :upgrade t)
  ;;:after (flycheck eglot)
  :config
  (setq flycheck-eglot-exclusive nil)
  (setq flycheck-eglot-enable-diagnostic-tags)
  (global-flycheck-eglot-mode 1))
#+end_src
