#+begin_src emacs-lisp :exports none
;; -*- lexical-binding: t; no-byte-compile: t; coding: utf-8 -*-
;;; package --- org mode configuration
;;;
;;; Commentary
;;; DO NOT EDIT THIS FILE DIRECTLY
;;; This is a file generated from a literate programing source file
;;; ORG mode configuration
;;; Filename   : org-config.el
;;; Description: ORG mode configuration and customization
;;               Predominantly used for pdf docs and presentations
;;; Date               :
;;; Last Modified Date :
;;
;; shell command execution example (C-c C-c) also include in export
;; #+begin_src sh :results output :exports both
;;   df -Ph
;; #+end_src
;;
;; Installation of minted.sty
;; In order to have that tex convert to pdf, you have to ensure that you have
;; minted.sty in your TEXMF folder.
;;  - To know if minted.sty in correct path do "kpsewhich minted.sty".
;;  - If it is not found, download from
;;          http://www.ctan.org/tex-archive/macros/latex/contrib/minted
;;  - Generate minted.sty by "tex minted.ins"
;;  - To know your TEXMF folder, do "kpsewhich -var-value=TEXMFHOME"
;;  - if folder is ~/texmf
;;  - Move the minted.sty to your $TEXMF/tex/latex/commonstuff folder.
;;  - Do mkdir -p ~/texmf/tex/latex/commonstuff if that folder hierarchy doesn't exist
;;  - Do "mktexlsr" to refresh the sty database
;;  - Generate pdf from the Org exported tex by "pdflatex -shell-escape FILE.tex"
;;
;;  - Help and References
;;      https://sqrtminusone.xyz/configs/emacs/#
;;      https://karthinks.com/software/latex-input-for-impatient-scholars/
;;      https://github.com/vikasrawal/orgpaper
;;      https://github.com/vikasrawal/endingmalnutrition
;;      https://nakkaya.com/2010/09/07/writing-papers-using-org-mode/
;;      https://orgmode.org/worg/org-tutorials/org-latex-export.html
;;      https://www.sharelatex.com/learn
;;      https://en.wikibooks.org/wiki/LaTeX
;;      https://github.com/dfeich/org-babel-examples
;;      https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/
;;      http://cachestocaches.com/2018/6/org-literate-programming/
;;      https://alhassy.github.io/org-special-block-extras/
;;      https://github.com/alhassy/next-700-module-systems
;;      https://necromuralist.github.io/posts/org-babel-cheat-sheet/
;;
;; elisp code for org mode configuration support and handling
;;
;;; Code:
;;;
#+end_src

#+TITLE: Org mode and LaTeX configuration with org-config.org
#+AUTHOR: Sampath Singamsetty
#+STARTUP: indent

* Org mode configuration                                                :TOC_4:
  - [[#knowledge-and-notes][Knowledge and notes]]
  - [[#native-settings-for-org-mode][Native settings for org mode]]
  - [[#enable-shift-selection-with-cua-mode][Enable shift selection with *cua-mode*]]
  - [[#orgmode-custom-settings][Orgmode custom settings]]
    - [[#prettifying-and-fortifying][Prettifying and fortifying]]
    - [[#variable-fonts][Variable fonts]]
    - [[#prettifying-the-checkboxes][Prettifying the checkboxes]]
    - [[#for-exporting-to-open-office-and-ms-word][For exporting to Open Office and MS Word]]
    - [[#for-coloured-src-code-blocks][For coloured src code blocks]]
    - [[#for-python-jupyter-error][For python jupyter error]]
  - [[#footnotes][Footnotes]]
  - [[#fontification][Fontification]]
    - [[#variable-pitch-support-for-org-mode][Variable-pitch support for org-mode]]
  - [[#org-appear-to-display-hidden-elements-with-mouse-over][Org Appear to display hidden elements with mouse over]]
  - [[#orgmode-workflow-states][Orgmode Workflow States]]
    - [[#org-tag-faces][Org TAG faces]]
  - [[#for-task-tracking][For task tracking]]
  - [[#selection-of-tags][Selection of tags]]
  - [[#further-beautification-of-org-heading-symbol][Further beautification of org heading symbol]]
  - [[#using-org-modern-for-beautification][Using org-modern for beautification]]
  - [[#using-org-bullets][Using Org bullets]]
  - [[#ascii-export-customisation-for-the-new-exporter][ASCII export customisation for the new exporter]]
  - [[#org-sticky-headers][Org sticky headers]]
  - [[#indentation][Indentation]]
  - [[#export-to-other-formats][Export to other formats]]
    - [[#exporting-to-html-format][Exporting to HTML format]]
    - [[#exporting-to-markdown-format][Exporting to Markdown format]]
  - [[#personal-journal-with-org-journal][Personal Journal with org-journal]]
  - [[#automatically-generate-table-of-contents][Automatically generate Table of Contents]]
    - [[#usage-of-toc-org][Usage of toc-org]]
  - [[#org-asynchronous-code-execution][Org asynchronous code execution]]
  - [[#org-mode-literate-programming][ORG mode Literate programming]]
    - [[#rest-client-for-org][Rest client for org]]
      - [[#company-restclient][company-restclient]]
    - [[#http-calls][HTTP calls]]
    - [[#organize-and-send-http-requests-from-emacs][Organize and send HTTP requests from Emacs]]
    - [[#markdown-for-org-mode][Markdown for org mode]]
    - [[#go-for-orgmode-babel][GO for orgmode babel]]
    - [[#rust-for-orgmode-babel][Rust for orgmode babel]]
    - [[#plantuml][PlantUML]]
    - [[#ditaa-diagrams-through-ascii-art][DITAA DIagrams Through Ascii Art]]
    - [[#dot-language][DOT language]]
    - [[#python-babel-support][Python babel support]]
    - [[#emacs-jupyter][Emacs Jupyter]]
    - [[#chatgpt-shell-support-in-babel][ChatGPT Shell support in Babel]]
  - [[#org-ai][Org AI]]
  - [[#babel-settings][BABEL settings]]
    - [[#register-languages-for-babel][Register languages for babel]]
    - [[#specify-compiler-and-header-options-for-languages-supported][Specify compiler and header options for languages supported]]
      - [[#ob-c][ob-C]]
      - [[#c-src-code-headers][C++ src code headers]]
      - [[#bash-src-code-headers][Bash src code headers]]
      - [[#using-jupyter-code-blocks][Using jupyter code blocks]]
      - [[#issue-135-for-ob-ipython][Issue 135 for ob-ipython]]
  - [[#tables-and-borders][Tables and Borders]]
    - [[#for-vertically-alignment-of-tables][For vertically alignment of tables]]
  - [[#latex-export-settings][LaTeX Export settings]]
    - [[#some-custom-settings-for-latex-export][Some custom settings for latex export]]
    - [[#smart-quotes][Smart quotes]]
    - [[#latex-options-for-default-exported-packages][LaTeX options for default exported packages]]
      - [[#a-quick-example][A quick example.]]
      - [[#enable-pdf-and-eps-images-in-org-mode][Enable pdf and eps images in org mode]]
  -  [[#this-is-a-latex-experiment][This is a latex experiment]]
  - [[#some-text-and-latex][Some text and latex]]
    - [[#latex-previewing][Latex previewing]]
      - [[#additional-options-for-latex-previewing][Additional options for latex previewing]]
    - [[#toggle-latex-preview-on-mouse-enter-with-addon-org-fragtog][Toggle latex preview on mouse enter with addon org-fragtog]]
    - [[#general-latex-completion-with-cdlatex-and-company-math][General LaTeX completion with cdlatex and company-math]]
    - [[#company-math-symbol-handling][Company math symbol handling]]
  - [[#xenops-latex-editing-environment-for-mathematical-documents][Xenops: LaTeX editing environment for mathematical documents]]
  - [[#pdf-export-of-org-documents][Pdf export of org documents]]
  - [[#latex-export-with-additional-classes][LaTeX export with additional classes]]
    - [[#all-custom-latex-classes][All custom latex classes]]
  - [[#latex-configurations-and-addons][Latex configurations and addons]]
    - [[#compiling][Compiling]]
    - [[#auctex][Auctex]]
      - [[#from-doom-emacs-configuration][From Doom Emacs configuration:]]
      - [[#settings-for-tex-mode][Settings for tex-mode]]
      - [[#adding-latexmk-support][Adding LatexMk support]]
      - [[#auto-completion-for-auctex][Auto completion for Auctex]]
    - [[#latex-configuration-settings][Latex configuration settings]]
    - [[#ox-latex-export-settings][ox-latex export settings]]
    - [[#latex-preview-pane][Latex Preview Pane]]
    - [[#latex-math-preview][Latex Math Preview]]
    - [[#texpdf-options-and-auto-fill-for-latex][TexPdf options and auto-fill for latex]]
    - [[#generate-tex-file-with-a-hook][Generate TeX file with a hook]]
  - [[#bibliography-and-citations][Bibliography and Citations]]
      - [[#some-terminology-for-reference][Some terminology for reference]]
    - [[#biblatex][Biblatex]]
    - [[#using-org-ref-for-bibliographies-and-citations][Using org-ref for Bibliographies and Citations]]
    - [[#using-ivy-for-org-ref][Using ivy for org-ref]]
    - [[#using-ivy-bibtex-for-managing-bibliographies][Using ivy bibtex for managing bibliographies]]
    - [[#literate--annotated-bibliography][Literate & annotated bibliography]]
      - [[#pdf-drop-mode][pdf-drop-mode]]
      - [[#org-imenu][org-imenu]]
    - [[#prettify-org-ref-citation-links][Prettify org-ref citation links]]
    - [[#org-ref-exports][org-ref exports]]
    - [[#org-glossary][org-glossary]]
  - [[#file-opening-and-associations][File opening and associations]]
  - [[#use-org-download-for-easier-image-insertion-into-the-org-notes][Use ~org-download~ for easier image insertion into the org notes.]]
- [[#lsp-integration-for-latex][LSP integration for LaTeX]]
- [[#latex-font-locking-with-engrave-faces][LaTeX font locking with Engrave Faces]]
- [[#org-mode-extras-from-org-contrib][org mode extras from org-contrib]]
  - [[#ox-extra][ox-extra]]
    - [[#annotated-bibliography-with-orgmode][Annotated bibliography with orgmode]]
- [[#org-mode-addon-org-special-block-extras][Org mode addon org-special-block-extras]]
- [[#appendix][Appendix]]
  - [[#for-handling-c-code][For handling C++ code]]
    - [[#opencv][OpenCV]]
  - [[#latex-import-sty-files][LaTeX import *.sty files]]
- [[#for-exploring-further][For exploring further]]
- [[#finally-profiling][Finally profiling]]

** Knowledge and notes
=org mode= is GNU Emacs major mode for keeping notes, authoring documents,
computational notebooks, literate programming, maintaining to-do lists,
planning projects, and more — in a fast and effective plain text system.

The platform has no limitations and can be explored without any bounds. There
are numerous blogs and sites explaining the customised plugins and features
worth exploring.

Some of the blogs which I found pretty interesting are:

| Site                     | Remarks                      |
|--------------------------+------------------------------|
| [[https://alhassy.github.io/org-special-block-extras/][org-special-block-extras]] | org mode special blocks      |
| [[http://mooz.github.io/org-js/][org-js]]                   | Render org docs online       |
| [[https://orgmode.org/worg/org-contrib/babel/languages/][babel ref]]                | org src blocks               |
| [[https://github.com/grettke/help][org help]]                 | Literate programming samples |
|                          |                              |

** Native settings for org mode
Specify any global settings like locations here.
#+begin_src emacs-lisp
  ;; set the native org directory
  (setq org-directory (expand-file-name "org" user-emacs-directory))

  ;; fetch org-plus-contrib
  ;;(use-package org
  ;;  :pin gnu
  ;;  :ensure org-plus-contrib
  ;;  :defer t)
#+end_src

** Enable shift selection with *cua-mode*
#+begin_src emacs-lisp
  ;; enable cua mode (enabled in custom-config.org)
  ;; (cua-mode 1)
  ;; enable shift selection while cua-mode is enabled
  (setq org-support-shift-select t)

  ;; evaluate only after loading the org-mode
  (eval-after-load "org"
    '(progn
       (eval-after-load "cua-base"
         '(progn
            (defadvice org-call-for-shift-select (before org-call-for-shift-select-cua activate)
              (if (and cua-mode
                       org-support-shift-select
                       (not (use-region-p)))
                  (cua-set-mark)))))))
#+end_src

** Orgmode custom settings
Here are some custom settings for org-mode which are loaded globally.

Emphasise the characters and faces to display more aesthetically pleasing text,
especially while displaying the bold, italic, underlined and strike through
text.

#+begin_src emacs-lisp :lexical no
;; beautifying the orgmode
;; default settings for org-emphasis-alist
;; (setq org-emphasis-alist
;;       '(("*" bold)
;;         ("/" italic)
;;         ("_" underline)
;;         ("=" org-verbatim verbatim)
;;         ("~" org-code verbatim)
;;         ("+" (:strike-through t))))

;; beefed up settings for emphasis
(setq org-emphasis-alist
      '(("*" aqua/org-emphasis-bold)
        ("/" aqua/org-emphasis-italic)
        ("_" aqua/org-emphasis-underline)
        ("=" org-verbatim verbatim)
        ("~" org-code verbatim)
        ("+" aqua/org-emphasis-strike-through)))

(defface aqua/org-emphasis-bold
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#a60000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#ff8059"))
  "Custom bold emphasis for Org.")

(defface aqua/org-emphasis-italic
  '((default :inherit italic)
    (((class color) (min-colors 88) (background light))
     :foreground "#005e00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#44bc44"))
  "Custom italic emphasis for Org.")

(defface aqua/org-emphasis-underline
  '((default :inherit underline)
    (((class color) (min-colors 88) (background light))
     :foreground "#813e00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#d0bc00"))
  "Custom underline emphasis for Org.")

(defface aqua/org-emphasis-strike-through
  '((((class color) (min-colors 88) (background light))
     :strike-through "#972500" :foreground "#505050")
    (((class color) (min-colors 88) (background dark))
     :strike-through "#ef8b50" :foreground "#a8a8a8"))
  "Custom strike-through emphasis for Org.")


;; hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.):
(setq org-hide-emphasis-markers t)
#+end_src

*** Prettifying and fortifying

Additional settings for aesthetics and prettifying the font as well as to
control how the headings look or rendered with the stars in the =org-mode=.

#+begin_src emacs-lisp
;; handle editing the invisible regions smartly
(setq org-catch-invisible-edits 'smart)

;; insert new headings after the current subtree
(setq org-insert-heading-respect-content t)

;; allow bullet lists with single character in them
(setq org-list-allow-alphabetical t)

;; apply the properties to sublevels as well
(setq org-use-property-inheritance t)

;; hide the first N-1 stars in a headline by setting to t
(setq org-hide-leading-stars nil)

;;^ For Improving the org mode looks
(setq org-pretty-entities      t          ; show entities as UTF8 characters.
      ;; org-use-sub-superscripts "{}"    ; interpret "_" and "^" for export
      org-image-actual-width   '(300))

;; option for org mode outline
(setq org-ellipsis "…")

;; no extra indentation in the source blocks
(setq org-src-preserve-indentation nil)

;; This is useful when setting a background color for the org-level-* faces.
(setq org-fontify-whole-heading-line t)

;; Give quote and verse blocks a nice look.
(setq org-fontify-quote-and-verse-blocks t)

;; highlight LaTeX related syntax in the buffer
(setq org-highlight-latex-and-related '(latex))

;; modifying behaviour of C-a/<home> & C-e/<end>
(setq org-special-ctrl-a/e t)

;; execute the Lisp code with links, as in “elisp:view-config-file”.
(setq org-confirm-elisp-link-function nil)

;; setup archive location in archive directory in current folder
(setq org-archive-location "archive/%s_archive::")

;; add an extra space between text and the underlined line
(setq x-underline-at-descent-line t)

;; control the alignment of org tags and also set the
;; org-tags-column value to 0
(setq org-auto-align-tags nil
      org-tags-column     0)
#+end_src

For toggling the image display option in the org-mode buffer use the key
combination ~C-c C-x C-v~. The same may also be invoked by pressing ~M-x~ and
calling the function ~org-toggle-inline-images~.

#+begin_src emacs-lisp :lexical no
;; display images inline
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
(setq org-display-inline-images t)
#+end_src

*** Variable fonts
We can configure fonts in such a way that each section can be rendered by a
different font. The below settings are experimental and may be enabled as per
the taste. But right now it is disabled.
#+begin_src emacs-lisp :lexical no
;; variable fonts
(let* ((variable-tuple
        (cond ((x-list-fonts "AppleMyungjo")    '(:font "AppleMyungjo"))
              ((x-list-fonts "Source Code Pro") '(:font "Source Code Pro"))
              ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
              ((x-list-fonts "Monaco")          '(:font "Monaco"))
              ((x-family-fonts "Microsoft Sans Serif")    '(:family "Microsoft Sans Serif"))
              (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.3))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 1.6 :underline nil))))))
#+end_src

*** Prettifying the checkboxes
The below piece of ~elisp~ code would prettify the org checkboxes.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
			               "Beautify Org Checkbox Symbol"
			               (push '("[ ]" . "☐" ) prettify-symbols-alist)
			               (push '("[X]" . "☑" ) prettify-symbols-alist)
			               (push '("[-]" . "❍" ) prettify-symbols-alist)
			               (prettify-symbols-mode)))
(defface org-checkbox-done-text
  '((t (:foreground "#71696A")))
  "Face for the text part of a checked org-mode checkbox.")
#+end_src

*** For exporting to Open Office and MS Word
The export function in Org Mode can export to the Open Office ODT format, which
is compatible with MS Word. If you have Open Office installed, you can also
create a DOC file to make it easier for MS Word users. Add this line to your
config:

#+begin_src emacs-lisp :lexical no
;; Export to MS-Word
;; Need to have LibreOffice on your computer
(setq org-odt-preferred-output-format "doc")
#+end_src

*** For coloured src code blocks

Enable the below for adding a list of faces to be used for source code blocks.

#+begin_src emacs-lisp :lexical no :tangle no
;; color src blocks
(setq  org-src-block-faces '(("emacs-lisp"     (:background "LightCyan1"    :extend t))
                             ("sh"             (:background "gray90"        :extend t))
                             ("python"         (:background "DarkSeaGreen1" :extend t))
                             ("ipython"        (:background "thistle1"      :extend t))
                             ("jupyter-python" (:background "thistle1"      :extend t))))
#+end_src

*** For python jupyter error

To disable the below warnings, we have to set ~PYDEVD_DISABLE_FILE_VALIDATION = 1~
#+begin_quote
0.01s - Debugger warning: It seems that frozen modules are being used, which may
0.00s - make the debugger miss breakpoints. Please pass -Xfrozen_modules=off
0.00s - to python to disable frozen modules.
0.00s - Note: Debugging will proceed. Set PYDEVD_DISABLE_FILE_VALIDATION=1 to disable this validation.

In .profile set export PYDEVD_DISABLE_FILE_VALIDATION=1
#+end_quote

#+begin_src emacs-lisp
(setenv "PYDEVD_DISABLE_FILE_VALIDATION" "1")
#+end_src

** Footnotes
A footnote is started by a footnote marker in square brackets in column 0, no indentation allowed.  It ends at the next footnote definition, headline, or after two consecutive empty lines. The footnote reference is simply the marker in square brackets, inside text. Markers always start with ‘fn:’. For example:

#+begin_example
The Org homepage[fn:1] now looks a lot better than it used to.
...
[fn:1] The link is: https://orgmode.org
#+end_example

+ Footnote creation is handled by the following command:
  #+begin_example
  C-c C-x f
  #+end_example

+ To reorder and renumber the footnotes after inserting a footnote in a text
  that already has some footnotes after the point where a new footnote is being
  inserted, use:
  #+begin_example
  C-u C-c C-x f S
  #+end_example

** Fontification
The following snippets  displays the contents of the  ~code~ blocks in ~org-mode~ files using  the ~major-mode~ of the code.  It also changes the behavior of *TAB*  to as if it were used  in the appropriate major mode.

#+begin_src emacs-lisp
;; use syntax highlighting in org-file code blocks
(setq org-src-fontify-natively t             ; Fontify code in code blocks
      org-src-tab-acts-natively t            ; Tab acts as in source editing
      org-edit-src-content-indentation 0)    ; No relative indentation for code blocks
#+end_src

While writing, it is common to use =+,-,*= to enumerate unordered lists especially while in org-mode wherein they denote structured text. Let's render them visually as Unicode bullets.

#+begin_src emacs-lisp :lexical no
;; pretty unordered lists
;; (x y z) ≈ (existing-item replacement-item positivity-of-preceding-spaces)
(cl-loop for (x y z) in '(("+" "◦" *)
                          ("-" "•" *)
                          ("*" "⋆" +))
         do (font-lock-add-keywords
             'org-mode
             `((,(format "^ %s\\([%s]\\) " z x)
                (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) ,y)))))))
#+end_src

A progress indicator for code blocks in org-mode courtesy of [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg01000.html][John Kitchin]]
#+begin_src emacs-lisp :lexical no
(defadvice org-babel-execute-src-block (around progress nil activate)
  ;; (set-face-attribute
  ;;  'org-block-background nil :background "LightSteelBlue")
  (message "Running your code block")
  ad-do-it
  ;; (set-face-attribute 'org-block-background nil :background "gray")
  (message "Done with code block"))
#+end_src

*** Variable-pitch support for org-mode
~org-variable-pitch~ is a minor mode that enables variable pitch mode in the
current Org-mode buffer, and sets some particular faces up so that they are
rendered in fixed-width font.  Also, indentation, list bullets and checkboxes
are displayed in monospace, in order to keep the shape of the outline.

** Org Appear to display hidden elements with mouse over
Toggle visibility of hidden Org mode element parts upon entering and leaving an
element. Org mode  provides a way to toggle visibility  of hidden elements such
as  emphasis markers,  links,  etc. by  customising  specific variables,  e.g.,
org-hide-emphasis-markers. However,  it is  currently not  possible to  do this
interactively and  on an  element-by-element basis.  This package,  inspired by
=org-fragtog=,  enables   automatic  visibility  toggling  depending   on  cursor
position. Hidden  element parts appear  when the  cursor enters an  element and
disappear when it leaves.

#+begin_src emacs-lisp :lexical no
;; Toggle visibility of hidden org mode element parts
;; upon entering and leaving an element
(use-package org-appear
  :quelpa
  (:fetcher github :repo "awth13/org-appear")
  :after (org)
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis   t
        org-appear-autolinks      t
        org-appear-autosubmarkers t))
#+end_src

** Orgmode Workflow States
The workflow state of ‘X/Y’ indicates to do action ‘X’ while entering a state
and ‘Y’ when leaving it, with ‘!’ denoting a timestamp should be generated and
‘@’ denoting a user note should be made.

#+begin_src emacs-lisp
;; @ - time stamp with note
;; ! - only time stamp
;; The @ brings up a pop-up to make a local note about why the state changed.
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s@/!)" "|" "DONE(d/!)")
        (sequence "WAITING(w@/!)" "ON_HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

;; since DONE is a terminal state, it has no exit-action.
;; explicitly indicate that the time should be noted.
(setq org-log-done 'time)
#+end_src

In particular, we transition from =TODO= to =STARTED= once 15 minutes or a
reasonable amount of work has transpired. Since all but one state are marked for
logging, we could use the ~lognotestate~ logging facility of org-mode, which
prompts for a note every time a task’s state is changed.


Entering a comment about what I’ve done, even if it’s very little, feels like
I’m getting something done. It’s an explicit marker of progress and motivates me
to want to change my task’s states more often until I see it marked ~DONE~.

Here are the way the workflow items have been coloured.

#+begin_src emacs-lisp
;; customise the keywords
(setq org-todo-keyword-faces
      '(("TODO"      :foreground "GoldenRod"    :weight bold)
        ("STARTED"   :foreground "blue"         :weight bold)
        ("DONE"      :foreground "forest green" :weight bold)
        ("WAITING"   :foreground "orange"       :weight bold)
        ("ON_HOLD"   :foreground "magenta"      :weight bold)
        ("CANCELLED" :foreground "OrangeRed"    :weight bold)))
#+end_src

Press *C-c C-t* for the letter shortcut to actually make the state of an org
heading.

#+begin_src emacs-lisp
(setq org-use-fast-todo-selection t)
#+end_src

The =states= may also be changed using _Shift-Left_, or _Shift-Right_ keys.

*** Org TAG faces

#+begin_src emacs-lisp
;; tags for the items
(setq org-tag-persistent-alist
      '((:startgroup  . nil)
        ("HOME"       . ?h)
        ("RESEARCH"   . ?r)
        ("CODE"       . ?c)
        (:endgroup    . nil)
        (:startgroup  . nil)
        ("OS"         . ?o)
        ("DEV"        . ?d)
        ("WWW"        . ?w)
        (:endgroup    . nil)
        (:startgroup  . nil)
        ("EASY"       . ?e)
        ("MEDIUM"     . ?m)
        ("HARD"       . ?a)
        (:endgroup    . nil)
        ("URGENT"     . ?u)
        ("KEY"        . ?k)
        ("REVIEW"     . ?v)
        ("noexport"   . ?x)))

;; set keyword highlighting
(setq org-tag-faces
      '(("HOME"     . (:foreground "GoldenRod"  :weight bold))
        ("RESEARCH" . (:foreground "GoldenRod"  :weight bold))
        ("CODE"     . (:foreground "GoldenRod"  :weight bold))
        ("OS"       . (:foreground "IndianRed1" :weight bold))
        ("DEV"      . (:foreground "IndianRed1" :weight bold))
        ("WWW"      . (:foreground "IndianRed1" :weight bold))
        ("URGENT"   . (:foreground "Red"        :weight bold))
        ("KEY"      . (:foreground "Red"        :weight bold))
        ("EASY"     . (:foreground "OrangeRed"  :weight bold))
        ("MEDIUM"   . (:foreground "OrangeRed"  :weight bold))
        ("HARD"     . (:foreground "OrangeRed"  :weight bold))
        ("REVIEW"   . (:foreground "GoldenRod"  :weight bold))
        ("noexport" . (:foreground "LimeGreen"  :weight bold))))
#+end_src

** For task tracking
~Org-Agenda~ is the root for all item tracking like todo, journal etc.
#+begin_src emacs-lisp
;; Org-Agenda is the umbrella for all todo, journal, calendar
;; and other views. setting up C-c a to call up agenda mode.
(use-package org-agenda
  :ensure nil
  :after (org)
  :bind
  ("C-c a" . org-agenda)
  :config
  (setq org-agenda-current-time-string "- - - NOW! - - -"
        org-agenda-files `(,org-directory "~/Documents")
        org-default-notes-file (thread-last org-directory (expand-file-name "notes.org"))
        org-agenda-span 'week
        org-agenda-confirm-kill t
        org-agenda-show-all-dates t
        org-agenda-show-outline-path nil
        org-agenda-window-setup 'current-window
        org-agenda-skip-comment-trees t
        org-agenda-sticky nil
        org-agenda-custom-commands-contexts nil
        org-agenda-menu-show-matcher t
        org-agenda-menu-two-columns nil
        org-agenda-max-entries nil
        org-agenda-max-todos nil
        org-agenda-max-tags nil
        org-agenda-max-effort nil)

  ;; Agenda items with deadline and scheduled timestamps
  (setq org-agenda-time-grid '((daily today)
			                   "----------------"
			                   (800 1000 1200 1400 1600 1800 2000)))

  ;; generic options for agenda
  (setq org-agenda-breadcrumbs-separator "->"
        org-agenda-todo-keyword-format "%-1s"
        org-agenda-fontify-priorities 'cookies
        org-agenda-category-icon-alist nil
        org-agenda-remove-times-when-in-prefix nil
        org-agenda-remove-timeranges-from-blocks nil
        org-agenda-compact-blocks nil
        org-agenda-tags-column 0
        org-agenda-block-separator ?—)

  ;; Agenda marks
  (setq org-agenda-bulk-mark-char "#"
        org-agenda-persistent-marks nil)

  ;; Agenda multi-item tasks
  (setq org-agenda-dim-blocked-tasks t
        org-agenda-todo-list-sublevels t)

  ;; Agenda filters and restricted views
  (setq org-agenda-persistent-filter nil
        org-agenda-restriction-lock-highlight-subtree t)

  :custom
  (org-agenda-include-diary t)
  (org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                              ;; Indent todo items by level to show nesting
                              (todo . " %i %-12:c%l")
                              (tags . " %i %-12:c")
                              (search . " %i %-12:c")))
  (org-agenda-sorting-strategy '(((agenda habit-down time-up priority-down category-keep)
                                  (todo priority-down category-keep)
                                  (tags priority-down category-keep)
                                  (search category-keep))))
  ;; Create reminders for tasks with a due date when this file is read.
  (run-at-time (* 60 5) nil #'org-agenda-to-appt)
  ;; start on Monday
  (org-agenda-start-on-weekday 1))
#+end_src

** Selection of tags
#+begin_src emacs-lisp
  ;; selections of tags
  (setq org-fast-tag-selection-single-key t
        org-use-fast-todo-selection t)
#+end_src

** Further beautification of org heading symbol

Using =org-superstar= for beautifying the org mode.

#+begin_src emacs-lisp
;; beautify the org mode headings with nice bullets
;; Make org-mode stars a little more super
(use-package org-superstar
  :after (org)
  :quelpa
  (org-superstar :fetcher github :repo "integral-dw/org-superstar-mode")
  :hook (org-mode . org-superstar-mode)
  :config
  ;; Make leading stars truly invisible, by rendering them as spaces!
  (setq org-superstar-leading-bullet ?\s
        org-superstar-leading-fallback ?\s
        org-hide-leading-stars nil
        org-superstar-special-todo-items t
        ;; performance issues
        inhibit-compacting-font-caches t))
#+end_src

** Using org-modern for beautification

Using the =org-modern= that implements a "modern" style for Org buffers using
font locking and text properties.

#+begin_src emacs-lisp :lexical no
;; Modernising the org mode
(use-package org-modern
  :ensure t
  :quelpa (org-modern
           :fetcher github
           :repo "minad/org-modern")
  :hook ((org-mode            . org-modern-mode)
         (org-agenda-finalize . org-modern-agenda))
  :custom (progn
            (org-modern-hide-stars nil)		; adds extra indentation
            (org-modern-table nil)
            (org-modern-list
             '((?* . "•")
               (?+ . "‣"))))
  :config (progn
            ;; add frame borders and window dividers
            (modify-all-frames-parameters
             '((right-divider-width   . 40)
               (internal-border-width . 40)))
            (dolist (face '(window-divider
                            window-divider-first-pixel
                            window-divider-last-pixel))
              (face-spec-reset-face face)
              (set-face-foreground face (face-attribute 'default :background)))
            (set-face-background 'fringe (face-attribute 'default :background))))
#+end_src

Provide modern block styling with ~org-indent~.

#+begin_src emacs-lisp :lexical no
;; Modern block styling with org-indent
(use-package org-modern-indent
  :quelpa (org-modern-indent
           :fetcher github
           :repo "jdtsmith/org-modern-indent")
  :config ; add late to hook
  (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

** Using Org bullets
For custom display of the org headings
#+begin_src emacs-lisp :tangle no
  ;; org-bullets for customized display of the headings
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** ASCII export customisation for the new exporter
#+begin_src emacs-lisp :lexical no
;; ASCII export customisation for the new exporter
;; the markers for Latin is nicer, use for UTF-8 too
;; (setcdr (assoc 'utf-8 org-ascii-bullets) '(?§ ?¶))
#+end_src

** Org sticky headers
The package allows to show off-screen Org heading at top of window and displays
in the header-line the Org heading for the node that’s at the top of the
window. This way, if the heading for the text at the top of the window is
beyond the top of the window, we don’t forget which heading the text belongs
to. The display can be customized to show just the heading, the full outline
path, or the full outline path in reverse.
#+begin_src emacs-lisp :lexical no
;; org sticky headers
(use-package org-sticky-header
  :hook (org-mode . org-sticky-header-mode)
  :config
  (setq-default
   org-sticky-header-full-path 'full
   ;; Child and parent headings are seperated by a /.
   org-sticky-header-outline-path-separator " / "))
#+end_src

** Indentation
~org-indent~ by default produces an indicator "Ind" in the modeline. The same may
be diminished to remove the modeline clutter and also the indentation may be
increased a bit to make the levels more visible.

#+begin_src emacs-lisp
;;  org-indent by default produces an indicator "Ind" in the modeline.
;;  The same may be diminished to remove the modeline clutter and also
;;  the indentation may be increased a bit to make the levels more
;;  visible
(use-package org-indent
  :ensure nil
  :diminish
  :custom
  (org-indent-indentation-per-level 4))
#+end_src

** Export to other formats
One of the biggest strengths of ~org-mode~ is the ability to export a document
into multiple different formats.

*** Exporting to HTML format
#+begin_src emacs-lisp
(use-package ox-html
  :ensure nil
  :defer 3
  :after org
  :custom
  (org-html-checkbox-type 'unicode))
#+end_src

*** Exporting to Markdown format
#+begin_src emacs-lisp
(use-package ox-md
  :ensure nil
  :defer 3
  :after org)
#+end_src

** Personal Journal with org-journal
~org-jpurnal~ is a nice utility for maintaining personal journal and it works
pretty well with ~wc-mode~ to keep a count of the number of words used in the
journal.

For encrypting the journal entries, we need to use the following mechanisms:

- org-journal-encrypt-journal
  If set to ~t~ it has the effect of transparently encrypting/decrypting the
  journal files as they are written to disk.

- org-journal-enable-encryption
  If set to ~t~ enables integration with ~org-crypt~ and hence automatically adds a
  ~:crypt:~ tag for new journal entries. This has the effect of automatically
  encrypting those entries upon save, replacing them with a blob of
  gpg-encrypted text which has to be further decrypted with ~org-decrypt-entry~
  in order to read or edit them again. This is disabled for now to make it more
  transparent to work with the journal entries while editing them.

  #+begin_src emacs-lisp
  (use-package org-journal
    :after org
    :custom
    (org-journal-dir (concat (file-name-as-directory org-directory) "journal"))
    (org-journal-file-format "%Y/%m/%Y%m%d")
    (org-journal-date-format "%A, %Y-%m-%d")
    (org-journal-encrypt-journal t)
    (org-journal-enable-encryption nil)
    (org-journal-enable-agenda-integration t)
    :bind
    ("C-c j" . org-journal-new-entry))
  #+end_src

** Automatically generate Table of Contents
The ~toc-org~ package  allows us to insert a table of contents in headings marked
with ~:TOC:~. This is useful for org files that are to be viewed directly on
~github~, which renders org files correctly, but does not generate a table of
contents at the top.

The package exists on github [[https://github.com/snosov1/toc-org][here]].

#+begin_src emacs-lisp
  (use-package toc-org
    :after (org)
    :hook
    (org-mode . toc-org-enable))
#+end_src

*** Usage of toc-org

Using the =toc-org= we can Create a top heading 'Table Of Contents'

Press =C-c C-q= and create a tag *:TOC:* and save.
The elements under *TOC* will be created automatically.

In addition to the simple *:TOC:* tag, you can also use the following tag
formats:

   * =:TOC_2=: - sets the max depth of the headlines in the table of contents to
     2 (the default).
   * =:TOC_2_gh=: - sets the max depth as in above and also uses the GitHub-style
     hrefs in the table of contents (this style is default). The other
     supported href style is ‘org’, which is the default org style.


One can also use =@= as separator, instead of =_=.

** Org asynchronous code execution
The code within the ~src~ code blocks may be executed asynchronously.
#+begin_src emacs-lisp
;; asynchronous code execution
(use-package ob-async
  :after (org)
  :config
  (add-to-list 'org-ctrl-c-ctrl-c-hook #'ob-async-org-babel-execute-src-block))
#+end_src

The org babel language =ob-python= defines its own ~:async~ keyword that can
conflict with =ob-async=.

#+begin_src emacs-lisp :lexical no
;; add ob-ipython to blacklist so that it does not conflict with async
(setq ob-async-no-async-languages-alist '("ipython" "jupyter-python"))
#+end_src

** ORG mode Literate programming
Org-mode is  a literate programming  tool which  is very practical  and useful,
easy to edit, execute and document code from within the same tool (Emacs) using
all of  its existing capabilities  (i.e. each code block  can be edited  in its
native Emacs mode, taking full advantage of indentation, completion, etc.).

To support multiple languages, we first need to load the necessary language
support. The base features and the literate programming for Emacs lisp is
built-in, but the ~ob-*~ packages all provide the ability to execute code in
different languages directly from within the org buffer over.

Some examples are available at:
#+begin_example
https://joseph8th.github.io/posts/wow-writing-literate-api-documentation-in-emacs-org-mode/
#+end_example

*** Rest client for org
This is a tool to manually explore and test HTTP REST webservices. Runs queries
from a plain-text query sheet, displays results as a pretty-printed XML, JSON
and even images.

The =restclient= is particular handy when it is combined with the Org-mode: see
use of the ob-restclient.el within the Org-mode headings.

#+begin_src emacs-lisp
;; rest client
(use-package restclient
  :ensure t
  :defer t)

;; support for org export
(use-package ob-restclient
  :defer t
  :after (org restclient))
#+end_src

**** company-restclient
This is a =company-mode= completion backend for ~restclient-mode~. It provides auto-completion for HTTP methods and headers in ~restclient-mode~. Completion source is given by emacs package ~know-your-http-well~.

#+begin_src emacs-lisp
;; company completion  for restclient
(use-package company-restclient
  :after (org restclient)
  :quelpa
  (:fetcher github :repo "https://github.com/iquiw/company-restclient")
  :config
  (add-to-list 'company-backends 'company-restclient))
#+end_src

*** HTTP calls

Make http request within org-mode babel

#+begin_src emacs-lisp
;; make http request within org-mode babel
(use-package ob-http
  :defer t
  ;; :after (org)
  :hook
  (org-mode . aqua/ob-http-setup)
  :preface
  (defun aqua/ob-http-setup ()
    (require 'ob-http)))
#+end_src

*** Organize and send HTTP requests from Emacs
This is an alternate to =ob-http= for making HTTP calls. It introduces a new minor
mode =Verb mode=, which works as an extension to =Org mode=.

Additional details are available at [[https://github.com/federicotdn/verb][Verb HTTP]]

#+begin_src emacs-lisp :lexical no
;; An alternative to ob-http and may be better
;; https://github.com/federicotdn/verb
(use-package verb
  :defer t
  :quelpa (:fetcher github :repo "federicotdn/verb")
  :after (org)
  :hook (org-mode . verb-mode))
#+end_src

*** Markdown for org mode

=ox-gfm= is a github flavoured markdown exporter for org mode.

*** GO for orgmode babel

~ob-go~ is a module that has Org-Babel support for evaluating go code.

#+begin_src emacs-lisp :lexical no
;; Github Flavored Markdown exporter for Org Mode
(use-package ox-gfm
  :defer t
  :quelpa
  (:fetcher github :repo "https://github.com/larstvei/ox-gfm")
  :hook
  (org-mode . aqua/ox-gfm-setup)
  :preface
  (defun aqua/ox-gfm-setup ()
    (require 'ox-gfm)))
#+end_src

#+begin_src emacs-lisp :lexical no
;; Org-Babel support for evaluating go code.
(use-package ob-go
  :defer t
  :quelpa
  (:fetcher github :repo "https://github.com/pope/ob-go")
  ;;:after (org)
  :hook
  (org-mode . aqua/ob-go-setup)

  :preface
  (defun aqua/ob-go-setup ()
    (require 'ob-go)))
#+end_src

Usage:
#+begin_example
#+begin_src go :imports "fmt"
  fmt.Println("Hello, ORG")
#+end_src
#+end_example

*** Rust for orgmode babel

~ob-rust~ enables ~Org-Babel~ support for evaluating Rust code. It was created
based on the usage of ~ob-C~ and ~ob-go~.

#+begin_src emacs-lisp :lexical no
;; org-babel support for evaluating rust code.
(use-package ob-rust
  :defer t
  :quelpa
  (:fetcher github :repo "https://github.com/micanzhang/ob-rust")
  :hook
  (org-mode . aqua/ob-rust-setup)
  :preface
  (defun aqua/ob-rust-setup ()
    (require 'ob-rust)))
#+end_src

Usage of =ob-rust= for embedding the *Rust* code into =org-mode= documents:

#+begin_src rust :tangle no
fn main() {
    let greetings = ["Hello", "Hola", "Bonjour",
                     "Ciao", "こんにちは", "안녕하세요",
                     "Cześć", "Olá", "Здравствуйте",
                     "chào bạn", "您好"];

    for (num, greeting) in greetings.iter().enumerate() {
        print!("{} : ", greeting);
        match num {
            0 =>  println!("This code is editable and runnable!"),
            1 =>  println!("Este código es editable y ejecutable!"),
            2 =>  println!("Ce code est modifiable et exécutable!"),
            3 =>  println!("Questo codice è modificabile ed eseguibile!"),
            4 =>  println!("このコードは編集して実行出来ます！"),
            5 =>  println!("여기에서 코드를 수정하고 실행할 수 있습니다!"),
            6 =>  println!("Ten kod można edytować oraz uruchomić!"),
            7 =>  println!("Esse código é editável e executável!"),
            8 =>  println!("Этот код можно отредактировать и запустить!"),
            9 =>  println!("Bạn có thể edit và run code trực tiếp!"),
            10 =>  println!("这段代码是可以编辑并且能够运行的！"),
            _ =>  {},
        }
    }
}
#+end_src

#+RESULTS:
#+BEGIN_EXAMPLE
Hello : This code is editable and runnable!
Hola : Este código es editable y ejecutable!
Bonjour : Ce code est modifiable et exécutable!
Ciao : Questo codice è modificabile ed eseguibile!
こんにちは : このコードは編集して実行出来ます！
안녕하세요 : 여기에서 코드를 수정하고 실행할 수 있습니다!
Cześć : Ten kod można edytować oraz uruchomić!
Olá : Esse código é editável e executável!
Здравствуйте : Этот код можно отредактировать и запустить!
chào bạn : Bạn có thể edit và run code trực tiếp!
您好 : 这段代码是可以编辑并且能够运行的！
#+END_EXAMPLE

*** PlantUML

PlantUML is a handy tool for drawing simple diagrams. It is part of Org-mode
since 2010 and is a wrapper to dot, allowing higher-level definitions.
Install the ~plantuml-mode~ for better editing experience and a cool previews.
The babel support for plantuml is available via ~ob-plantuml~.

Find the location of the ~Homebrew~ installed version of ~plantuml~ binary and use
the result of the same across.

#+name: plantuml-jar-path
#+begin_src shell :tangle no :noweb-ref plantuml-jar-command :exports both
brew list plantuml | grep jar
#+end_src


#+begin_src emacs-lisp :noweb yes
;; set the location of plantuml jar installed with homebrew
(defconst homebrew-plantuml-jar-path
      (expand-file-name
       (string-trim
        (shell-command-to-string "<<plantuml-jar-command>>"))))

;; (message "%s" homebrew-plantuml-jar-path)
#+end_src

Now use the defined value =homebrew-plantuml-jar-path= from the above snippet to
set in the plantuml package.

#+begin_src emacs-lisp :noweb yes
;; https://github.com/skuro/plantuml-mode
;; major mode for editing PlantUML sources in Emacs
(use-package plantuml-mode
  :mode ("\\.puml\\'" "\\.plantuml\\'")

  :commands (plauntuml-mode
             plantuml-complete-symbol
             plantuml-render-buffer)

  :custom
  (plantuml-jar-path homebrew-plantuml-jar-path)

  :config (progn
            (defun plantuml-render-buffer ()
              (interactive)
              (message "PlantUML rendering")
              (shell-command (concat "java -jar "
                                     homebrew-plantuml-jar-path
                                     " "
                                     buffer-file-name))
              (message (concat "PlantUML rendered:  " (buffer-name))))))
#+end_src

Now for the literate plantuml configuration exported via =ob-plantuml=

#+begin_src emacs-lisp :noweb yes
;; finally install the ob-PlantUML
(use-package ob-plantuml
  :ensure nil
  :after org
  :custom
  (org-plantuml-jar-path homebrew-plantuml-jar-path))
#+end_src

For actual plantuml diagram generation, the following mappings are available:

#+begin_example
#+BEGIN_SRC plantuml
   C-c C-c  plantuml-preview: renders a PlantUML diagram from the current
   buffer in the best supported format

   C-u C-c C-c  plantuml-preview in other window

   C-u C-u C-c C-c plantuml-preview in other frame
#+END_SRC
#+end_example

*** DITAA DIagrams Through Ascii Art

Create ascii diagrams using ~ditaa~ support after installing the ditaa package
with homebrew.

#+begin_src emacs-lisp
;; location of the ditaa installed jar
(setq org-ditaa-jar-path
      (expand-file-name
       (string-trim
        (shell-command-to-string "brew list ditaa | grep jar"))))

(defun aqua/ditaa-generate ()
  (interactive)
  (shell-command
    (concat ditaa-cmd " " buffer-file-name)))
#+end_src

*** DOT language

This is an Emacs package for working with Graphviz DOT-format files. The
features of this package help you to create .dot or .gv files containing syntax
compatible with Graphviz and use Graphviz to convert these files to diagrams.

#+begin_src emacs-lisp :lexical no
;; graphviz-dot for dot files support
(use-package graphviz-dot-mode
  :defer t
  :after (org)
  :mode (("\\.diag\\'"      . graphviz-dot-mode)
         ("\\.blockdiag\\'" . graphviz-dot-mode)
         ("\\.nwdiag\\'"    . graphviz-dot-mode)
         ("\\.rackdiag\\'"  . graphviz-dot-mode)
         ("\\.dot\\'"       . graphviz-dot-mode)
         ("\\.gv\\'"        . graphviz-dot-mode))
  :init
  (with-eval-after-load 'org
    (defalias 'org-babel-execute:graphviz-dot #'org-babel-execute:dot)
    ;; (add-to-list 'org-babel-load-languages '(dot . t))
    (require 'ob-dot)
    (setq org-src-lang-modes
          (append '(("dot" . graphviz-dot))
                  (delete '("dot" . fundamental) org-src-lang-modes))))
  :config
  (setq graphviz-dot-indent-width 4))
#+end_src

The following commands are available for ~viewing~.

- =C-c C-p= (graphviz-dot-preview)

- =C-c v= (graphviz-dot-view)

*** Python babel support

Provide python support through ~ob-python~ and ~ob-ipython~.

#+begin_src emacs-lisp
;; python3 support
(setq org-babel-python-command "python3")
;; (setq org-babel-python-command "ipython3 --no-banner --classic --no-confirm-exit")

;; ipython support
(use-package ob-ipython
  :after org
  :init
  ;; for now disabling elpy only for ob-ipython minor mode
  ;; what we should actually do, is just to ensure that
  ;; ob-ipython's company backend comes before elpy's (TODO)
  ;; (add-to-list 'company-backends 'company-ob-ipython)
  (add-hook 'ob-ipython-mode-hookp
            (lambda ()
              (elpy-mode 0)
              (company-mode 1))))

;; use the python lexer for ipython blocks, add this setting
;; this is needed for hghlighting the ipython code block
;; (add-to-list 'org-latex-minted-langs '(ipython "python"))
#+end_src

#+begin_src emacs-lisp :tangle no
;; ob-python for python babel code
;; Babel Functions for Python
(use-package ob-python
  :ensure nil
  :after (ob python)
  :config
  (setq org-babel-python-command python-shell-interpreter))
#+end_src

#+begin_example
 babel for ipython/python
 one can use differen versions of the same language in code blocks
 with python3

 #+begin_src emacs-lisp :results none
 (setq org-babel-python-command "python3")
 #+end_src

 #+begin_src python :results output
 import sys
 print(sys.version)
 #+end_src

 #+RESULTS:
 : >>> >>> >>> >>> 3.9.13 (main, May 24 2022, 21:13:51)
 : [Clang 13.1.6 (clang-1316.0.21.2)]
#+end_example

*** Emacs Jupyter
=emacs-jupyter= is an interface to communicate with the =jupyer= kernels. We can use
it with babel after installation.
- ref: https://github.com/nnicandro/emacs-jupyter

#+begin_src emacs-lisp :lexical no
;; An interface to communicate with Jupyter kernels.
;; jupyter lab
(use-package jupyter
  :after (:all org python)
  :quelpa
  (jupyter :fetcher github :repo "emacs-jupyter/jupyter" :upgrade t)
  :commands (jupyter-run-server-repl
             jupyter-run-repl
             jupyter-server-list-kernels)
  :config
  (setq jupyter-eval-use-overlays t)
  (setq org-babel-default-header-args:jupyter '((:async   . "yes")
                                                (:session . "py")
                                                (:exports . "both")
                                                (:cache   . "no")
                                                (:tangle  . "no")
                                                (:hlines  . "no")
                                                (:kernel  . "python3"))))
#+end_src

*** ChatGPT Shell support in Babel
=ChatGPT= can be integrated with =org babel= in order to execute snippets in
literate documents.

ref: https://github.com/xenodium/chatgpt-shell

#+begin_src emacs-lisp :lexical no
;; chatgpt-shell integration with org mode babel
(use-package ob-chatgpt-shell
  :after (org)
  :hook
  (org-mode . aqua/ob-chatgpt-setup)
  :preface
  (defun aqua/ob-chatgpt-setup ()
    (require 'ob-chatgpt-shell)))
#+end_src


** Org AI
=org-ai= is a minor mode for Emacs org-mode that provides access to generative AI
models. It currently supports the below two:

  + OpenAI API (ChatGPT, DALL-E, other text models)
  + Stable Diffusion through stable-diffusion-webui

Inside an org-mode buffer we can

  * use ChatGPT to generate text, having full control over system and user prompts
  * Speech input and output! Talk with your AI!
  * generate images and image variations with a text prompt using Stable Diffusion or DALL-E
  * org-ai everywhere: Various commands usable outside org-mode for prompting
    using the selected text or multiple files.

ref: https://github.com/rksm/org-ai

#+begin_src emacs-lisp
;; org-ai
(use-package org-ai
  :ensure

  :after (org)

  :quelpa
  (org-ai :fetcher github :repo "rksm/org-ai")

  :commands
  (org-ai-mode org-ai-global-mode)

  :init
  (add-hook 'org-mode-hook #'org-ai-mode)
  ;; (org-ai-global-mode) ; installs global keybindings on C-c M-a

  :config
  ;; if you are on the gpt-4 beta:
  ;; (setq org-ai-default-chat-model "gpt-4")
  ;; yansnippets with `ai` snippets
  ;; (org-ai-install-yasnippets)

  ;; use openai key
  (setq org-ai-openai-api-token
      (auth-source-pick-first-password :host "api.openai.com")))
#+end_src


** BABEL settings

~Babel~ is the =org-mode= ability to execute source code from within org documents. It
is quite powerful and is one of the strongest features of =org= and is the corner
stone for documents with reproducible research.

#+begin_src text
Switch controlling code evaluation during export.
When set to nil no code will be evaluated as part of the export
process and no header argumentss will be obeyed.  When set to
'inline-only', only inline code blocks will be executed.  Users
who wish to avoid evaluating code on export should use the header
argument ':eval never-export'.

    System wide settings
    org-babel-default-header-args (for all languages)
    org-babel-default-header-args:<lang> (language specific)

    File wide property setting
    ,#+PROPERTY: header-args :eval never-export

    Local block specific setting
    ,* sample header
    :PROPERTIES:
    :header-args:    :eval never-export
    :END:
#+end_src

Each language can have separate default header arguments by customizing the
variable ~org-babel-default-header-args:<LANG>~, where ~<LANG>~ is the name of the
language. For details, see the language-specific online documentation at
[[https://orgmode.org/worg/org-contrib/babel/][babel code activation]] and [[https://org-babel.readthedocs.io/en/latest/header-args/][header args]].

#+begin_src emacs-lisp
;; Upcase #+begin_example...#+end_example in the results
(setq org-babel-uppercase-example-markers t)

;; do not ask before evaluation while C-c C-c
(setq org-confirm-babel-evaluate nil)

;; default header arguments to be set for source blocks
;; below is for python code blocks
(setq org-babel-default-header-args:python
      '((:results . "output replace")
        (:session . "none")
        (:exports . "both")
        (:cache   . "no")
        (:noweb   . "no")))

(setq org-babel-default-header-args:jupyter-python
      '((:async . "yes")
        (:session . "py")))

;; (setf (cdr (assoc :noweb org-babel-default-header-args)) "yes")
#+end_src

*** Register languages for babel

Enable languages and tools for babel support to handle the literate
programming.

#+begin_src emacs-lisp
;; register the below languages in babel org-mode
(defvar +org-babel-languages
  '(calc
    gnuplot
    css
    C
    awk
    emacs-lisp
    http            ;; ob-http
    verb            ;; Verb mode
    org
    latex
    lisp
    plantuml
    ditaa
    restclient     ;; ob-restclient
    python
    ipython
    js
    java
    shell
    dot
    go             ;; via ob-go
    rust           ;; via ob-rust
    chatgpt-shell  ;; ob-chatgpt-shell
    jupyter        ;; load jupyter at the end
    )
  "A list of org-babel languages to load.")

;; Load all the languagues
;;
(cl-loop for lang in +org-babel-languages
         do (require (intern (format "ob-%s" lang))))

;; execute the src code block by pressing C-c C-c on the source-block header
;;
(org-babel-do-load-languages
 'org-babel-load-languages
 (cl-loop for sym in +org-babel-languages
          collect (cons sym t)))
#+end_src

*** Specify compiler and header options for languages supported

**** ob-C

Provide the required =gcc= compilation options for =C= compiler through =babel= interface.

#+begin_src emacs-lisp :lexical no
;; ob-C compiler
(setq org-babel-C-compiler "gcc -std=c99")
#+end_src

**** C++ src code headers

Enable support of additional header arguments for =C++= buffers.

#+begin_src emacs-lisp :lexical no
;; c++ code headers
(setq org-babel-default-header-args:C++
      '((:results . "verbatim")
        (:main    . "no")
        (:flags   . "-std=c++17")
        (:cache   . "yes")))
#+end_src

**** Bash src code headers

Support for additional headers for =bash= code fragments.

#+begin_src emacs-lisp :lexical no
;; bash code headers
(setq org-babel-default-header-args:sh
      '((:results . "verbatim output replace")))

(setq org-babel-default-header-args:bash
      '((:results . "verbatim output replace")))
#+end_src

**** Using jupyter code blocks

Instead of having to specify ~jupyter-LANG~ as a source block name, you can have
~LANG~ source blocks use the _jupyter_ machinery. To do so, place a call to
~org-babel-jupyter-override-src-block~ somewhere in your config (after the call
to ~org-babel-do-load-languages~).
- ref: https://github.com/nnicandro/emacs-jupyter

#+begin_example
;; overriding built-in src-block languages
(org-babel-jupyter-override-src-block "python")

;; restore the original behavior by calling org-babel-jupyter-restore-src-block.
(org-babel-jupyter-restore-src-block "python")
#+end_example


After loading, source code blocks with names like *jupyter-LANG* will be
available for use. *LANG* can be any one of the kernel languages found on your
system. See =jupyter-available-kernelspecs=.

**** Issue 135 for ob-ipython
To counter the issue reported at [[https://github.com/gregsexton/ob-ipython/issues/135][json readtable error]] use the below code to
remove anything around or between top-level JSON objects in the response:

#+begin_src emacs-lisp :lexical no
;; kill extraneous content in ipython returns between top-level JSON objects
(advice-add 'ob-ipython--collect-json :before
            (lambda (&rest args)
              (let ((start (point)))
                (set-mark (point))
                (while (re-search-forward "{" nil t)
                  (backward-char)
                  (kill-region (region-beginning) (region-end))
                  (re-search-forward "}\n" nil t)
                  (set-mark (point)))
                (end-of-buffer)
                (kill-region (region-beginning) (region-end))
                (goto-char start))))
#+end_src

** Tables and Borders
For automatic table alignment, use the below snippet that was borrowed from
~scimax~.

#+begin_src emacs-lisp
;; for automatic table alignment (idea picked from scimax)
;;
(defun org-align-result-table ()
  "Auto align the tables in the subtree."
  (save-restriction
    (save-excursion
      (unless (org-before-first-heading-p) (org-narrow-to-subtree))
      (org-element-map (org-element-parse-buffer) 'table
        (lambda (tbl)
          (goto-char (org-element-property :post-affiliated tbl))
          (org-table-align))))))

(add-hook 'org-babel-after-execute-hook 'org-align-result-table)
#+end_src


*** For vertically alignment of tables

=valign= is a package that assists in pixel-perfect visual alignment for =Org= and
=Markdown= tables.

#+BEGIN_SRC emacs-lisp
;; This package provides visual alignment for Org Mode, Markdown and table.el tables on GUI Emacs
(use-package valign
  :after (org)
  :defer 3
  :quelpa
  (valign :fetcher github :repo "casouri/valign")
  :hook (org-mode . valign-mode))
#+END_SRC


** LaTeX Export settings

For source code highlighting during the export of org documents, we will be
using the python ~pygments~ package. Ensure that the same is installed and is
available from the ~pip~.

For generating ~pdf~ from ~LaTeX~ and opening use ~C-c C-v~ key combo and for just
compiling use ~C-c C-c~.

#+begin_src emacs-lisp :tangle no
;; for the src code syntax highlighting during the export use pygments
;;    install the python pygments package
;;    which is for code syntax highlighting in export. we need to use
;;    -shell-escape with latex, and install pygments.
;;    (setq org-latex-listings t)
;;
;; The latex exporter is provided by the ox-latex
;;
;; now for a nice looking code block, use Listings instead of Verbatim
;; this is for code syntax highlighting in export.
;; use -shell-escape with latex, and install pygments.
;;
;; if org-latex-listings: nil is used then code blocks will be exported
;; using the default verbatim with no additional dependencies
;; using the minted package for source code coloration during latex export
;;
;; Include the latex-exporter
;; check whether org-mode is available
(eval-after-load "ox-latex"
  '(progn
     ;; You need to install pygments to use minted
     (when (executable-find "pygmentize")
       ;; default packages to be inserted in the header
       ;; add minted to the defaults packages to include when exporting.
       (add-to-list 'org-latex-packages-alist '("" "minted"))   ; coloured source code blocks
                                        ;
       ;; The below 3 are default packages included in every tex file,
       ;; whether pdflatex or xelatex
       (add-to-list 'org-latex-packages-alist '("" "graphicx" t))     ; Enhanced support for graphics
       (add-to-list 'org-latex-packages-alist '("" "longtable" nil))  ; Allow tables to flow over page boundaries
       (add-to-list 'org-latex-packages-alist '("" "float" nil))      ; Improved interface for floating object

       (add-to-list 'org-latex-packages-alist '("" "listings")) ; typeset source code listings
       (add-to-list 'org-latex-packages-alist '("" "color"))    ; fix enhanced colour support
       (add-to-list 'org-latex-packages-alist '("" "parskip"))  ; fix spacing's

       ;; Tell the latex export to use the minted package for source
       ;; code coloration.
       (setq org-latex-listings 'minted)

       ;; Let the exporter use the -shell-escape option to let latex
       ;; execute external programs.
       ;; minted specific options through pygments
       (setq org-latex-minted-options
             '(("frame" "lines")
               ("fontsize" "\\scriptsize")
               ("bgcolor" "mintedbg")
               ("fontsize" "\\footnotesize")
               ("mathescape" "true")
               ("linenos" "")
               ("breaklines" "true")
               ("breakanywhere" "true")
               )))
     ))
#+end_src

#+begin_src emacs-lisp
;; for code syntax highlighting in org exports and during compilation
;; latex should be used with -shell-escape after installing pygments
(setq org-latex-listings 'minted)

;; https://tex.stackexchange.com/questions/9796/how-to-add-todo-notes
;; (("backgroundcolor=green!40" "todonotes" nil) t)) ; Marking things to do in a LaTeX

;; minted specific options through pygments
(setq org-latex-minted-options
      '(("frame"         "lines")
        ;;("fontsize" "\\scriptsize")
        ;;("bgcolor" "mintedbg")
        ("fontsize"      "\\scriptsize")
        ("linenos"       "")
        ("autogobble"    "")
        ("mathescape"    "true")
        ("breaklines"    "true")
        ("breakanywhere" "true")
        ;; ("samepage"      "")
        ;; ("xrightmargin"  "0.5cm")
        ;; ("xleftmargin"   "0.5cm")
        ))
#+end_src

#+begin_src emacs-lisp :lexical no :tangle no
(setq org-latex-packages-alist
      ;; default packages to be inserted in the header
      '(("" "minted")                                      ; coloured source code blocks

        ;; The below 3 are default packages included in every tex file,
        ;; whether pdflatex or xelatex
        ("" "graphicx" t)                                  ; Enhanced support for graphics
        ("" "longtable" nil)                               ; Allow tables to flow over page boundaries
        ("" "float" nil)                                   ; Improved interface for floating object

        ("" "listings")                                    ; typeset source code listings
        ("" "parskip")                                     ; fix spacings
        ("" "color")                                       ; color support
        ("" "xcolor")                                      ; driver independent color support
        ("english" "babel")))                              ; Multilingual support for LaTeX
#+end_src


Also, as explained in this [[https://tex.stackexchange.com/questions/2984/frequently-loaded-packages-differences-between-pdflatex-and-xelatex][article]], ~XeTeX~ uses the ~fontspec~ package instead of
~inputenc~ or ~fontenc~ so add =("" "fontspec")= to ~org-latex-packages-alist~.

/holding this for now as seeing an error with latex preview due to below error/

#+begin_example
  fatal package fontspec error: the fontspec package requires either xetex or
#+end_example

#+begin_src emacs-lisp :lexical no :tangle no
(add-to-list 'org-latex-packages-alist '("" "fontspec"))
#+end_src

*Note*: Some good resources for LaTeX are available [[https://steeven9.github.io/USI-LaTeX/html/general_index.html][here]].

*** Some custom settings for latex export

We can avoid placing of the ~\maketitle~ right after ~begin{document}~ which allows
us to place the ~\maketitle~ wherever we want.

#+begin_src emacs-lisp :lexical no
;; to avoid getting \maketitle right after the begin{document}
;; we should be able to place \maketitle if and where you want it.
(setq org-latex-title-command "")
#+end_src

By default, Org generates its own internal labels during LaTeX
export.  This process ensures that the ~\label~ keys are unique
and valid, but it means the keys are not available in advance of
the export process.

By default, Org generates its own internal labels during LaTeX
export.  This process ensures that the \label keys are unique
and valid, but it means the keys are not available in advance of
the export process.

Setting this variable gives you control over how Org generates
labels during LaTeX export, so that you may know their keys in
advance.  One reason to do this is that it allows you to refer to
various elements using a single label both in Org’s link syntax
and in embedded LaTeX code.

#+begin_src emacs-lisp :lexical no
(setq org-latex-prefer-user-labels t)
#+end_src

*** Smart quotes

The differentiation of single, double and back quotes may comes from the world
of \TeX of =pre-Unicode= eras trying to ~improve~ the typograph by using
conventions that no longer hold any more.

Org mode has builtin support for this *smart quote* feature. We can put a snippet
of /#+OPTIONS: ':t/ at the start of your Org document, or just turn on it
globally.

#+BEGIN_SRC emacs-lisp
(setq org-export-with-smart-quotes t)
#+END_SRC

*** LaTeX options for default exported packages

Here, we consider options for using multilingual support in LaTeX through
appropriate options.

+ *Note:*

  For adding additional options to a package already exported via the default
  class options, like for example =babel= we can use the below format.

#+begin_example
#+LATEX_OPTIONS: \PassOptionsToPackage{english,sanskrit}{babel}
#+end_example

  Here, we added /sanskrit/ as a second language.

**** A quick example.

#+begin_example
#+TITLE: Multilingual support in ORG

#+LATEX_HEADER: \usepackage{polyglossia}
#+LATEX_HEADER: \setotherlanguages{sanskrit}

#+#%LATEX_HEADER: \PassOptionsToPackage{english,sanskrit}{babel}
#+LATEX_HEADER: \newfontfamily\devanagarifont[Script=Devanagari]{Adelle Sans Devanagari}
#+end_example

**** Enable pdf and eps images in org mode

The below configuration enables to use ~pdf~ and ~eps~ images in org mode.

#+begin_src emacs-lisp :lexical no
;; Suggestion from Julian Burgos on the org mode mailing lists
(add-to-list 'image-file-name-extensions "pdf")
(add-to-list 'image-file-name-extensions "eps")

(add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "eps")
(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "pdf")

(setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
#+end_src

**  This is a latex experiment

\begin{sanskrit}
सर्वधर्मान् परित्यज्य मामेकं शरणं व्र्ज

अहं त्वां सर्वपापेभ्यो मोक्षयिष्यामि मा शुचः
\end{sanskrit}

** Some text and latex
so with the text...
#+NAME: code:1
#+BEGIN_SRC shell-script
echo hello world
#+END_SRC
[[code:1]] is a reference to src block

#+NAME: eqn:1
\begin{equation}
    f(x) =  \sum\limits_0^\infty(f^{(n)}(x)|_{x=0} \cdot x)
\end{equation}

And this is an equation [[eqn:1]]
#+end_example

+ TODO: Explore https://github.com/grettke/org-utf-to-xetex#installation

*** Latex previewing

Orgmode is  used mainly  by scientists and  researchers taking  notes. Sometimes
these notes include  mathematics and scientists almost universally  use LaTeX in
order to write mathematics,  but since LaTeX is not WYSIWYG,  it is often useful
to provide a preview of what something will look like when typeset.

Once latex  facility has been  set up,  it can be  used very simply.  One writes
LaTeX code and invokes the  command org-preview-latex-fragment (bound to =C-c C-x
C-l=). The  command processes  the latex code  and produces a  ~PNG~ image  that is
overlaid on the LaTeX code that was used to produce the image, thereby providing
the required preview. Pressing =C-c C-c= gets rid of the overlay.

After writing the latex  equations, if =C-c C-x C-l= pressed here  (or =C-u C-c C-x
C-l= to  preview everything in  the subtree,  or =C-u C-u  C-c C-x C-l=  to preview
everything in  the buffer)  the latex  equation will be  rendered as  a standard
mathematical equation.

Additional information is available at the link
https://orgmode.org/worg/org-tutorials/org-latex-preview.html.

One can turn on the previewing of all LaTeX fragments in a file with

#+begin_text
#+STARTUP: latexpreview
#+end_text

To disable use

#+begin_text
#+STARTUP: nolatexpreview
#+end_text

**** Additional options for latex previewing

Some additional customisation's for latex preview.

#+begin_src emacs-lisp :lexical no
;; (require 'tex-site)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

;; automatically convert LaTeX fragments to inline images.
;; (setq org-startup-with-latex-preview t)

(setq org-latex-create-formula-image-program 'dvipng) ;; for sharper images
(setq org-preview-latex-default-process 'dvisvgm)
#+end_src


These are disabled for now
#+begin_src emacs-lisp :lexical no :tangle no
(setq org-preview-latex-default-process 'dvisvgm)
(setq org-latex-preview-ltxpng-directory
      (concat (temporary-file-directory) "ltxpng/"))
(setq org-preview-latex-process-alist
       '((dvipng :programs
         ("lualatex" "dvipng")
         :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
         (1.0 . 1.0)
         :latex-compiler
         ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
         :image-converter
         ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
       (dvisvgm :programs
          ("latex" "dvisvgm")
          :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
          (1.7 . 1.5)
          :latex-compiler
          ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
          :image-converter
          ("dvisvgm %f -n -b min -c %S -o %O"))
       (imagemagick :programs
              ("latex" "convert")
              :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
              (1.0 . 1.0)
              :latex-compiler
              ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
              :image-converter
              ("convert -density %D -trim -antialias %f -quality 100 %O"))))
#+end_src

#+begin_src emacs-lisp :lexical no
;;Latex Preview Helper Function
(defun org-latex-preview-fix (&optional ARG)
  "A wrapper function that stops org-preview from including
  packages that break latex"
  (interactive nil)
  (let ((org-latex-packages-alist . nil))
    (org-latex-preview ARG)))

;; (local-set-key (kbd "C-c C-x C-l") 'org-latex-preview-fix)
#+end_src

*** Toggle latex preview on mouse enter with addon org-fragtog

~org-fragtog~ is package that can automatically toggle Org mode LaTeX fragment
previews as the cursor enters and exits them.

#+begin_src emacs-lisp :lexical no
;; org-fragtog for automatically toggle Org mode LaTeX fragment
;; previews as the cursor enters and exits them
(use-package org-fragtog
  :after (org)
  :hook
  (org-mode . org-fragtog-mode))

;; increase size of LaTeX fragment previews
;; (plist-put org-format-latex-options :scale 2)
(setq aqua/org-latex-scale 3.0)
(setq org-format-latex-options (plist-put org-format-latex-options :scale aqua/org-latex-scale))
#+end_src

Org mode supports inline image previews of LaTeX fragments. These can be toggled
with ~C-c C-x C-l~. org-fragtog automates  this, so fragment previews are disabled
for editing  when your cursor  steps onto them,  and re-enabled when  the cursor
leaves.

*** General LaTeX completion with cdlatex and company-math

=CDLatex= provides a  collection of convenience functions that  speed up editing
LaTeX documents. It allows fast input methods  to enter LaTeX data and Math. The
package  =company-math=  provides a  completion  back-ends  for the  math  unicode
symbols and latex tags.

Instead of  installing =CDLaTeX=  you’d turn on  org-cdlatex-mode. You  don’t even
need to install  CDLaTeX, it’s already on your system!  ~org-cdlatex-mode~ is part
of Org.

Typing  in the  grave key  (`) and  a letter  inserts symbols  into the  buffer,
automatically adding inline math dollars if necessary:

+ ` and a-z (A-Z) insert greek letters (uppercase), so `a gives \alpha, `L gives \Lambda etc
+ ` plus keys to insert arrows:

| key    | grave ` + key  | two graves ` ` + key                      |
|--------+----------------+-------------------------------------------|
| > or < | \(\rightarrow\) or \(\leftarrow\) | \(\longrightarrow\) or \(\longleftarrow\) |
| ] or [ | \(\Rightarrow\) or \(\Leftarrow\) | \(\Longrightarrow\) or \(\Longleftarrow\) |
| ^ or _ | \(\uparrow\) or \(\downarrow\) |                                           |
| =      | \(\Leftrightarrow\)          | \(\Longleftrightarrow\)                   |

#+begin_src emacs-lisp :lexical no
;; CDLatex for faster input of latex
;; https://gist.github.com/karthink/7d89df35ee9b7ac0c93d0177b862dadb
(use-package cdlatex
  :ensure t
  :after (:any org-mode tex-mode auctex)
  :hook
  ((org-mode    . turn-on-org-cdlatex)
   (LaTeX-mode  . turn-on-cdlatex)
   (latex-mode  . turn-on-cdlatex)
   (cdlatex-tab . yas-expand)
   (cdlatex-tab . cdlatex-in-yas-field)))

;; company completion for latex math symbols
(use-package company-math
  :after (:any org-mode tex-mode)
  :preface
  ;; local configuration for TeX modes
  (defun aqua/latex-math-mode-setup ()
    (setq-local company-backends
                (append '((company-math-symbols-latex
                           company-latex-commands))
                        company-backends)))
  :hook
  ((org-mode   . aqua/latex-math-mode-setup)
   (LaTeX-mode . aqua/latex-math-mode-setup)
   (latex-mode . aqua/latex-math-mode-setup)))
#+end_src


*** Company math symbol handling
Enable math symbol backend only in =TeX-mode= and =org-mode=.

#+begin_src emacs-lisp
(with-eval-after-load 'company
  (defun aqua/company-math-init()
    (setq-local company-backends
                (append '((company-math-symbols-latex
                           company-auctex-macros
                           company-auctex-symbols
                           company-auctex-environments))
                        company-backends)))

  (add-hook 'TeX-mode-hook 'aqua/company-math-init)
  (add-hook 'org-mode-hook 'aqua/company-math-init))
#+end_src


** Xenops: LaTeX editing environment for mathematical documents

~Xenops~ is a LaTeX editing environment for mathematical documents in Emacs.

#+begin_src emacs-lisp :lexical no
;; Xenops latex for math documents
(use-package xenops
  :quelpa
  (xenops :fetcher github :repo "dandavison/xenops")
  :hook
  ((latex-mode . xenops-mode)
   (LaTeX-mode . xenops-mode)))
#+end_src

_M-x xenops-doctor_ will check all the requirements for ~xenops~ and some others.

As per the package documentation, we don't need to learn any commands for ~Xenops~
to render the math; just type, and ~Xenops~ will render it.

** Pdf export of org documents

For ~pdf~ export and generation of the ~pdf~ documents from ~org~ we need a proper
~LaTeX~ compiler and we will be using ~xelatex~ for our purpose. Please note that
we will be using ~xelatex~ instead of ~pdflatex~ as fontspec is only supported by
~xelatex~ or ~lualatex~.

While compiling a ~LaTeX~ document with citations, it is required to run the
compiler *4* times in order to get all the formatting and intermediate documents
correct. The command ~org-latex-pdf-process~ takes care of that.

Pre-export settings useful for adding and configuring the packages.

#+begin_src emacs-lisp :lexical no
;; LaTeX Export Settings with customisations using XeLaTeX
;; interpret "_" and "^" for export when braces are used.
(setq org-export-with-sub-superscripts '{})

;; list of default packages to be inserted into preamble
(setq org-latex-default-packages-alist
      '(("AUTO" "inputenc" t)       ; translates various standard and other input encodings
        (""     "lmodern" nil)      ; Latin Modern Roman - this is for having good fonts
        ("T1" "fontenc" t)          ; This is for handling accented characters

        ;; for standard margins to be placed
        ("top=1in, bottom=1.in, left=1in, right=1in" "geometry" nil)

        ;; The below 3 are default packages included in every tex file,
        ;; whether pdflatex or xelatex
        ("" "graphicx" t)          ; Enhanced support for graphics
        ("" "longtable" nil)       ; Allow tables to flow over page boundaries
        ("" "float" nil)           ; Improved interface for floating object

        ("" "wrapfig" nil)	       ; to wrap text around figures
        ("" "rotating" nil)        ; rotation of figures and tables
        ("normalem" "ulem" t)      ; for underlining

        ;; ("" "fixltx2e" nil)        ; patch for LaTeX
        ;; ("" "soul" t)              ; proper hyphenation
        ;; ("" "latexsym" t)          ; additional characters from lasy fonts

        ;; for math symbols support
        ;; the order of below is important to avoid \iint and \iiint errors
        ("" "amsmath" t)                     ; math formulas support
        ("" "textcomp" t)                    ; support for Text Companion fonts
        ("" "marvosym" t)                    ; support for currency symbols
        ("" "wasysym" t)                     ; support for wasy fonts
        ("" "amssymb" t)                     ; math symbols support
        ("" "amsmath" t)                     ; math formulas support
        ("theorems, skins" "tcolorbox" t)    ; coloured and framed text boxes

        ;; bibliography styles
        ;; note that natbib and biblatex are incompatible
        ("numbers,square,sort&compress" "natbib" nil) ; flexible bibliography support
        ("" "natmove" nil)                           ; move superscripted citations beyond punctuation

        ;; Verbatim with URL-sensitive line breaks
        ("" "url" nil)

        ;; for source code highlighting
        ("cache=false" "minted" nil)

        ;; this allows you to use underscores in places like filenames.
        ;; control behaviour of "_" in text
        ("strings" "underscore" nil)

        ;; hyperref should be the last to load
        ;; https://tex.stackexchange.com/questions/46032/hyperref-error-when-using-xelatex-and-fontspec-with-latexmk
        ("linktocpage,pdfstartview=FitH,colorlinks=true,linkcolor=teal,anchorcolor=teal,
citecolor=magenta,filecolor=green,urlcolor=cyan" "hyperref" nil)

        ;; allows to attachs binary files in pdfs
        ("" "attachfile" nil)

        ;; support for setting the spacing between lines in a document.
        ("" "setspace" nil)

        ))

;; from scimax
;; do not put in \hypersetup. Use your own if you want it e.g.
;; \hypersetup{pdfkeywords={%s},\n pdfsubject={%s},\n pdfcreator={%}}
(setq org-latex-hyperref-template nil)

;; format for displaying numbers in scientific notation
(setq org-latex-table-scientific-notation "%s × 10\\(^\\text{%s}\\)")

;; Font-lock
;; Latex fragments for highlighting latex related syntax in buffer
(setq org-highlight-latex-and-related '(native script entities))
(set-face-foreground 'org-latex-and-related "blue")

;; to circumvent reliance on Apache config, solution by Seb:
;; http://thread.gmane.org/gmane.emacs.orgmode/53856/focus=53875
(setq org-html-xml-declaration
      '(("html" . "<!-- <xml version=\"1.0\" encoding=\"utf-8\"> -->")))
#+end_src

An example configuration for ~hyperref~ setup
#+begin_example
 org-latex-hyperref-template
 "\\hypersetup{
 pdfauthor={%a},
 pdftitle={%t},
 pdfkeywords={%k},
 pdfsubject={%d},
 pdfcreator={%c},
 pdflang={%L},
 colorlinks, linkcolor={red!50!black}, citecolor={blue!50!black}, urlcolor={blue!80!black}
}")
#+end_example

Here, we set the compilation command for org to latex to pdf.

#+begin_src emacs-lisp
;; setting up XELATEX for pdf generation
;;
;; Let the exporter use the -shell-escape option to let latex
;; execute external programs.

(setq org-latex-compiler "xelatex")

;;  defines how to generate the pdf file using xelatex + bibtex
;;  switching from to biber from bibtex or vice-versa
;;  -8bit has been added to address ^^X sequences


;; defines how to generate the pdf file using xelatex + biber
;; (setq org-latex-pdf-process
;;       '(
;;         "xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
;;         "bibtex %b"
;;         "xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
;;         "xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
;;         ))

;; Using pdflatex from latexmkrc
;; (setq org-latex-pdf-process
;;       (list "latexmk -pdflatex='%latex -8bit -shell-escape -interaction
;; nonstopmode' -pdf -bibtex -f -output-directory=%o %f"))

(setq org-latex-pdf-process '("LC_ALL=en_US.UTF-8 latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src


** LaTeX export with additional classes

Org-mode  includes  a  powerful  export  module for  converting  files  to  many
formats. Start  the export module  with the ~org-export-dispatch~  function, which
can be  run with  the ~C-c  C-e~ keyboard  shortcut. The  dispatch will  split the
screen and provide a range of options.

The export  functionality comes with  some sensible  defaults, but to  craft our
article or a book the way we want  it to look, we need to add some configuration
and options within our Org file.

LaTeX is  a powerful typesetting  system, especially for writing  scientific and
technical documents. But writing documents in  LaTeX can be confusing because it
is required  to know many commands,  and the text is  littered with backslashes,
curly braces, and other syntax distractions.  Being productive as a writer needs
focusing on the text's content instead of  how it looks. Org mode is the perfect
LaTeX editor because it frees one from such distractions.

Here are the list of installed latex classes.

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)

(mapcar 'car org-latex-classes)
#+END_SRC

By default, Org mode uses the /article class/ to export documents, but this can
be changed with export settings in the file header, for example:

#+begin_example
  #+latex_class: book
  #+latex_class_options: [a4paper]
  #+latex_header: \usepackage{times}
  #+options: :toc:nil
#+end_example

This particular file header sets the LaTeX class to a ~book~ in *A4* paper size and
uses the /Times package fonts/. The last line tells Org mode to omit the table of
contents from the export.

More complex header configurations may be defined by changing the
~org-latex-classes~ list. The example below adds the template for journals of the
/Taylor & Francis/ publisher.

#+begin_example
  (add-to-list 'org-latex-classes '("taylorfrancis"
                                    "\\documentclass[largeformat]{interact}"
                                    ("\\section{%s}" . "\\section*{%s}")
                                    ("\\subsection{%s}" . "\\subsection*{%s}")))
#+end_example

Call this particular class by adding *#+latex_class: taylorfrancis* to your file header.

*** All custom latex classes

Custom latex classes configured are all in this section.

#+begin_src emacs-lisp
;; adding additional classes for org-export
;;
;; (unless (boundp 'org-latex-classes)
;;   (setq org-latex-classes nil))
;;
;; beamer class is useful for creating presentations in latex and org
(add-to-list 'org-latex-classes
             '("beamer"
               "\\documentclass[11pt,professionalfonts]{beamer}\n
                \\mode<{{{beamermode}}}>\n
                \\usetheme{{{{beamertheme}}}}\n
                \\usecolortheme{{{{beamercolortheme}}}}\n
                \\beamertemplateballitem\n
                \\setbeameroption{show notes}
                \\usepackage[utf8]{inputenc}\n
                \\usepackage[T1]{fontenc}\n
                \\usepackage{hyperref}\n
                \\usepackage{color}
                \\usepackage{listings}
                \\usepackage{multirow}
                \\usepackage{subfigure}
                \\usepackage{graphicx}
                \\usepackage{xcolor}
                \\usepackage{url}
                \\usepackage{amssymb}
                \\usepackage{amsmath}
                \\usepackage{tikz}
                \\usepackage{xcolor}
                \\usepackage{lmodern}
                \\usepackage[margin=1in]{geometry}
                \\usepackage{algorithmic}
                \\usepackage{algorithm}
                \\usepackage{fontspec,xunicode,xltxtra}
                \\usepackage{polyglossia}
                \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
                         frame=single,
                         basicstyle=\\small,
                         showspaces=false,showstringspaces=false,
                         showtabs=false,
                         keywordstyle=\\color{blue}\\bfseries,
                         commentstyle=\\color{red},
                         }\n
                \\usepackage{verbatim}\n
                \\institute{{{{beamerinstitute}}}}\n
                \\subject{{{{beamersubject}}}}\n"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}"
                "\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}")))

;; letter is a latex class for creating formal letters
(add-to-list 'org-latex-classes
	         '("letter"
	           "\\documentclass[11pt]{letter}\n
		        \\usepackage[utf8]{inputenc}\n
		        \\usepackage[T1]{fontenc}\n
		        \\usepackage{color}"
	           ("\\section{%s}" . "\\section*{%s}")
	           ("\\subsection{%s}" . "\\subsection*{%s}")
	           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	           ("\\paragraph{%s}" . "\\paragraph*{%s}")
	           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; private latex classes (referred from http://www.star.bris.ac.uk/bjm/org-basics.html)
(add-to-list 'org-latex-classes
	         '("bjmarticle"
	           "\\documentclass{article}
			    \\usepackage[utf8]{inputenc}
			    \\usepackage[T1]{fontenc}
			    \\usepackage{graphicx}
			    \\usepackage{longtable}
			    \\usepackage{hyperref}
			    \\usepackage{natbib}
			    \\usepackage{amssymb}
			    \\usepackage{amsmath}
			    \\usepackage{geometry}
			    \\geometry{a4paper,left=2.5cm,top=2cm,right=2.5cm,bottom=2cm,marginparsep=7pt, marginparwidth=.6in}"
	           ("\\section{%s}" . "\\section*{%s}")
	           ("\\subsection{%s}" . "\\subsection*{%s}")
	           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	           ("\\paragraph{%s}" . "\\paragraph*{%s}")
	           ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("ieee"
               "\\usepackage{IEEEconf,IEEEtran} \\documentclass[12pt,journal]{IEEEtran}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("koma-article"
               "\\documentclass{scrartcl}
               [NO-DEFAULT-PACKAGES]
               [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


;; a customised article with better margins
(add-to-list 'org-latex-classes
             '("myarticle"                          ;; custom article class-name
               "\\documentclass{article}
\\usepackage[top=1in, bottom=1.in, left=1in, right=1in]{geometry}
 [PACKAGES]
 [EXTRA]" ;;header-string
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*a{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


;; org latex class for APA-style export
(add-to-list 'org-latex-classes
             '("apa6"
               "\\documentclass[man,12pt]{apa6}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; exporting a single chapter
(add-to-list 'org-latex-classes
	         '("chapter" "\\documentclass[11pt]{report}"
	           ("\\chapter{%s}" . "\\chapter*{%s}")
	           ("\\section{%s}" . "\\section*{%s}")
	           ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")))

(add-to-list 'org-latex-classes
             '("thesis"
               "\\documentclass{thesis}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))


;; Elsarticle is Elsevier class for publications.
(add-to-list 'org-latex-classes
             '("elsarticle"
               "\\documentclass{elsarticle}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


;; https://github.com/Tufte-LaTeX/tufte-latex
;; tufte-book class for writing classy books
;; Edward Tufte is known for graphical excellence in his famous books. The
;; below latex class is to handle format matching his work
;; (add-to-list 'org-export-latex-classes
;;         '("tufte-book"
;;         "\\documentclass{tufte-book}\n
;;         \\usepackage{color}
;;         \\usepackage{amssymb}
;;         \\usepackage{gensymb}
;;         \\usepackage{units}"
;;         ("\\section{%s}"      . "\\section*{%s}")
;;         ("\\subsection{%s}"   . "\\subsection*{%s}")
;;         ("\\paragraph{%s}"    . "\\paragraph*{%s}")
;;         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; tufte-handout class for writing classy handouts and papers
;; (add-to-list 'org-export-latex-classes
;; '("tuftehandout"
;;         "\\documentclass{tufte-handout}
;;         \\usepackage{color}
;;         \\usepackage{amssymb}
;;         \\usepackage{amsmath}
;;         \\usepackage{gensymb}
;;         \\usepackage{nicefrac}
;;         \\usepackage{units}"
;;         ("\\section{%s}" . "\\section*{%s}")
;;         ("\\subsection{%s}" . "\\subsection*{%s}")
;;         ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+begin_src emacs-lisp :lexical no
(setq org-latex-listings-options '(("breaklines" "true")
                                   ("literate" "{0}{0}{1}%
                                                {1}{1}{1}%
                                                {2}{2}{1}%
                                                {3}{3}{1}%
                                                {4}{4}{1}%
                                                {5}{5}{1}%
                                                {6}{6}{1}%
                                                {7}{7}{1}%
                                                {8}{8}{1}%
                                                {9}{9}{1}%
                                                ")))
#+end_src

** Latex configurations and addons

This section consists of certain configurations and Some additional helper
packages and functions required for working with ~LaTeX~.

*** Compiling
With =auctex= we can compile the =TeX= documents into =pdf= files using Emacs mapping
*C-c C-c* and then followed by typing *mk* and using *LaTeXmk* for compilation.
Also, *C-c C-a* does everything without any prompt.

*C-c C-e* –> add an environment
*C-c ret* –> add macros such as \item etc…

*** Auctex

=AucTeX=  is  an extensible  package  for  writing  and  formatting Tex  files  in
Emacs.  It is  the  foundation for  LaTeX  (and ConText)  editing  in Emacs.  It
provides commands and  minor-modes for all the aspects of  document creation. It
provides all the ingredients we need.

~AucTeX~  does  most  of  the  work  of creating  a  full  fledged  LaTeX  editing
environment,  leaving  us  with  the  task  of  adding  time-saving  convenience
features.

~AucTeX~ is generally responsible for providing completions while typing. The most
general, always available options for text input are:

  * Insert an arbitrary environment with LaTeX-environment (C-c C-e),
  * or a macro with TeX-insert-macro (C-c C-m), which it will do so after
    prompting you for arguments.
  * Insert a section header with LaTeX-section (C-c C-s).

#+begin_src emacs-lisp :noweb yes
;; auctex
;; (use-package tex
;;   :defer t
;;   :ensure auctex)
(use-package tex
  :defer t
  :ensure auctex
  :init
  (progn
    ;; set the default command for tex command
    (setq TeX-command-default   (if (executable-find "latexmk") "LatexMk" "LaTeX")
          ;; set the LaTeX Engine
          TeX-engine            (if (executable-find "xetex")   'xetex    'default)
          TeX-auto-save                     t
          TeX-parse-self                    t
          TeX-syntactic-comment             t
          TeX-auto-local                    ".auctex-auto"
          TeX-style-local                   ".auctex-style"
          ;; Synctex is a nice add-on that synchronizes the editing tool
          ;; (Emacs/MacTeX/AucTeX) with a PDF viewing tool
          TeX-source-correlate-mode         t
          TeX-source-correlate-method       'synctex
          TeX-source-correlate-start-server nil
          TeX-electric-sub-and-superscript  t
          TeX-fill-break-at-separators      nil
          TeX-save-query                    t
          ;; Viewers
          TeX-view-program-list
          '(("Preview.app" "open -a Preview.app %o")
            ("Skim" "open -a Skim.app %o")
            ("displayline" "displayline -g -b %n %o %b")
            ("open" "open %o"))

          TeX-view-program-selection
          '((output-dvi "Skim")
            (output-pdf "Skim")
            (output-html "open"))))
  :config
  <<latex-fontification>>
  (setq TeX-master t)
  (setcar (cdr (assoc "Check" TeX-command-list)) "chktex -v6 -H %s")
  (add-hook 'TeX-mode-hook (lambda ()
                             (setq ispell-parser          'tex
                                   fill-nobreak-predicate (cons #'texmathp fill-nobreak-predicate))))
  (add-hook 'TeX-mode-hook #'visual-line-mode)
  (add-hook 'TeX-update-style-hook #'rainbow-delimiters-mode)
  (add-hook 'TeX-mode-hook #'turn-on-reftex)
  '(add-to-list 'TeX-expand-list '("%q" skim-make-url)))
#+end_src

*Notes*

Open a =.tex= file and give it a try. Once you finish editing the source file,
you can compile the project with =C-c C-c= and =C-c C-c= again to view the PDF in
Skim. Forward search can be called by =C-c C-v= and inverse search can be
called by /shift + cmd + (left click)/.

#+begin_src emacs-lisp
(add-hook 'TeX-mode-hook
          #'(lambda ()
             (setq TeX-command-default "latexmk")))

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (push
             '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
               :help "Run latexmk on file")
             TeX-command-list)))
(add-hook 'TeX-mode-hook #'(lambda () (setq TeX-command-default "latexmk")))


(defun skim-make-url ()
  (concat
   (TeX-current-line)
   " "
   (expand-file-name (funcall file (TeX-output-extension) t)
                     (file-name-directory (TeX-master-file)))
   " "
   (buffer-file-name)))

;; outline for tex
;; (add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
;; (add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)

;; Synctex is a nice add-on that synchronizes the editing tool (Emacs/MacTeX)
;; with a PDF viewing tool
;; (setq TeX-source-correlate-method 'synctex)
;; (setq TeX-source-correlate-start-server t)
;; (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
#+end_src


**** From Doom Emacs configuration:

#+name: latex-fontification
#+begin_src emacs-lisp :tangle no
(setq font-latex-match-reference-keywords
      '(;; BibLaTeX.
        ("printbibliography" "[{") ("addbibresource" "[{")
        ;; Standard commands.
        ("cite" "[{")       ("citep" "[{")
        ("citet" "[{")      ("Cite" "[{")
        ("parencite" "[{")  ("Parencite" "[{")
        ("footcite" "[{")   ("footcitetext" "[{")
        ;; Style-specific commands.
        ("textcite" "[{")   ("Textcite" "[{")
        ("smartcite" "[{")  ("Smartcite" "[{")
        ("cite*" "[{")      ("parencite*" "[{")
        ("supercite" "[{")
        ;; Qualified citation lists.
        ("cites" "[{")      ("Cites" "[{")
        ("parencites" "[{") ("Parencites" "[{")
        ("footcites" "[{")  ("footcitetexts" "[{")
        ("smartcites" "[{") ("Smartcites" "[{")
        ("textcites" "[{")  ("Textcites" "[{")
        ("supercites" "[{")
        ;; Style-independent commands.
        ("autocite" "[{")   ("Autocite" "[{")
        ("autocite*" "[{")  ("Autocite*" "[{")
        ("autocites" "[{")  ("Autocites" "[{")
        ;; Text commands.
        ("citeauthor" "[{") ("Citeauthor" "[{")
        ("citetitle" "[{")  ("citetitle*" "[{")
        ("citeyear" "[{")   ("citedate" "[{")
        ("citeurl" "[{")
        ;; Special commands.
        ("fullcite" "[{")
        ;; Cleveref.
        ("cref" "{")          ("Cref" "{")
        ("cpageref" "{")      ("Cpageref" "{")
        ("cpagerefrange" "{") ("Cpagerefrange" "{")
        ("crefrange" "{")     ("Crefrange" "{")
        ("labelcref" "{")))

(setq font-latex-match-textual-keywords
      '(;; BibLaTeX brackets.
        ("parentext" "{") ("brackettext" "{")
        ("hybridblockquote" "[{")
        ;; Auxiliary commands.
        ("textelp" "{")   ("textelp*" "{")
        ("textins" "{")   ("textins*" "{")
        ;; Subcaption.
        ("subcaption" "[{")))

(setq font-latex-match-variable-keywords
      '(;; Amsmath.
        ("numberwithin" "{")
        ;; Enumitem.
        ("setlist" "[{")     ("setlist*" "[{")
        ("newlist" "{")      ("renewlist" "{")
        ("setlistdepth" "{") ("restartlist" "{")
        ("crefname" "{")))
#+end_src

**** Settings for tex-mode

=tex-mode= is a built-in package which we configure as per our requirement in this
section.

#+begin_src emacs-lisp
(use-package tex-mode
  :defer t
  :config
  (setq LaTeX-section-hook '(LaTeX-section-heading
                             LaTeX-section-title
                             LaTeX-section-toc
                             LaTeX-section-section
                             LaTeX-section-label)
        LaTeX-fill-break-at-separators nil
        LaTeX-item-indent              0))
#+end_src

**** Adding LatexMk support

The package =auctex-latexmk= adds LatexMk support to AUCTeX.

#+begin_src emacs-lisp :tangle no
(use-package auctex-latexmk
  :after (auctex)
  :defer t
  :init
  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  (add-hook 'LaTeX-mode (lambda () (setq TeX-command-default "LatexMk")))
  :config
  (auctex-latexmk-setup))
#+end_src

**** Auto completion for Auctex

=company-auctex= provide autocompletion for auctex

#+begin_src emacs-lisp :tangle no
(use-package company-auctex
  :after (:all company tex)
  :demand t
  :quelpa (:fetcher github :repo "alexeyr/company-auctex")
  :init
  (add-hook 'TeX-mode-hook
            (lambda ()
              (make-local-variable 'company-backends)
              (company-auctex-init))))
#+end_src

*** Latex configuration settings
Additional settings for LaTeX buffers.

#+begin_src emacs-lisp :tangle no
;; these are disabled
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

;; set the LaTeX Engine
(setenv "PATH" (concat ":/Library/TeX/texbin/" (getenv "PATH")))
(add-to-list 'exec-path "/Library/TeX/texbin/")

(setq TeX-engine (quote "/Library/TeX/texbin/xetex"))
(setq-default TeX-engine "xetex")
#+end_src

Below are the main settings loaded currently
#+begin_src emacs-lisp :lexical no
;; add synctex
(setq LaTeX-command "pdflatex -file-line-error -shell-escape -synctex=1")

;; to use pdfview with auctex
;; (add-hook 'LaTeX-mode-hook 'pdf-tools-install)

;; to use pdfview with Emacs latex mode
;; (add-hook 'latex-mode-hook 'pdf-tools-install)

;; set the default command for tex command
;; (setq TeX-command-default "XeTeX")

;; display the output of tex compilation
(setq TeX-show-compilation t)

;; for AucTex
;; updating the PDF-buffer after the TeX compilation has finished
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; TeX command list configuration
(setq TeX-command-list
      (quote
       (("TeX" "%(PDF)%(tex) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
         (plain-tex-mode texinfo-mode ams-tex-mode)
         :help "Run plain TeX")
        ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
         (latex-mode doctex-mode)
         :help "Run LaTeX")
        ("LaTeX Make" "latexmk -pdflatex='pdflatex -synctex=1' -pdf %s" TeX-run-command nil t
         :help "Run LaTeX Make")
        ("Makeinfo" "makeinfo %t" TeX-run-compile nil
         (texinfo-mode)
         :help "Run Makeinfo with Info output")
        ("Makeinfo HTML" "makeinfo --html %t" TeX-run-compile nil
         (texinfo-mode)
         :help "Run Makeinfo with HTML output")
        ("AmSTeX" "%(PDF)amstex %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
         (ams-tex-mode)
         :help "Run AMSTeX")
        ("ConTeXt" "texexec --once --texutil %(execopts)%t" TeX-run-TeX nil
         (context-mode)
         :help "Run ConTeXt once")
        ("ConTeXt Full" "texexec %(execopts)%t" TeX-run-TeX nil
         (context-mode)
         :help "Run ConTeXt until completion")
        ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX")
        ("Biber" "biber %s" TeX-run-Biber t t :help "Run Biber")
        ("View" "%V" TeX-run-discard-or-function nil t :help "Run Viewer")
        ("Print" "%p" TeX-run-command t t :help "Print the file")
        ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
        ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file")
        ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file")
        ("Check" "lacheck %s" TeX-run-compile nil
         (latex-mode)
         :help "Check LaTeX file for correctness")
        ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
        ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
        ("Clean All" "del *.aux *.log %s.out %s.exa %s.ilg %s.idx %s.ind %s.lof %s.lot %s.toc %s.bbl %s.blg %s.dvi %s.ps %s.pdf *~" TeX-run-command nil t :help "Delete generated intermediate and output files")
        ("Other" "" TeX-run-command t t :help "Run an arbitrary command")
        ("XeLaTeX_SyncteX" "%`xelatex --synctex=1%(mode)%' %t " TeX-run-command nil
         (latex-mode doctex-mode)))))
#+end_src


*** ox-latex export settings
Some settings for the =ox-latex= while assisting in the export of org documents
into various formats.
#+begin_src emacs-lisp :lexical no
;; ox-latex export settings
(setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~"
                                            "aux" "idx" "log"
                                            "out" "toc" "nav"
                                            "snm" "vrb" "dvi"
                                            "fdb_latexmk" "blg"
                                            "brf" "fls" "entoc"
                                            "ps" "spl" "bbl"
                                            "pyg" "pygtex" "pygstyle")))

;; do not remove the log files after export
(setq org-latex-remove-logfiles nil)
#+end_src

*** Latex Preview Pane
=latex-preview-pane= is a minor mode for Emacs that enables you to preview your LaTeX files directly in Emacs. It supports PDF previews, your choice of pdflatex or xelatex, and it highlights errors in your LaTeX buffer.

#+begin_src emacs-lisp :lexical no
(use-package latex-preview-pane
  :quelpa
  (:fetcher github :repo "https://github.com/jsinglet/latex-preview-pane")
  :defer t
  :config
  (latex-preview-pane-enable))
#+end_src

*** Latex Math Preview
A package for previewing the latex mathematical expressions.

#+begin_src emacs-lisp :lexical no
;; latex mathematical expressions preview
(use-package latex-math-preview
  :quelpa (:fetcher github :repo "https://github.com/emacsmirror/latex-math-preview")
  :defer t
  :config
  (autoload 'latex-math-preview-expression      "latex-math-preview" nil t)
  (autoload 'latex-math-preview-insert-symbol   "latex-math-preview" nil t)
  (autoload 'latex-math-preview-save-image-file "latex-math-preview" nil t)
  (autoload 'latex-math-preview-beamer-frame    "latex-math-preview" nil t))
#+end_src

*** TexPdf options and auto-fill for latex

Enable =auto-fill= for the LaTeX content.

#+begin_src emacs-lisp :lexical no
;; PDF with LaTeX by default
(defun TeX-PDF-mode-on ()
  "Set the TEX PDF mode on."
  (interactive)
  (TeX-PDF-mode 1))

(add-hook 'tex-mode-hook   'TeX-PDF-mode-on)
(add-hook 'LaTeX-mode-hook 'TeX-PDF-mode-on)
(add-hook 'latex-mode-hook 'TeX-PDF-mode-on)

;; auto-fill mode
(defun auto-fill-mode-on ()
  "Turn on Autofill mode."
  (auto-fill-mode 1))

(add-hook 'tex-mode-hook   'auto-fill-mode-on)
(add-hook 'LaTeX-mode-hook 'auto-fill-mode-on)    ; using AucTeX
(add-hook 'latex-mode-hook 'auto-fill-mode-on)    ; using Emacs Latex
#+end_src

*** Generate TeX file with a hook

The function defined here can be used in an ~after-save-hook~ to generate the
~LaTeX~ document from the ~org~ source and it can be defined on a per file basis.

#+begin_src emacs-lisp :lexical no
;; for LaTeX generation
(defun aqua/org-export-tex-on-save ()
  (interactive)
  (if (eq major-mode 'org-mode)
      (org-latex-export-to-latex t)))
#+end_src

The function can be invoked from local variables in a file with below

#+begin_example
# Local Variables:
# after-save-hook: aqua/org-export-tex-on-save
# End:
#+end_example

** Bibliography and Citations

While writing research papers it is common to insert the links citing the
reference from where the section has been used. ~org-ref~ is a package that helps
with this process.

A simple template to include the citations from a =.bib= file would be as below.

#+begin_src org :tangle no
,#+TITLE: Some Title
,#+AUTHOR: Author Name
,#+OPTIONS: toc:nil \n:nil
,#+STARTUP: fninline
,#+LATEX_COMPILER: xelatex
,#+LATEX_CLASS: foo
,#+LATEX_HEADER: \setlength\parindent{0pt}
,#+LATEX_HEADER: \usepackage[backend=bibtex, style=ieee]{biblatex} \DeclareFieldFormat{apacase}{#1}
,#+LATEX_HEADER: \addbibresource{~/aquamacs.d/bibliography/references.bib}

...
At the end
...

,* References
  :PROPERTIES:
  :UNNUMBERED: t
  :END:
  ,#+LaTeX: \printbibliography[heading=none]
#+end_src

**** Some terminology for reference

It's first off important to realize that the term BibTeX is often used to refer
to various distinct things, and this can lead to some confusion. For example we
typically tell  new users to "use  bibtex for your bibliography"  which usually
just means  don't do it by  hand, but instead  store your references in  a .bib
file   and   use   some   automatic  method   of   formatting   citations   and
bibliography. Additionally,  we also talk  about a  "bibtex file" (i.e.  a .bib
file). Both of  these uses are in  reality quite vague, and part  of the reason
for this question is to distinguish among them more carefully.

We will use the following terms:

- =bibtex= and =biber= are external programs that process bibliography information
  and act (roughly) as the interface between your ~.bib~ file and your LaTeX
  document.
- =natbib= and =biblatex= are LaTeX packages that format citations and
  bibliographies; ~natbib~ works only with ~bibtex~, while _biblatex_ (at the moment)
  works with both _bibtex_ and _biber_.)

*** Biblatex

When it comes to bibliography management  packages, there are three main options
in =LaTeX: bibtex,  natbib and biblatex=. Biblatex is a  modern program to process
bibliography information that provides an easier and more flexible interface and
a better language localization than the other two options.

Here, we are using =biblatex= by default for Latex.

#+begin_src emacs-lisp :lexical no :tangle no
;; using biblatex by default instead of bibtex
(with-eval-after-load "bibtex"
  ;; (bibtex-set-dialect 'biblatex)
  (setq bibtex-dialect 'bibtex))
#+end_src

*** Using org-ref for Bibliographies and Citations

=org-ref=  makes  it easy  to  insert  citations, cross-references,  indexes  and
glossaries as hyper-functional links into org files. The links are fontified so
you can tell them apart from other  links, and each link is clickable to access
functions like opening a pdf, notes or  url associated with the link. Each link
also can be  exported to LaTeX to  build a PDF. For citations,  export to other
formats is  supported by citeproc  for high  quality export to  HTML, markdown,
plain text, or stand-alone (i.e. independent of a bibtex file) LaTeX.

=bibtex= is a builtin package that provides a major mode for editing and
validating the =BibTex= files.

#+begin_src emacs-lisp :lexical no
;; bibtex
(use-package bibtex
  :init
  (progn
    (setq bibtex-align-at-equal-sign t)
    (add-hook 'bibtex-mode-hook
              (lambda ()
                (set-fill-column 120)))))
#+end_src

For more information, see the org-ref manual, or preferably use *M-x*
~org-ref-help~ in =Emacs=.

The following are the supported mappings.

| Key map       | Action                   |
|---------------+--------------------------|
| C-c ]         | Insert a Citation        |
| C-u C-c ]     | Insert a Cross Reference |
| C-u C-u C-c ] | Insert a Label           |

Installation of the ~org-ref~ package for handling bibliographies and citations.

#+begin_src emacs-lisp
;; org-ref: citations, cross-references, indexes, glossaries
;; and bibtex utilities for org-mode
;;
;;;;  use org-ref-insert-site-link
;;    mappings
;;    C-c ]             - insert a citation
;;    C-u C-c ]         - insert a cross-reference
;;    C-uu C-u C-c ]    - for insert a label
;;
(use-package org-ref
  :quelpa
  (org-ref :fetcher github :repo "jkitchin/org-ref")
  :after (org)
  ;; :demand t ;; ensure that it loads so that links work immediately
  :defer t
  :custom-face
  (org-ref-cite-face ((t (:weight bold))))
  :init
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  (add-hook 'org-mode-hook (lambda () (require 'org-ref)))

  :config
  (require 'bibtex)
  (require 'doi-utils)
  (require 'org-ref-isbn)
  (require 'org-ref-pubmed)
  (require 'org-ref-arxiv)
  (setq bibtex-autokey-year-length 4
	    bibtex-autokey-name-year-separator "-"
	    bibtex-autokey-year-title-separator "-"
	    bibtex-autokey-titleword-separator "-"
	    bibtex-autokey-titlewords 2
	    bibtex-autokey-titlewords-stretch 1
	    bibtex-autokey-titleword-length 5
        ;; ox-pandoc is installed as a dependency and it requires the
        ;; pandoc which is Haskell based. The same will throw an error during
        ;; Emacs initialisation and the same can be disabled.
        org-pandoc-check-version nil)


  (setq bibtex-completion-bibliography '("~/aquamacs.d/bibliography/references.bib"
                                         "~/aquamacs.d/bibliography/master.bib")
        bibtex-completion-library-path '("~/aquamacs.d/bibliography/bibtex-pdfs/")
        bibtex-completion-notes-path "~/aquamacs.d/bibliography/notes/"
        bibtex-completion-additional-search-fields '(keywords)
        bibtex-completion-find-additional-pdfs t
        bibtex-completion-display-formats
        '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
          (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
          (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
          (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
          (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")))

  (setq bibtex-user-optional-fields '(("keywords" "Keywords to describe the entry" "")
                                      ("file" "Link to document file." ":")))

  ;; for multiple files
  (setq bibtex-completion-notes-template-multiple-files
        "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n")

  ;; for single file
  (setq bibtex-completion-notes-template-one-file
        "\n** ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :NOTER_DOCUMENT: ${file}\n  :END:")

  ;; opening pdf files
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (cond ((eq system-type 'darwin) (start-process "open" "*open*" "open" fpath))
                ((eq system-type 'gnu/linux) (start-process "evince" "*evince*" "evince" fpath)))))

  ;; Symbols used for indicating the availability of notes and PDF files
  (setq bibtex-completion-pdf-symbol "⌘"
        bibtex-completion-notes-symbol "✎"
        bibtex-completion-pdf-field "File")

  ;; when on mac os, open pdf with system pdf viewer
  ;; (setq bibtex-completion-pdf-open-function
  ;;       (lambda (fpath)
  ;;         (start-process "open" "*open*" "open" fpath)))
  (setq bibtex-completion-pdf-open-function
        (lambda (fpath)
          (call-process "open" nil 0 nil "-a" "/Applications/Skim.app" fpath)))

  (define-key bibtex-mode-map (kbd "C-c o b") 'org-ref-bibtex-hydra/body)
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  (define-key org-mode-map (kbd "C-c o ]") 'org-ref-insert-link-hydra/body)

  (require 'org-ref-ivy)
  ;; add bibtex entries from arxiv.org
  (require 'org-ref-arxiv)
  ;; add bibtex entries from a book ISBN
  (require 'org-ref-isbn)
  ;; add  drag-n-drop urls to create bibtex entries
  (require 'org-ref-url-utils)
  ;; WebOfKnowledge links and queries
  (require 'org-ref-wos))
#+end_src

Org-ref allows to manage citations in org-mode. It's intimidating to use at the
beginning, but we don't need to understand everything about org-ref in order to
handle writing our papers. In fact, much of the required setup has already been
handled above.

To use org-ref, press  =C-c ]= as usually done when  preparing to annotate. Search
by author  name, article name, publication  date etc. Basically anything  in the
~.bib~ entry for the article. Should we  need to select more than article to cite,
=C-<space>= marks an article for citation.  Once we selected the article(s) needed
to  cite,  we can  press  =<Enter>=  and insert  the  default  citation (which  is
typically what we want). If an  alternative citation format is required (perhaps
one without parentheses), pressing =<C-u Enter>= will get the list of all possible
citation formats.

*** Using ivy for org-ref
=ivy= provides completion support for selecting and placing the right =bibtex=
entry into the org document.

#+begin_src emacs-lisp :lexical no
;; org-ref with ivy completion
;;
(use-package org-ref-ivy
  :quelpa
  (:fetcher github :repo "jkitchin/org-ref/blob/master/org-ref-ivy.el")
  :ensure nil
  :init (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
              org-ref-insert-cite-function 'org-ref-cite-insert-ivy
              org-ref-insert-label-function 'org-ref-insert-label-link
              org-ref-insert-ref-function 'org-ref-insert-ref-link
              org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))

;; The function below allows me to consult the pdf of the citation I currently have my cursor on.
(defun my/org-ref-open-pdf-at-point ()
  "Open the pdf for bibtex key under point if it exists."
  (interactive)
  (let* ((results (org-ref-get-bibtex-key-and-file))
         (key (car results))
         (pdf-file (funcall org-ref-get-pdf-filename-function key)))
    (if (file-exists-p pdf-file)
        (find-file pdf-file)
      (message "No PDF found for %s" key))))
#+end_src

*** Using ivy bibtex for managing bibliographies
Searching and managing the bibliographies and citations in Emacs through
~ivy-bibtex~. Documentation for the relevant package is available at [[https://github.com/tmalsburg/helm-bibtex][helm-bibtex]].

#+begin_src emacs-lisp :tangle no
;; search and manage bibliographies in Emacs
(use-package ivy-bibtex
  :defer t
  :quelpa
  (:fetcher github :repo "https://github.com/tmalsburg/helm-bibtex")
  :config
  (defun bibtex-pdf-open-function (fpath)
    (call-process "open" nil 0 nil "-a" "/Applications/Skim.app" fpath))
  (setq bibtex-completion-pdf-open-function 'bibtex-pdf-open-function))
#+end_src

#+begin_src emacs-lisp :lexical no
;; ivy-bibtex
(use-package ivy-bibtex
  :bind*
  ("C-c C-r" . ivy-bibtex)
  :config
  (setq bibtex-completion-pdf-open-function 'bibtex-pdf-open-function)
  (setq ivy-bibtex-default-action #'ivy-bibtex-insert-citation)
  (setq bibtex-completion-format-citation-functions
        '((org-mode      . bibtex-completion-format-citation-org-cite)
          (latex-mode    . bibtex-completion-format-citation-cite)
          (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
          (default       . bibtex-completion-format-citation-default)))
  (ivy-bibtex-ivify-action add-to-reading-list ivy-bibtex-add-to-reading-list)
  (ivy-bibtex-ivify-action show-pdf-in-finder ivy-bibtex-show-pdf-in-finder)
  (ivy-bibtex-ivify-action read-on-remarkable ivy-bibtex-read-on-remarkable)
  (ivy-add-actions 'ivy-bibtex '(("R" ivy-bibtex-add-to-reading-list "add to reading list")))
  (ivy-add-actions 'ivy-bibtex '(("F" ivy-bibtex-show-pdf-in-finder "show in finder")))
  (ivy-add-actions 'ivy-bibtex '(("M" ivy-bibtex-read-on-remarkable "read on remarkable"))))
#+end_src


Some "actions"  have been added  to those  that =ivy-bibtex= itself  provides. The
first action, tied to the "R" key,  is "add to reading list". This action allows
to efficiently add  bibliographic entries to the reading list  in the org agenda
by typing  "R" at a selected  entry. A capture  buffer is presented to  add some
notes. The function that makes this possible is the following:

#+begin_src emacs-lisp
(defun add-to-reading-list (keys &optional fallback-action)
  (let ((link (bibtex-completion-format-citation-org-title-link-to-PDF keys)))
    (kill-new link)
    (org-capture nil "r")))
#+end_src

In order to read  =PDFs=, a nice method is to use [[https://remarkable.com/][Remarkable  tablet]]. It is just a
lot of hassle  to select an entry  from /Zotero/, find the  corresponding PDF, and
then put it on the _Remarkable_  tablet. The function ~read-on-remarkable~ makes all
this a lot easier. Find an entry  with =ivy-bibtex= and send the corresponding PDF
directly from Emacs to the Remarkable using the Remarkable API, =rmapi=.

#+begin_src emacs-lisp
(defun read-on-remarkable (keys &optional fallback-action)
  (let ((fpath (car (bibtex-completion-find-pdf (car keys)))))
    (call-process "rmapi" nil 0 nil "put" fpath)))
#+end_src

Finally, two more functions to open PDF files either in =Finder= or in the PDF
reader =Skim=. These are two functions specifically for _MacOS_.

#+begin_src emacs-lisp
(defun bibtex-pdf-open-function (fpath)
  (call-process "open" nil 0 nil "-a" "/Applications/Skim.app" fpath))

(defun show-pdf-in-finder (keys &optional fallback-action)
  (let ((dir (file-name-directory (car (bibtex-completion-find-pdf (car keys))))))
    (cond
     ((> (length dir) 1)
      (shell-command (concat "open " dir)))
     (t
      (message "No PDF(s) found for this entry: %s" key)))))
#+end_src


*** Literate & annotated bibliography
The core idea  behind literate bibliography is to have  a single structured file
where each entry corresponds to a  reference. Information concerning an entry is
stored as properties  and two subsections allow to enter  abstract and notes. To
ease the  manipulation, =org-bib-mode= provides  a sidebar menu that  displays the
list of  bibliograpic entries and  provide tools  to ease navigation.  Under the
hood, the =org-bib-mode= is the union of two modes:

**** pdf-drop-mode
The =pdf-drop-mode= mode allows to drag and drop a file in order to add it to the bibliography
using its doi that is searched automatically.

#+begin_src emacs-lisp
;; pdf-drop-mode for adding bibliography with drag and drop of pdf
(use-package pdf-drop-mode
  :defer t
  :quelpa (:fetcher github :repo "rougier/pdf-drop-mode")
  :config
  (defun aqua/pdf-process (file doi)
  (message "%s : %s" file doi))
  ;; load the function
  (setq pdf-drop-search-hook #'aqua/pdf-process)
  (pdf-drop-mode))
#+end_src

**** org-imenu
The =org-imenu= mode allows to easily nagivate among entries and allowing various
operations such as filtering entries, moving entries, etc.

#+begin_src emacs-lisp
;; org imenu for easily navigating among entries
(use-package org-imenu
  :defer t
  :quelpa (:fetcher github :repo "rougier/org-imenu"))
#+end_src


Now install the ~org-bib-mode~ which is the minor mode for literate & annotated bibliography.
#+begin_src emacs-lisp
;; org-bib-mode
(use-package org-bib
  :quelpa (:fetcher github :repo "rougier/org-bib-mode"))
#+end_src

*** Prettify org-ref citation links
~org-ref-prettify.el~ is a minor mode for prettifying the ~org-ref~ citation links.

If ~org-ref-prettify-mode~ is enabled, you cannot (and should not try to!) edit
citation links directly. Instead, you can edit a link in the minibuffer using
one of the following methods:

    * moving the point to a link and pressing *C-RET*,
    * right-clicking on a link with your mouse.

In the minibuffer, you can press *TAB* to switch between *&key* positions (if there
are several keys) and the end of the current link.

#+begin_src emacs-lisp :lexical no
;; a minor mode for prettifying the org-ref citation links
(use-package org-ref-prettify
  :after (org)
  :quelpa
  (:fetcher github :repo "https://github.com/alezost/org-ref-prettify.el")
  :hook (org-mode . org-ref-prettify-mode))
#+end_src

*** org-ref exports
~org-ref~ now supports the use of citeproc-el to export citations to non-LaTeX
backends.

#+begin_src emacs-lisp :lexical no
;; for citations to non-latex backends
(use-package citeproc)
#+end_src

*** org-glossary
~org-glossary~ delivers four major pieces of functionality which provides a generalised interface for glossary-like structures, with default support for:

a. Glossary
b. Acronyms
c. Indices
d. Text substitutions

   More details about the package are available at [[https://github.com/tecosaur/org-glossary/blob/master/org-glossary.org][org-glossary]] .

   #+begin_src emacs-lisp :lexical no
   ;; org-glossary
   (use-package org-glossary
     :quelpa (org-glossary :fetcher github :repo "tecosaur/org-glossary"))
   #+end_src

** File opening and associations
The section deals with opening of files with the associated default
applications on the system.

#+begin_src emacs-lisp :lexical no
;; file associations and openings
(add-hook 'org-mode-hook
          #'(lambda ()
             (setq org-file-apps
                   (append '(
                             ("\\.png\\'"  . default)
                             ("\\.jpg\\'"  . default)
                             ("\\.jpeg\\'" . default)
                             ("\\.tiff\\'" . default)
                             ("\\.doc\\'"  . default)
                             ("\\.docx\\'" . default)
                             ("\\.xlsx\\'" . default)
                             ("\\.pptx\\'" . default)
                             ) org-file-apps ))))
#+end_src

** Use ~org-download~ for easier image insertion into the org notes.
Helper for downloading images and dragging into the literate file.

The ~org-download~ package eases the task of downloading or copying images and
attaching them to a document, and it even has an org-download-screenshot
command for taking and inserting screenshots if needed.

#+begin_src emacs-lisp
(use-package org-download
  :after (org)
  :demand t
  :commands (org-download-enable
             org-download-yank
             org-download-screenshot
             org-download-clipboard)
  :hook ((org-mode) . org-download-enable)
  :bind
  ("C-M-y" .
   (lambda (&optional noask)
     (interactive "P")
     (let ((file
            (if (not noask)
                (read-string (format "Filename [%s]: " org-download-screenshot-basename)
                             nil nil org-download-screenshot-basename)
              nil)))
       (org-download-clipboard file))))
  :config
  ;; (require 'org-download)
  (progn
    (setq org-download-screenshot-method     "screencapture -i %s"
          org-download-method                'directory
          org-download-image-dir             "images"
          ;; do not save org-download images nested according to header, save them flat
          org-download-heading-lvl           nil
          org-image-actual-width             300
          org-download-timestamp             "%Y%m%d-%H%M%S_"
          org-download-display-inline-images 'posframe
          org-download-image-attr-list       '("#+ATTR_HTML: :width 80% :align center"))))
#+end_src

* LSP integration for LaTeX

We can harness the power of *LSP* for providing auto-completion to latex by
integrating the tex-mode with lsp.

Set the =lsp-server= value to =digestif=. The default is =texlab=.
#+BEGIN_SRC emacs-lisp
;; set lsp server for tex files
(setq lsp-tex-server 'digestif)
#+END_SRC

#+begin_src emacs-lisp :lexical no
;; lsp latex integration
(use-package lsp-latex
  :quelpa
  (lsp-latex :fetcher github :repo "ROCKTAKEY/lsp-latex")
  :hook ((tex-mode    . lsp-deferred)
         (latex-mode  . lsp-deferred)
         (LaTeX-mode  . lsp-deferred)
         (bibtex-mode . lsp-deferred))
  :config
  (setq lsp-latex-forward-search-executable "/Applications/Skim.app/Contents/SharedSupport/displayline"
        lsp-latex-forward-search-args       '("%l" "%p" "%f")))
#+end_src


* LaTeX font locking with Engrave Faces
Per documentation:
There are some great packages for Exporting buffers to particular formats, but
each one seems to reinvent the core mechanism of processing the font-lock in a
buffer such that it can be exported to a particular format.

This package aims to produce a versatile generic core which can process a
fontified buffer and elegantly pass the data to any number of backends which can
deal with specific output formats.

#+begin_src emacs-lisp :lexical no
;; Engrave Faces for latex font lock
(use-package engrave-faces
  :quelpa
  (engrave-faces :fetcher github :repo "tecosaur/engrave-faces"))
#+end_src

To use this, simply install the package and set ~org-latex-src-block-backend~ (a
rename of ~org-latex-listings~ to better reflect its usage) to ~engraved~.

On a file basis specify:
#+begin_src emacs-lisp :lexical no :tangle no
(setq org-latex-src-block-backend 'engraved)
#+end_src

While this is  sufficient for getting started, this new  backend also allows for
some  new options.  The theme  used  for engraving  a  source block  can be  set
globally with  the new variable  ~org-latex-engraved-theme~, or per-file  with the
~#+latex_engraved_theme~ keyword.  It takes  either the  name of  a theme,  or the
symbol _t_ as a stand-in for the current theme.

The theme may also be set on a per-block level using the LaTeX attribute ~:engraved-theme~.

#+begin_src emacs-lisp :tangle no
(message "font locking demo using the %s theme", doom-vibrant)
#+end_src

#+begin_src emacs-lisp :tangle no
(message "font locking demo using the %s theme", solarized-dark)
#+end_src

Here is an example of using the above

#+begin_example
,#+title: Engraving source blocks
,#+latex_engraved_theme: modus-operandi

,#+begin_src emacs-lisp
(message "look ma, some %s" 'code)
,#+end_src

,#+attr_latex: :engraved-theme modus-vivendi
,#+begin_src shell
echo "This is shell code"
,#+end_src
#+end_example

* org mode extras from org-contrib

~org-plus-contrib~ now resides outside of the org-mode package and the same can
be installed separately

#+begin_src emacs-lisp
;; org-plus-contrib
(use-package org-plus-contrib
  :after (org)
  :quelpa (org-plus-contrib
           :fetcher git
           :url "https://git.sr.ht/~bzg/org-contrib"
           :files ("lisp/*.el")))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package org-contrib
  :straight (org-contrib
	     :type git
	     :repo "https://git.sr.ht/~bzg/org-contrib"
	     :build t)
  :after (org))
#+end_src

~org-plus-contrib~ contains files that are included with Emacs plus all
contributions from the org-mode repository.

org mode has some convenience functions for org export, that are not a part of
core org mode. Calling ~ox-extras-activate~ by passing a list of symbols naming
extras, will be installed globally in the org session.

A brief explanation of [[https://orgmode.org/worg/org-hacks.html][org-mode hacks]] is available that provides more information.

** ox-extra
~ox-extra~ is a library from the ~org-plus-contrib~ package and it adds extra
keywords and tagging functionality for org export. For omitting headlines when
exporting from org mode to LaTeX, use the below globally or in the specific org
configuration.

#+begin_src emacs-lisp :lexical no
;; to let ignore any headings tagged with :ignoreheading:ignore:
;; while at the sametime not ignoring their content
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines latex-header-blocks))
#+end_src

As an example the below will be the one that will not export heading, but
execute the contents of the block

#+begin_src org :tangle no
#+EXCLUDE_TAGS: noexport

 * Bibliography :ignoreheading:ignore:
#+BEGIN_EXPORT latex
\newpage
\printbibliography[title=Bibliography]
#+END_EXPORT
#+end_src

*** Annotated bibliography with orgmode

org-bibtex is responsible for handling bibtex citations in orgmode. In the
=org-contrib= library there is an addition (~org-bibtex-extras.el~) by ~Eric
Schulte~. This may be used as an easy way to manage an annotated bibliography in
orgmode.

#+begin_src emacs-lisp :lexical no
;; For managing and exporting citations
;; (require 'org-bibtex)

;; export citations
;; (require 'ox-bibtex)

;; set the defailt bibtex database
;; (setq org-bibtex-file "~/aquamacs.d/bibliography/master.bib")
#+end_src

 There are three basic commands under =org-bibtex=:

 * ~M-x org-bibtex~ to export the citations in a bibtex file
 * ~M-x org-bibtex-yank~ to import a citation from bibtex text (clipboard)
 * ~M-x org-bibtex-check-all~ to check the validity of the entries


* Org mode addon org-special-block-extras

=org-special-block-extras= provides some extra Org-mode mark-up
goodies. Additional information can be referenced from the [[https://alhassy.github.io/emacs.d/][link]].
#+begin_src emacs-lisp :lexical no
;; A number of new custom blocks and link types for Emacs' Org-mode ^_^
(use-package org-special-block-extras
  :after (org)
  :quelpa
  (:fetcher github :repo "alhassy/org-special-block-extras")
  ;;:defer t
  :hook (org-mode . org-special-block-extras-mode)
  ;; all relevant Lisp functions are prefixed ‘o-’; e.g., `o-docs-insert'.
  :custom
  (org-special-block-extras--docs-libraries (expand-file-name "org/personal/documentation.org" user-emacs-directory))
  ;; details heading “flash pink” whenever the user hovers over them?
  (org-html-head-extra (concat org-html-head-extra "<style>  summary:hover {background:pink;} </style>"))
  ;; use short names like ‘defblock’ instead of the fully qualified name
  ;; ‘org-special-block-extras--defblock’
  (org-special-block-extras-short-names))
#+end_src

* Appendix
Here, some general guidelines and tips that are useful are all placed. These do
not get tangled.

** For handling C++ code
For compiling and running the =c++= programs within org src blocks, =header-args=
can be supplied which can have all the custom compilation and linker options
which a standard =c++= program needs.

*** OpenCV
:PROPERTIES:
:header-args:c++: :libs . "-L/usr/local/lib -lopencv_gapi -lopencv_stitching -lopencv_alphamat -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_intensity_transform -lopencv_line_descriptor -lopencv_mcc -lopencv_quality -lopencv_rapid -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core"
:END:

As an example consider the ~opencv~ code in =c++= here.

#+HEADER: :includes (list "<iostream>" "<opencv2/opencv.hpp>")
#+HEADER: :exports both
#+HEADER: :flags -std=c++17
#+begin_src cpp :tangle no
using namespace cv;
using namespace std;

int main( int argc, char** argv )
{
  cout << "OpenCV version : " << CV_VERSION << endl;
  cout << "Major version : " << CV_MAJOR_VERSION << endl;
  cout << "Minor version : " << CV_MINOR_VERSION << endl;
  cout << "Subminor version : " << CV_SUBMINOR_VERSION << endl;
}
#+end_src

The results obtained from the above code block.
#+begin_text
#+RESULTS:
| OpenCV   | version | : | 4.5.0 |
| Major    | version | : |     4 |
| Minor    | version | : |     5 |
| Subminor | version | : |     0 |
#+end_text

Here, we passed the linker options for ~opencv~ obtained as a result of the
command ~pkg-config --cflags --libs opencv~ to _PROPERTIES_ of the section. If we
want to pass the options globally, we can have the below snippet for local
variables at the end of the file which basically sets the values of the linkers
to ~org-babel-default-header-args:C++~.

#+begin_src org :tangle no
# Local Variables:
# eval: (setq-local org-babel-default-header-args:c++ '((:libs . "-L/usr/local/lib -lopencv_gapi -lopencv_stitching -lopencv_alphamat -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dnn_superres -lopencv_dpm -lopencv_highgui -lopencv_face -lopencv_fuzzy -lopencv_hfs -lopencv_img_hash -lopencv_intensity_transform -lopencv_line_descriptor -lopencv_mcc -lopencv_quality -lopencv_rapid -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_superres -lopencv_optflow -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_videostab -lopencv_videoio -lopencv_xfeatures2d -lopencv_shape -lopencv_ml -lopencv_ximgproc -lopencv_video -lopencv_xobjdetect -lopencv_objdetect -lopencv_calib3d -lopencv_imgcodecs -lopencv_features2d -lopencv_flann -lopencv_xphoto -lopencv_photo -lopencv_imgproc -lopencv_core")))
# End:
#+end_src

** LaTeX import *.sty files
For importing the ~*.sty~ files into LaTeX files, we can define a custom wrapper
function. Ref: [[https://sqrtminusone.xyz/configs/emacs/#import-dot-sty][sty file import]]

#+begin_src emacs-lisp :lexical no
;; custom functions for importing the *.sty files into LaTeX
(defun aqua/list-sty-files ()
  (reverse
   (sort
    (seq-filter
     (lambda (file) (if (string-match ".*\.sty$" file) 1 nil))
     (directory-files
      (seq-some
       (lambda (dir)
	 (if (and
	      (f-directory-p dir)
	      (seq-some
	       (lambda (file) (string-match ".*\.sty$" file))
	       (directory-files dir))
	      ) dir nil))
       (list "./styles" "../styles/" "." "..")) :full))
    (lambda (f1 f2)
      (let ((f1b (file-name-base f1))
	    (f1b (file-name-base f2)))
	(cond
	 ((string-match-p ".*BibTex" f1) t)
	 ((and (string-match-p ".*Locale" f1) (not (string-match-p ".*BibTex" f2))) t)
	 ((string-match-p ".*Preamble" f2) t)
	 (t (string-lessp f1 f2))))))))

(defun aqua/import-sty ()
  (interactive)
  (insert
   (apply #'concat
	  (cl-mapcar
	   (lambda (file) (concat "\\usepackage{"
                              (file-name-sans-extension (file-relative-name file default-directory)) "}\n"))
	   (aqua/list-sty-files)))))

(defun aqua/import-sty-org ()
  (interactive)
  (insert
   (apply #'concat
	  (cl-mapcar
	   (lambda (file) (concat "#+LATEX_HEADER: \\usepackage{" (file-name-sans-extension (file-relative-name file default-directory)) "}\n"))
	   (aqua/list-sty-files)))))
#+end_src

* For exploring further
Here are some of the items which I would like to explore, currently categorised
as =TODO= items.

Explore =CV= creation
TODO https://titan-c.gitlab.io/org-cv/

* Finally profiling
Check the time the module takes while loading
#+begin_src emacs-lisp
;; report the time taken by org-config to load
(aqua/report-time "org-config")
#+end_src
