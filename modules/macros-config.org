
* Macros

* Macro definitions
Here, we define any reusable macros that may be used anywhere down the
configuration.

** Macro for company backend setup
A simple macro specifically for incorporating the company
backends. This will be helpful for adding any backends to the =company-backends=.

#+begin_src emacs-lisp :lexical no
(defmacro set-company-backends-for! (mode &rest backends)
  "Set `company-backends' for MODE with BACKENDS."
  `(add-hook (intern (format "%s-hook" ',mode))
             (lambda ()
               (company-mode +1)
               (setq-local company-backends ',backends))))


#+end_src

** Macro for silently running a function
This can be helpful to run a function silently.

#+begin_src emacs-lisp :lexical no
(defmacro shut-up! (func)
  "Silence FUNC."
  `(advice-add ,func :around
               (defun ,(intern (format "shut-up-%s" func)) (f &rest args)
                 (let ((inhibit-message t))
                   (ignore-errors (apply f args))))))
#+end_src


** Macro for lazy evaluation

#+begin_src emacs-lisp :lexical no
(defmacro lazy! (&rest body)
  "Delay the evaluation of BODY."
  `(lambda ()
     ,@body))
#+end_src
