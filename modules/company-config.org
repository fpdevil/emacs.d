#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file
#+end_src

* Company mode for completion                                           :TOC:
  - [[#load-company-mode][Load company mode]]
  - [[#company-quickhelp-for-providing-additional-completion-help][Company quickhelp for providing additional completion help]]
  - [[#company-box-for-providing-additional-completion-item-help-for-popups][Company box for providing additional completion item help for popups]]
  - [[#all-additional-company-auxiliary-packages-and-settings][All additional company auxiliary packages and settings]]
  - [[#better-org-babel-with-fast-block-insertion][Better Org Babel with Fast Block Insertion]]
  - [[#synchronising-company-with-pcomplete-for-org-mode][Synchronising company with pcomplete for org-mode]]
- [[#tabnine-completions][TabNine Completions]]

** Load company mode
#+begin_src emacs-lisp
(use-package company
  :ensure t

  :delight company-mode

  :hook ((prog-mode . company-mode)
         (org-mode  . company-mode))

  :init
  (setq company-show-quick-access t
	    company-idle-delay 0.3        ; time for activate completion
	    company-echo-delay 0.01
	    company-require-match 'never

	    ;; edge of the completion list cycles around.
	    company-selection-wrap-around t

	    company-minimum-prefix-length 1
	    company-tooltip-align-annotations t

        ;; Display candidates according to importance,
        ;; then case, then in-buffer frequency
	    company-transformers '(company-sort-by-backend-importance
                               company-sort-prefer-same-case-prefix
                               company-sort-by-occurrence)

        ;; custom settings for frontend
        company-frontends
        '(company-pseudo-tooltip-unless-just-one-frontend ; always show candidates in overlay tooltip
          company-preview-if-just-one-frontend            ; show selected candidate docs in echo area
          company-echo-metadata-frontend                  ; show selected candidate docs in echo area
          )

        ;; Only search the current buffer for `company-dabbrev' (a backend that
        ;; suggests text your open buffers). This prevents Company from causing
        ;; lag once you have a lot of buffers open.
        company-dabbrev-other-buffers nil
        company-dabbrev-code-other-buffers nil
        ;; Make `company-dabbrev' fully case-sensitive, for improved UX with
        ;; domain-specific words with particular casing.
	    ;; do not downcase completions by default.
	    company-dabbrev-downcase nil
	    ;; provide the ‘correct’ casing even while writing
	    ;; something with the ‘wrong’ case (set to t)
	    company-dabbrev-ignore-case nil)

  :config
  ;; (global-company-mode t)
  ;; (progn
  ;;   (add-hook 'after-init-hook 'global-company-mode))
  ;;
  ;; Adding yasnippet support for all company backends
  ;; https://github.com/syl20bnr/spacemacs/pull/179
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")
  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas)
            (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append
       (if (consp backend)
           backend
         (list backend))
       '(:with company-yasnippet))))

  ;; adjust the company backend with yasnippet
  (setq company-backends
        (mapcar #'company-mode/backend-with-yas company-backends))

  ;;
  ;; Keyboard TAB Binding
  ;; :bind (:map company-mode-map
  ;; 	("<tab>". tab-indent-or-complete)
  ;; 	("TAB"  . tab-indent-or-complete))

  :custom
  (set-face-attribute 'company-tooltip nil
                      :foreground "black" :background "lightgrey")
  (set-face-attribute 'company-tooltip-common nil
                      :foreground "black" :background "lightgrey")
  (set-face-attribute 'company-tooltip-common-selection nil
                      :foreground "white" :background "steelblue")
  (set-face-attribute 'company-tooltip-selection nil
                      :foreground "black" :background "steelblue")
  (set-face-attribute 'company-preview-common nil
                      :background nil :foreground "lightgrey" :underline t)
  (set-face-attribute 'company-scrollbar-fg nil
                      :background "orange")
  (set-face-attribute 'company-scrollbar-bg nil
                      :Background "gray40"))
#+end_src

** Company quickhelp for providing additional completion help
#+begin_src emacs-lisp
  (use-package company-quickhelp
      :ensure t
      :diminish
      :after company
      :init
      (setq company-quickhelp-delay nil)
      :config
      (company-quickhelp-mode t)
      :bind (:map company-active-map
		  ("M-h" . company-quickhelp-manual-begin)))
#+end_src

** Company box for providing additional completion item help for popups

The package ~company-box~ is a =company= front-end offering colours, icons,
documentation and so on which is quite pleasant.

Install the =all-the-icons= package for displaying fonts
#+begin_src emacs-lisp :lexical no
;; eager macro-expansion failure: (void-function all-the-icons-faicon)
;; need to avoid error
(use-package all-the-icons
  :ensure t)
#+end_src

Declare all the icons for the variable ~company-box-icons-all-the-icons~ is quite
verbose in Elisp, so that rather than defining each one individually in the
config we can write into an org table and use the reference.

#+name: company-box-icons
| Type          | Icon                   | Color  |
|---------------+------------------------+--------|
| Unknown       | find_in_page             | purple |
| Text          | text_fields             | green  |
| Method        | functions              | red    |
| Function      | functions              | red    |
| Constructor   | functions              | red    |
| Field         | functions              | red    |
| Variable      | adjust                 | blue   |
| Class         | class                  | red    |
| Interface     | settings_input_component | red    |
| Module        | view_module             | red    |
| Property      | settings               | red    |
| Unit          | straighten             | red    |
| Value         | filter_1                | red    |
| Enum          | plus_one                | red    |
| Keyword       | filter_center_focus      | red    |
| Snippet       | short_text              | red    |
| Color         | color_lens              | red    |
| File          | insert_drive_file        | red    |
| Reference     | collections_bookmark    | red    |
| Folder        | folder                 | red    |
| EnumMember    | people                 | red    |
| Constant      | pause_circle_filled      | red    |
| Struct        | streetview             | red    |
| Event         | event                  | red    |
| Operator      | control_point           | red    |
| TypeParameter | class                  | red    |
| Template      | short_text              | green  |
| ElispFunction | functions              | red    |
| ElispVariable | check_circle            | blue   |
| ElispFeature  | stars                  | orange |
| ElispFace     | format_paint            | pink   |


#+name: generate-company-box-icons
#+headers: :tangle no :noweb yes :exports none :cache yes
#+header: :wrap "src emacs-lisp :exports none :tangle no"
#+begin_src emacs-lisp :var table=company-box-icons
(mapconcat (lambda (row)
             (format "(%s . ,(all-the-icons-material \"%s\" :face 'all-the-icons-%s))"
                     (car row)
                     (cadr row)
                     (caddr row)))
           table
           "\n")
#+end_src

#+RESULTS[f6e757b42e12448c9e7a8cd97b69b85d092b0b39]: generate-company-box-icons
#+begin_src emacs-lisp :exports none :tangle no
(Unknown . ,(all-the-icons-material "find_in_page" :face 'all-the-icons-purple))
(Text . ,(all-the-icons-material "text_fields" :face 'all-the-icons-green))
(Method . ,(all-the-icons-material "functions" :face 'all-the-icons-red))
(Function . ,(all-the-icons-material "functions" :face 'all-the-icons-red))
(Constructor . ,(all-the-icons-material "functions" :face 'all-the-icons-red))
(Field . ,(all-the-icons-material "functions" :face 'all-the-icons-red))
(Variable . ,(all-the-icons-material "adjust" :face 'all-the-icons-blue))
(Class . ,(all-the-icons-material "class" :face 'all-the-icons-red))
(Interface . ,(all-the-icons-material "settings_input_component" :face 'all-the-icons-red))
(Module . ,(all-the-icons-material "view_module" :face 'all-the-icons-red))
(Property . ,(all-the-icons-material "settings" :face 'all-the-icons-red))
(Unit . ,(all-the-icons-material "straighten" :face 'all-the-icons-red))
(Value . ,(all-the-icons-material "filter_1" :face 'all-the-icons-red))
(Enum . ,(all-the-icons-material "plus_one" :face 'all-the-icons-red))
(Keyword . ,(all-the-icons-material "filter_center_focus" :face 'all-the-icons-red))
(Snippet . ,(all-the-icons-material "short_text" :face 'all-the-icons-red))
(Color . ,(all-the-icons-material "color_lens" :face 'all-the-icons-red))
(File . ,(all-the-icons-material "insert_drive_file" :face 'all-the-icons-red))
(Reference . ,(all-the-icons-material "collections_bookmark" :face 'all-the-icons-red))
(Folder . ,(all-the-icons-material "folder" :face 'all-the-icons-red))
(EnumMember . ,(all-the-icons-material "people" :face 'all-the-icons-red))
(Constant . ,(all-the-icons-material "pause_circle_filled" :face 'all-the-icons-red))
(Struct . ,(all-the-icons-material "streetview" :face 'all-the-icons-red))
(Event . ,(all-the-icons-material "event" :face 'all-the-icons-red))
(Operator . ,(all-the-icons-material "control_point" :face 'all-the-icons-red))
(TypeParameter . ,(all-the-icons-material "class" :face 'all-the-icons-red))
(Template . ,(all-the-icons-material "short_text" :face 'all-the-icons-green))
(ElispFunction . ,(all-the-icons-material "functions" :face 'all-the-icons-red))
(ElispVariable . ,(all-the-icons-material "check_circle" :face 'all-the-icons-blue))
(ElispFeature . ,(all-the-icons-material "stars" :face 'all-the-icons-orange))
(ElispFace . ,(all-the-icons-material "format_paint" :face 'all-the-icons-pink))
#+end_src



With the above defined we can now set the below for options:

#+begin_src emacs-lisp
(use-package company-box
  :straight (:build t)
  :after (company all-the-icons)
  :config
  (setq company-box-show-single-candidate t
        company-box-backends-colors       nil
        company-box-max-candidates        50
        company-box-icons-alist           'company-box-icons-all-the-icons
        company-box-icons-all-the-icons
        (let ((all-the-icons-scale-factor 0.8))
          `(
            <<generate-company-box-icons()>>))))
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp
;; Show pretty icons
(use-package company-box
  :after (company)
  :diminish
  :hook
  (company-mode . company-box-mode)
  :init
  (setq company-box-icons-alist 'company-box-icons-all-the-icons)
  :config
  (setq company-box-backends-colors nil)
  (setq company-box-show-single-candidate t)
  (setq company-box-max-candidates 50)

  (defun company-box-icons--elisp (candidate)
    (when (derived-mode-p 'emacs-lisp-mode)
      (let ((sym (intern candidate)))
        (cond ((fboundp sym) 'Function)
              ((featurep sym) 'Module)
              ((facep sym) 'Color)
              ((boundp sym) 'Variable)
              ((symbolp sym) 'Text)
              (t . nil)))))

  (with-eval-after-load 'all-the-icons
    (declare-function all-the-icons-faicon 'all-the-icons)
    (declare-function all-the-icons-fileicon 'all-the-icons)
    (declare-function all-the-icons-material 'all-the-icons)
    (declare-function all-the-icons-octicon 'all-the-icons)
    (setq company-box-icons-all-the-icons
          `((Unknown       . ,(all-the-icons-material "find_in_page" :height 0.7 :v-adjust -0.15))
            (Text          . ,(all-the-icons-faicon "book"  :height 0.68 :v-adjust -0.15))
            (Method        . ,(all-the-icons-faicon "cube"  :height 0.7  :v-adjust -0.05 :face 'font-lock-constant-face))
            (Function      . ,(all-the-icons-faicon "cube"  :height 0.7  :v-adjust -0.05 :face 'font-lock-constant-face))
            (Constructor   . ,(all-the-icons-faicon "cube"  :height 0.7  :v-adjust -0.05 :face 'font-lock-constant-face))
            (Field         . ,(all-the-icons-faicon "tags"  :height 0.65 :v-adjust -0.15 :face 'font-lock-warning-face))
            (Variable      . ,(all-the-icons-faicon "tag"   :height 0.7  :v-adjust -0.05 :face 'font-lock-warning-face))
            (Class         . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
            (Interface     . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01))
            (Module        . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.15))
            (Property      . ,(all-the-icons-octicon "package" :height 0.7 :v-adjust -0.05 :face 'font-lock-warning-face)) ;; Golang module
            (Unit          . ,(all-the-icons-material "settings_system_daydream" :height 0.7 :v-adjust -0.15))
            (Value         . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'font-lock-constant-face))
            (Enum          . ,(all-the-icons-material "storage" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-orange))
            (Keyword       . ,(all-the-icons-material "filter_center_focus" :height 0.7 :v-adjust -0.15))
            (Snippet       . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))
            (Color         . ,(all-the-icons-material "palette" :height 0.7 :v-adjust -0.15))
            (File          . ,(all-the-icons-faicon "file-o" :height 0.7 :v-adjust -0.05))
            (Reference     . ,(all-the-icons-material "collections_bookmark" :height 0.7 :v-adjust -0.15))
            (Folder        . ,(all-the-icons-octicon "file-directory" :height 0.7 :v-adjust -0.05))
            (EnumMember    . ,(all-the-icons-material "format_align_right" :height 0.7 :v-adjust -0.15 :face 'all-the-icons-blueb))
            (Constant      . ,(all-the-icons-faicon "tag" :height 0.7 :v-adjust -0.05))
            (Struct        . ,(all-the-icons-faicon "clone" :height 0.65 :v-adjust 0.01 :face 'font-lock-constant-face))
            (Event         . ,(all-the-icons-faicon "bolt" :height 0.7 :v-adjust -0.05 :face 'all-the-icons-orange))
            (Operator      . ,(all-the-icons-fileicon "typedoc" :height 0.65 :v-adjust 0.05))
            (TypeParameter . ,(all-the-icons-faicon "hashtag" :height 0.65 :v-adjust 0.07 :face 'font-lock-const-face))
            (Template      . ,(all-the-icons-faicon "code" :height 0.7 :v-adjust 0.02 :face 'font-lock-variable-name-face))))))
#+end_src

** All additional company auxiliary packages and settings

Here we define some custom settings for interacting yas with company mode.

#+begin_src emacs-lisp
;; custom functions
(defun company-yasnippet-or-completion ()
  (interactive)
  (or (do-yas-expand)
	  (company-complete-common)))

(defun check-expansion ()
  (save-excursion
	(if (looking-at "\\_>") t
	  (backward-char 1)
	  (if (looking-at "\\.") t
	    (backward-char 1)
	    (if (looking-at "::") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
	(yas/expand)))

(defun tab-indent-or-complete ()
  "Expand the Snippet or Indent or Complete."
  (interactive)
  (if (minibufferp)
	  (minibuffer-complete)
	(if (or (not yas/minor-mode)
		    (null (do-yas-expand)))
	    (if (check-expansion)
		    (company-complete-common)
		  (indent-for-tab-command)))))

(global-set-key (kbd "M-o") 'tab-indent-or-complete)
#+end_src

** Better Org Babel with Fast Block Insertion
Insert Emacs org blocks with completion (via company mode). When enabled, the
character "<" triggers company completion of org blocks.
#+begin_src emacs-lisp
;; Insert Emacs org blocks with completion (via company mode).
(use-package company-org-block
  :ensure t
  :custom
  (company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline
  :hook ((org-mode . (lambda ()
                       (setq-local company-backends '(company-org-block))
                       (company-mode +1)))))
#+end_src

** Synchronising company with pcomplete for org-mode
~Pcomplete~ integrates ~company~ such that while editing the ~headers~, ~processes~,
~title~ and ~author~ as well as any other options in the ~org mode~ starting with
*#+*, it will list all of the available options.

#+begin_src emacs-lisp :lexical no
;; sync pcomplete with company for org-mode completions
(defun trigger-org-company-complete ()
  "Begins company-complete in org-mode buffer after pressing #+ chars."
  (interactive)
  (if (string-equal "#" (string (preceding-char)))
      (progn
        (insert "+")
        (company-complete))
    (insert "+")))

(eval-after-load 'org '(define-key org-mode-map
	                     (kbd "+") 'trigger-org-company-complete))
#+end_src

* TabNine Completions
There is a company-mode backend for [[https://tabnine.com/][TabNine]], the all-language auto completion
framework based on *AI*. It uses machine learning to provide responsive,
reliable, and relevant suggestions.
Not using this as I have not found it to add any value.
#+begin_src emacs-lisp :lexical no :tangle no
;; company mode for tabnine
(use-package company-tabnine
  :ensure t
  :config
  (add-to-list 'company-backends #'company-tabnine)
  ;; https://emacs.stackexchange.com/questions/60738/using-company-mode-to-complete-sentence
  ;; The free version of TabNine is good enough,
  ;; and below code is recommended that TabNine not always
  ;; prompt me to purchase a paid version in a large project.
  (defadvice company-echo-show (around disable-tabnine-upgrade-message activate)
    (let ((company-message-func (ad-get-arg 0)))
      (when (and company-message-func
                 (stringp (funcall company-message-func)))
        (unless (string-match "The free version of TabNine only indexes up to" (funcall company-message-func))
          ad-do-it)))))
#+end_src
