#+begin_src emacs-lisp :exports none
;;; -*- lexical-binding: t -*-
;;; addons-config.el --- Addon package configuration
;;
;; Author: Sampath Singamsetty
;;
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file
;; addons-config.org
;;
;;; Commentary:
;; This module contains all auxiliary packages that are more of helpers
;; and would facilitate working with emacs. They do not hamper the functioning
;; of Emacs the packages are missing
;;
;;; Code:
;;;
#+end_src

#+TITLE: Addon Configuration
#+AUTHOR: Sampath Singamsetty
#+STARTUP: indent

* Introduction                                                        :TOC_2:
- [[#addons-configuration][Addons Configuration]]
  - [[#compilation][Compilation]]
  - [[#visual-line-mode-enabling-and-leaving-some-padding-of-text-in-windows][Visual line mode enabling and leaving some padding of text in windows]]
  - [[#display-line-numbers][Display line numbers]]
  - [[#restart-emacs][Restart *Emacs*]]
  - [[#comment-in-a-smart-way][Comment in a smart way]]
  - [[#awesome-tabs][Awesome Tabs]]
  - [[#beacon][Beacon]]
  - [[#highlight-todo][Highlight TODO]]
  - [[#fira-code-ligatures][Fira Code ligatures]]
  - [[#rainbow-colors][Rainbow colors]]
  - [[#discover-the-major-modes][Discover the major modes]]
  - [[#expand-region][Expand region]]
  - [[#highlight-indentation][Highlight indentation]]
  - [[#web-sequence-diagrams][Web Sequence Diagrams]]
  - [[#drag-stuff][Drag stuff]]
  - [[#csv-file-handling][CSV file handling]]
  - [[#word-count][Word count]]
  - [[#whitespace-cleanup][Whitespace cleanup]]
  - [[#code-indentation-with-aggressive-indentation][Code Indentation with aggressive indentation]]
  - [[#code-formatting-with-apheleia][Code formatting with Apheleia]]
  - [[#try-emacs-packages-without-installing-them][TRY Emacs packages without installing them.]]
  - [[#multiple-cursors][Multiple cursors]]
  - [[#vi-tilde-fringe][Vi tilde fringe]]
  - [[#display-keycast][Display keycast]]
  - [[#highlight-quoted-symbols][highlight quoted symbols]]
  - [[#track-last-uptime-of-emacs][Track last uptime of Emacs]]
  - [[#preview-links-under-cursor][Preview links under cursor]]
  - [[#helpful---editor-documentation-with-contextual-information][Helpful - Editor Documentation with Contextual Information]]
  - [[#set-macos-transparent-title-bar][Set MacOS transparent title bar]]
  - [[#go-to-the-last-changed-position][Go to the last changed position]]
  - [[#paragraph-justification][Paragraph justification]]
- [[#some-additional-useful-packages-and-stuff][Some additional useful packages and stuff]]
  - [[#command-log-mode][command-log-mode]]
  - [[#highlight-numbers-in-source-code][Highlight numbers in source code]]
- [[#cursor-shape-and-type][Cursor shape and type]]
- [[#plz---an-http-library-for-emacs][plz - An HTTP library for Emacs]]
- [[#elisp-based-addons][elisp based addons]]
  - [[#highlight-defined][highlight-defined]]
- [[#colour-identifiers-mode][Colour identifiers mode]]
- [[#profiling][Profiling]]
  - [[#final-report][Final report]]

* Addons Configuration
In this module some of the features that are not available or enabled by
default in =Emacs= are configured and used. We will configure helper functions
and packages some of which may be just fancy while some are super useful.

** Compilation
Set up the compile package and ensure that compilation output automatically scrolls.
#+begin_src emacs-lisp
;; Set up the compile package and ensure that compilation output automatically scrolls.
(use-package compile
  :custom
  (compilation-scroll-output t))

(defun auto-recompile-buffer ()
  (interactive)
  (if (member #'recompile after-save-hook)
	  (remove-hook 'after-save-hook #'recompile t)
    (add-hook 'after-save-hook #'recompile nil t)))
#+end_src

** Visual line mode enabling and leaving some padding of text in windows
In case if we would like to see lines wrapped nicely (similar to other popular
text editors) at the word-border instead of lines which either get cut at the
end or in the middle of a word, the same can be achieved using
global-visual-line-mode.

#+begin_src emacs-lisp
;; leave some padding of text in windows
(use-package visual-fill-column
  :ensure t
  :defer 3
  :commands visual-fill-column-mode
  :hook (visual-line-mode . visual-fill-column-mode)
  :custom ((visual-fill-column-center-text             t)
           (visual-fill-column-fringes-outside-margins nil))
  :config
  ;; (visual-fill-column-width 120)
  (setq-default visual-fill-column-width
                ;; taking Emacs line numbers into account
                (+ (if (boundp 'display-line-numbers) 40 0)
                   fill-column)))

;; bent arrows at the end and start of long lines.
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
;; diminish from modeline
;; (diminish 'visual-line-mode)
;; keep Visual line as default in editor
;; (global-visual-line-mode 1)
#+end_src

** Display line numbers

This built-in package provides a minor interface for ~display-line-numbers~.

#+begin_src emacs-lisp :lexical no
;; display-line-numbers is replacement of old linum-mode
(use-package display-line-numbers
  :if (boundp 'display-line-numbers)
  :custom (display-line-numbers-widen t)
  :hook ((prog-mode conf-mode) . display-line-numbers-mode)
  :config (define-advice goto-line (:before (&rest _) preview-line-number)
            "Preview line number when prompting for goto-line."
            (interactive
             (lambda (spec)
               (if (and (boundp 'display-line-numbers)
                        (not display-line-numbers))
                   (unwind-protect
                       (progn (display-line-numbers-mode)
                              (advice-eval-interactive-spec spec))
                     (display-line-numbers-mode -1))
                 (advice-eval-interactive-spec spec))))))
#+end_src

** Restart *Emacs*
A simpler package for restarting *Emacs* from within *Emacs*
#+begin_src emacs-lisp
;; restart Emacs for within Emacs
(use-package restart-emacs
  :defer 3)
#+end_src

** Comment in a smart way
The package =smart-comment= provides a smarter way for commenting in Emacs.
#+begin_src emacs-lisp
;; smart commenting with M-;
(use-package smart-comment
  :defer 3
  :bind ("M-;" . smart-comment))
#+end_src

*** Banner comment
A Trivial Emacs package to format a comment as a banner. Will reformat an existing banner.

#+begin_src emacs-lisp :lexical no
;; banner comment
(use-package banner-comment
  :defer nil
  :quelpa
  (banner-comment :fetcher github :repo "WJCFerguson/banner-comment")
  :commands (banner-comment)
  :bind ("C-c c b" . banner-comment))
#+end_src

*** Comment boxes
Draw a box comment around the region but arrange for the region
to extend to at least the fill column. Place the point after the
comment box.

#+begin_src emacs-lisp :lexical no
;; comment box
(defun my/comment-box (b e)
  "Draw a box comment around the region but arrange for the region
to extend to at least the fill column. Place the point after the
comment box.

Source: http://irreal.org/blog/?p=374

To do fancy stuff like removing boxes, centering them, etc
see https://github.com/lewang/rebox2/blob/master/rebox2.el"
  (interactive "r")
  (let ((e (copy-marker e t)))
    (goto-char b)
    (end-of-line)
    (insert-char ?  (- fill-column (current-column)))
    (comment-box b e 1)
    (goto-char e)
    (set-marker e nil)))
#+end_src

WARN: comment boxes might increase the size of file

** COMMENT Centaur Tabs
This is an ~Emacs~ plugin aiming to become an aesthetic, modern looking tabs plugin.
#+begin_src emacs-lisp
(use-package centaur-tabs
  :quelpa (centaur-tabs :fetcher git :url "https://github.com/ema2159/centaur-tabs")
  :demand
  :init (centaur-tabs-mode t)
  :config
  (setq centaur-tabs-style "bar"
        centaur-tabs-height 20
        centaur-tabs-set-icons t
        centaur-tabs-plain-icons t
        centaur-tabs-gray-out-icons t
        centaur-tabs-set-close-button t
        centaur-tabs-set-modified-marker t
        centaur-tabs-show-navigation-buttons t
        centaur-tabs-set-bar 'left
        centaur-tabs-cycle-scope 'tabs
        x-underline-at-descent-line nil
        centaur-tabs-modified-marker "*"
        centaur-tabs-close-button " ×")
  (centaur-tabs-headline-match)
  (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
  (setq uniquify-separator "/")
  (setq uniquify-buffer-name-style 'forward)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+end_src

** Awesome Tabs
This is an Emacs package to provide out-of-the-box configuration to use tabs.

#+begin_src emacs-lisp :lexical no
;; awesome-tabs
(use-package awesome-tab
  :disabled
  :quelpa (awesome-tab :fetcher git :url "https://github.com/manateelazycat/awesome-tab.git")
  :config (awesome-tab-mode t))

;; Show me /all/ the tabs at once, in one group.
(defun awesome-tab-buffer-groups ()
  (list (awesome-tab-get-group-name (current-buffer))))
#+end_src

** Beacon
It os a global minor mode for tracking the cursor
#+begin_src emacs-lisp
(use-package beacon
  :defer 3
  :ensure t
  :diminish beacon-mode
  :hook ((org-mode text-mode) . beacon-mode)
  :init
  (beacon-mode 1)
  :config
  (setq beacon-color "#666600"
        beacon-blink-delay 0.2
        beacon-blink-duration 0.5
        beacon-blink-when-point-moves-vertically 10
        beacon-push-mark 30
        beacon-blink-when-window-scrolls nil
	    beacon-blink-when-focused t
	    beacon-dont-blink-major-modes '(t pdf-view-mode)))
#+end_src

** Highlight TODO
#+begin_src emacs-lisp
(use-package hl-todo
  :defer 3
  :hook ((prog-mode org-mode) . aqua/hl-todo-init)
  :init
  (defun aqua/hl-todo-init ()
    (setq-local hl-todo-keyword-faces
                '(("HOLD"       . "#cfdf30")
				  ("TODO"       . "#ff9977")
				  ("NEXT"       . "#b6a0ff")
				  ("PROG"       . "#00d3d0")
				  ("FIXME"      . "#ff9977")
				  ("DONE"       . "#44bc44")
				  ("REVIEW"     . "#6ae4b9")
				  ("DEPRECATED" . "#bfd9ff")))
    (hl-todo-mode)))
#+end_src

** Fira Code ligatures
This is a simple minor mode for Fira Code ligatures to assist prettifying the
symbols.
#+begin_src emacs-lisp :lexical no
;; Using Fira Code with ligature
(use-package fira-code-mode
  :defer 3
  :diminish fira-code-mode
  :config
  (setq fira-code-mode-enable-hex-literal nil)
  ;; List of ligatures to turn off
  :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x"))
  ;; Enables fira-code-mode automatically for programming major modes
  :hook prog-mode)
#+end_src

** Rainbow colors
Highlight strings which represent colours. Its better to have this in programming modes,
and better not to have the colour names to be highlighted (x-colors).
#+begin_src emacs-lisp
;; Highlight hex strings in respective color.
(use-package rainbow-mode
  :defer 3
  :ensure t
  :commands (rainbow-mode)
  :config
  ;; diminish on the mode line
  ;;:diminish 'rainbow-mode
  ;; Enable more color highlighting cases in prog modes.
  ;; for all programming modes
  ;; (add-hook 'prog-mode-hook #'rainbow-mode)
  ;; for selective modes
  (mapc (lambda (mode)
	      (add-to-list 'rainbow-x-colors-major-mode-list mode)
	      (add-to-list 'rainbow-html-colors-major-mode-list mode))
	    '(python-mode
	      javascript-mode
          go-mode
	      sh-mode
	      emacs-lisp-mode))
   :hook (prog-mode . rainbow-mode))

;; rainbow delimiters for specific modes
(use-package rainbow-delimiters
  :defer t
  :quelpa (:fetcher github :repo "Fanael/rainbow-delimiters")
  :hook ((emacs-lisp-mode
          lisp-mode
          prog-mode) . rainbow-delimiters-mode))

;; ielm settings
(use-package ielm
  :defer 3
  :config
  (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*ielm*" eos)
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (side . right)
                 (window-width . 120))))
#+end_src

** Discover the major modes
#+begin_src emacs-lisp
;; Discover my major, a feature that discovers key bindings and their
;; meaning for the current Emacs major mode.
(use-package discover-my-major
  :commands (discover-my-major discover-my-mode)
  :quelpa
  (:fetcher github :repo "jguenther/discover-my-major"))
#+end_src

** Expand region
This is a minor mode to increase selected region by semantic units.
#+begin_src emacs-lisp
;; An Emacs extension to increase selected region by semantic units.
(use-package expand-region
  :ensure t
  :config (setq er--show-expansion-message t)
  :bind ("C-=" . er/expand-region))
#+end_src

** Highlight indentation
Using the package ~highlight-indent-guides.el~ for highlighting the indentation.

This minor  mode highlights  indentation levels via  font-lock. Indent
widths  are   dynamically  discovered,  which  means   this  correctly
highlights in any mode, regardless  of indent width, even in languages
with non-uniform  indentation such as  Haskell. By default,  this mode
also  inspects  your  theme  dynamically,  and  automatically  chooses
appropriate colors  for highlighting. This mode  works properly around
hard tabs and mixed indentation, and it behaves well in large buffers.

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :diminish
  :hook
  ((prog-mode yaml-mode) . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-auto-enabled t)
  (highlight-indent-guides-responsive t)
  (highlight-indent-guides-method 'character)) ; column
#+end_src

** Web Sequence Diagrams
This is a major-mode for Emacs and websequencediagrams.com.

*** Usage
Using wsd-mode is  very easy. Either create a new  buffer and activate
using M-x  wsd-mode, or  open a  new file with  a .wsd  extension. For
files with a .wsd extension wsd-mode is activated automatically.

The available keybindings are:

- C-c C-c   “Build” diagram and display inline in Emacs (when possible)
- C-c C-e	“Export” diagram and show online on websequencediagrams.com
  #+begin_src emacs-lisp
(use-package wsd-mode
  :defer t
  :config
  (add-hook 'wsd-mode-hook 'company-mode))
  #+end_src

** Drag stuff
Drag lines, words, region, etc... around
#+begin_src emacs-lisp
;; Drag stuff (lines, words, region, etc...) around
(use-package drag-stuff
  :diminish
  :commands drag-stuff-define-keys
  :hook (after-init . drag-stuff-global-mode)
  :config
  (add-to-list 'drag-stuff-except-modes 'org-mode)
  (drag-stuff-define-keys))
#+end_src

** CSV file handling
#+begin_src emacs-lisp
;; csv file handling
(use-package csv-mode
  :defer 2
  :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode)
  :config (setq csv-separators '("," ";" "|" " "))
  :hook (csv-mode . csv-align-mode))
#+end_src

** Word count
The ~wc-mode~ allows counting characters and words, both on demand and
continuously. It also allows setting up a word/character goal.
#+begin_src emacs-lisp
(use-package wc-mode
  :defer 3
  :hook
  (org-journal-mode . wc-mode))
#+end_src

** Whitespace cleanup
Cleanup any  whitespaces using the emacs  package ~whitespace-cleanup-mode.el~. It
has   a  handy   function  ~whitespace-cleanup~   that  may   be  placed   in  the
before-save-hook for automatically cleaning the  whitespaces before save for any
buffer, but we can just leave it to run the function as needed.

#+begin_src emacs-lisp
;; Emacs library minor mode for intelligently calling whitespace-cleanup
;;
(use-package whitespace-cleanup-mode
  :defer t)
#+end_src

** Code Indentation with aggressive indentation
~aggressive-indent-mode~ is an *Emacs* minor mode to keep code always indented and
it is quite reliable compared to ~electric-indent-mode~. The repository is
available at ~https://github.com/Malabarba/aggressive-indent-mode~.
#+begin_src emacs-lisp
  ;; aggressive-indent-mode is a minor mode that keeps your code always indented.
  ;; It reindents after every change, making it more reliable than electric-indent-mode.
  (use-package aggressive-indent
    :quelpa
    (:fetcher github :repo "https://github.com/Malabarba/aggressive-indent-mode")
    :commands (aggressive-indent-mode)
    :config
      (dolist (hook
	     '(;; python-mode-hook
	       ;; nxml-mode-hook
	       emacs-lisp-mode-hook
	       lisp-mode-hook
           css-mode-hook
	       c-mode-common-hook))
	(add-hook hook #'aggressive-indent-mode)))
#+end_src

** Code formatting with Apheleia
Apheleia is an Emacs package which solves both of these problems comprehensively
for all  languages, allowing  you to say  goodbye to  language-specific packages
such as ~Blacken~ and ~prettier-js~.

#+begin_src emacs-lisp :lexical no
;; Apheleia code formatter
;;  Run code formatter on buffer contents without moving point
;;  using RCS patches and dynamic programming.
(use-package apheleia
  :quelpa
  (:fetcher github :repo "https://github.com/radian-software/apheleia")
  :commands (apheleia-format-buffer)
  :ensure t
  :config
  (dolist (hook
           '(
             js-mode-hook
             css-mode-hook
             ))
    (add-hook hook #'apheleia-mode)))
#+end_src

** TRY Emacs packages without installing them.
*Try* is a package that allows you  to try out Emacs packages without installing
them. If  you pass  a URL to  a plain  text *.el* file  it evaluates  the content,
without storing the file.

To try out any package without actual install, you can run

+ ~M-x try~ RET some-package

Or if you want to try out some package from the web, just paste in the URL

+ ~M-x try~ RET https://url.com/to/some/file.el
#+begin_src emacs-lisp
;; try allows to try the package without having to install the same
;; M-x try RET <package-name>
;; EXAMPLE: M-x try RET multiple-cursors RET
(use-package try
  :defer t
  :commands try)
#+end_src

** Multiple cursors
Multiple cursors for Emacs is a pretty crazy functionality.
#+begin_src emacs-lisp :lexical no
;; multiple cursors
;; select lines and press C-c m c to enter into the multiple cursors
;; To get out of multiple-cursors-mode, press <return> or C-g.
(use-package multiple-cursors
  :demand t
  ;; key bindings
  ;; :bind (("C-c m c" . mc/edit-lines)
  ;;        ("C-c m n" . mc/mark-next-like-this)
  ;;        ("C-c m p" . mc/mark-previous-like-this)
  ;;        ("C-c m m" . mc/mark-all-like-this))
  :bind ("C-c m c" . hydra-mc/body)
  ;; define a hydra
  :init
  (defhydra hydra-mc (:color blue :hint nil)
                          "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
                          ("l" mc/edit-lines :exit t)
                          ("a" mc/mark-all-like-this :exit t)
                          ("n" mc/mark-next-like-this :exit nil)
                          ("N" mc/skip-to-next-like-this :exit nil)
                          ("M-n" mc/unmark-next-like-this :exit nil)
                          ("p" mc/mark-previous-like-this :exit nil)
                          ("P" mc/skip-to-previous-like-this :exit nil)
                          ("M-p" mc/unmark-previous-like-this :exit nil)
                          ("s" mc/mark-all-in-region-regexp :exit t)
                          ("0" mc/insert-numbers :exit t)
                          ("A" mc/insert-letters :exit t)
                          ("<mouse-1>" mc/add-cursor-on-click)
                          ;; Help with click recognition in this hydra
                          ("<down-mouse-1>" ignore)
                          ("<drag-mouse-1>" ignore)
                          ("q" nil)))
#+end_src

** Vi tilde fringe
Display tildes on empty lines in the Emacs fringe a la Vi. The package does not
do anything except showing a ~~~ for empty lines similar to =vi=.
#+begin_src emacs-lisp :lexical no
;; Display tildes on empty lines in the Emacs fringe a la Vi.
(use-package vi-tilde-fringe
  :diminish vi-tilde-fringe-mode
  :init
  (global-vi-tilde-fringe-mode))
#+end_src

** Display keycast
The package ~keycast~ shows the current keymaps and is very useful during
demonstrations.
#+begin_src emacs-lisp :lexical no
;; display current command and its key in the mode line
(use-package keycast
  :defer 5
  :config
  (setq keycast-mode-line-format "%2s%k%c%R"
        keycast-mode-line-remove-tail-elements nil))
#+end_src

** highlight quoted symbols
Highlight Lisp quotes and quoted symbols
#+begin_src emacs-lisp :lexical no
;; Highlight Lisp quotes and quoted symbols
(use-package highlight-quoted
  :config (add-hook 'emacs-lisp-mode-hook 'highlight-quoted-mode))
#+end_src

** Track last uptime of Emacs
=uptimes.el= provides a simple system for tracking and displaying the uptimes of
your Emacs sessions. Simply loading =uptimes.el= from your =~/.emacs= file will
start the tracking of any session.

Run =M-x uptimes=.
#+begin_src emacs-lisp :lexical no
;; Uptime tracking system for Emacs.
(use-package uptimes
  :quelpa
  (:fetcher github :repo "https://github.com/davep/uptimes.el"))
#+end_src

** Preview links under cursor
Using the package =preview-it= we can preview anything at a point.
#+begin_src emacs-lisp :lexical no
;; preview links under cursor
(use-package preview-it
  :defer t
  :quelpa
  (preview-it :repo "jcs-elpa/preview-it" :fetcher github))
#+end_src

** Helpful - Editor Documentation with Contextual Information
A better Emacs *help* buffer with /Helpful/. Let’s use a helpful Emacs documentation
system that  cleanly shows a  lot of  contextual information —then  let’s extend
that to work as we want it to: C-h o to describe the symbol at point.

#+begin_src emacs-lisp :lexical no
;; A better Emacs *help* buffer
(use-package helpful
  :disabled t

  (defun my/describe-symbol (symbol)
    "A “C-h o” replacement using “helpful”:
   If there's a thing at point, offer that as default search item.

   If a prefix is provided, i.e., “C-u C-h o” then the built-in
   “describe-symbol” command is used.

   ⇨ Pretty docstrings, with links and highlighting.
   ⇨ Source code of symbol.
   ⇨ Callers of function symbol.
   ⇨ Key bindings for function symbol.
   ⇨ Aliases.
   ⇨ Options to enable tracing, dissable, and forget/unbind the symbol!
  "
    (interactive "p")
    (let* ((thing (symbol-at-point))
           (val (completing-read
                 (format "Describe symbol (default %s): " thing)
                 (vconcat (list thing) obarray)
                 (lambda (vv)
                   (cl-some (lambda (x) (funcall (nth 1 x) vv))
                            describe-symbol-backends))
                 t nil nil))
           (it (intern val)))
      (cond
       (current-prefix-arg (funcall #'describe-symbol it))
       ((or (functionp it) (macrop it) (commandp it)) (helpful-callable it))
       (t (helpful-symbol it)))))

  ;; Keybindings.
  (global-set-key (kbd "C-h o") #'my/describe-symbol)
  (global-set-key (kbd "C-h k") #'helpful-key))
#+end_src

** Set MacOS transparent title bar
Recent builds of Emacs (=27, 26?=)  support transparent titlebars on *MacOS* via the
~ns-transparent-titlebar~ and ~ns-appearance~ frame properties. The latter indicates
whether the  titlebar background  should be  dark or  light, and  it is  not set
automatically  by Emacs.  However,  the text  colour is  always  taken from  the
current theme,  which can lead to  unreadable titlebar text if  ~ns-appearance~ is
not set correctly.

This  package provides  a global  minor mode,  ~ns-auto-titlebar-mode~ which  when
enabled keeps the "~ns-appearance~" frame parameter correctly set in _GUI_ frames so
that it matches the currently-enabled theme, whether it is light or dark.

For this package to work correctly, it is generally necessary that the theme you
use  sets the  ~frame-background-mode~  variable appropriately.  This  can be  set
manually if necessary, but see the docs for that variable.

#+begin_src emacs-lisp :lexical no
;; set the MacOS transparent titlebar to match the current theme
(use-package ns-auto-titlebar
  ;;:if (eq system-type 'darwin)
  :config
  ;; sets `ns-transparent-titlebar' and `ns-appearance' frame parameters so window
  ;; borders will match the enabled theme.
  (and (or (daemonp)
           (display-graphic-p))
       (require 'ns-auto-titlebar nil t)
       (ns-auto-titlebar-mode +1)))

;; visit files opened outside of Emacs in existing frame, not a new one
(setq ns-pop-up-frames nil)
#+end_src

** Go to the last changed position
The package =goto-chg= allows us to go to the place where we last changed or
updated something in a file.
#+begin_src emacs-lisp
;; Uptime tracking system for Emacs.
(use-package goto-chg
  :quelpa
  (:fetcher github :repo "https://github.com/emacs-evil/goto-chg"))
#+end_src

** Paragraph justification
Justify  the paragraph  typed  as  per our  need  similar  to office  documents.
=justify-kp= package provides paragraph  justification for emacs using Knuth/Plass
algorithm.

#+begin_src emacs-lisp :lexical no
;; paragraph justification using justify-kp
(use-package justfiy-kp
  :defer 3
  :quelpa (justify-kp :fetcher github :repo "Fuco1/justify-kp"))
#+end_src

Commands available are:

- =pj-justify=
- =pj-justify-paragraph=

As per the documentation, in order to automatically re-justify paragraphs as you
type, you can  use ~pj-auto-justify-mode~. This is however a  bit rough around the
edges, so your mileage might vary.

* Some additional useful packages and stuff
Here are some of the additional packages which might be useful sometimes.

** command-log-mode
=command-log-mode= shows event history and command history of some or all buffers.
#+begin_src emacs-lisp :lexical no
;; Log commands in a seperate buffer.
(use-package command-log-mode
  :disabled t
  :diminish command-log-mode)
#+end_src

** Highlight numbers in source code
~highlight-numbers~ is an Emacs minor mode that highlights numeric literals in
source code.
#+begin_src emacs-lisp :lexical no
;; Many major modes do no highlighting of number literals
;; We can use the same
(use-package highlight-numbers
  :quelpa
  (highlight-numbers :fetcher github :repo "Fanael/highlight-numbers")
  :hook
  ((prog-mode conf-mode) . highlight-numbers-mode)
  :config
  (setq highlight-numbers-generic-regexp "\\_<[[:digit:]]+\\(?:\\.[0-9]*\\)?\\_>"))
#+end_src

* Cursor shape and type

The  =cursory= package  provides a  thin  wrapper around  built-in variables  that
affect the style of the Emacs cursor. The  intent is to allow the user to define
preset configurations such as "a block cursor style with a slow blinking effect”
or “a bar with faster blinking" and set them on demand.

#+begin_src emacs-lisp :lexical no
;; cursory - cursor shape control
(use-package cursory
  :ensure t
  :init
  (setq cursory-presets
        '((box
           :blink-cursor-interval 0.8)
          (box-no-blink
           :blink-cursor-mode -1)
          (bar
           :cursor-type (bar . 2)
           :blink-cursor-interval 0.5)
          (bar-no-other-window
           :inherit bar
           :cursor-in-non-selected-windows nil)
          (underscore
           :cursor-type (hbar . 3)
           :blink-cursor-blinks 50)
          (underscore-thin-other-window
           :inherit underscore
           :cursor-in-non-selected-windows (hbar . 1))
          (underscore-thick
           :cursor-type (hbar . 8)
           :blink-cursor-interval 0.3
           :blink-cursor-blinks 50
           :cursor-in-non-selected-windows (hbar . 3))
          (t ; the default values
           :cursor-type box
           :cursor-in-non-selected-windows hollow
           :blink-cursor-mode 1
           :blink-cursor-blinks 10
           :blink-cursor-interval 0.2
           :blink-cursor-delay 0.2)))
  :config
  ;; check `cursory-presets' for how to set your own preset styles.
  (setq cursory-latest-state-file (locate-user-emacs-file "cursory-latest-state"))
  ;; (cursory-restore-latest-preset)

  ;; Set `cursory-recovered-preset' or fall back to desired style from
  ;; `cursory-presets'.
  ;; Set last preset or fall back to desired style from `cursory-presets'.
  (cursory-set-preset (or (cursory-restore-latest-preset) bar))

  ;; The other side of `cursory-restore-latest-preset'.
  (add-hook 'kill-emacs-hook #'cursory-store-latest-preset)

  ;; We have to use the "point" mnemonic, because C-c c is often the
  ;; suggested binding for `org-capture'.
  (define-key global-map (kbd "C-c c p") #'cursory-set-preset))
#+end_src

* plz - An HTTP library for Emacs
~plz~ is an HTTP  library for Emacs. It uses curl as a  backend, which avoids some
of  the  issues with  using  Emacs’s  built-in  url  library. It  supports  both
synchronous  and  asynchronous requests.  Its  API  is  intended to  be  simple,
natural, and expressive. Its code is intended to be simple and well organised.

Available from https://github.com/alphapapa/plz.el

#+begin_src emacs-lisp :lexical no
;; Install `plz' HTTP library
(use-package plz
  ;;:ensure nil
  :defer 3
  :quelpa (plz :fetcher github :repo "alphapapa/plz.el"))
#+end_src

* elisp based addons                                                  :ELISP:
In this section, we define any custom settings as well as install some add-on
packages that will be helpful for =emacs lisp= buffers.

** highlight-defined
This package helps to  highlight known Emacs Lisp symbols. It  is an Emacs minor
mode that highlights defined Emacs Lisp symbols in the source code. Currently it
recognizes Lisp function, built-in function, macro, face and variable names.

Usually Emacs only highlights the macro names and the following incantation will
make it highlight all the defined names as long as we're in Lisp mode, whence in
=org-src= blocks we use =C-c '=.

#+begin_src emacs-lisp :lexical no
;; Highlight known symbols in emacs lisp
;; Emacs Lisp specific
(use-package highlight-defined
  :quelpa
  (:fetcher github :repo "Fanael/highlight-defined")
  :hook
  (emacs-lisp-mode . highlight-defined-mode))
#+end_src

* Colour identifiers mode
Color Identifiers is a minor mode for Emacs that highlights each source code
identifier uniquely based on its name.

#+begin_src emacs-lisp :lexical no
;; Color Identifiers is a minor mode for Emacs that highlights
;; each source code identifier uniquely based on its name.
(use-package color-identifiers-mode
  :defer 5
  :quelpa (:fetcher github :repo "ankurdave/color-identifiers-mode")
  :init
  ;; (add-hook 'after-init-hook 'global-color-identifiers-mode)
  :config
  (defun myfunc-color-identifiers-mode-hook ()
    "To make the variables stand out, you can turn off highlighting
for all other keywords in supported modes using a code"
    (let ((faces '(font-lock-comment-face
                   font-lock-comment-delimiter-face
                   font-lock-constant-face
                   font-lock-type-face
                   font-lock-function-name-face
                   font-lock-variable-name-face
                   font-lock-keyword-face
                   font-lock-string-face
                   font-lock-builtin-face
                   font-lock-preprocessor-face
                   font-lock-warning-face
                   font-lock-doc-face
                   font-lock-negation-char-face
                   font-lock-regexp-grouping-construct
                   font-lock-regexp-grouping-backslash)))
      (dolist (face faces)
        (face-remap-add-relative face '(:inherit default))))
    (face-remap-add-relative 'font-lock-keyword-face '((:weight bold)))
    (face-remap-add-relative 'font-lock-comment-face '((:slant italic)))
    (face-remap-add-relative 'font-lock-builtin-face '((:weight bold)))
    (face-remap-add-relative 'font-lock-preprocessor-face '((:weight bold)))
    (face-remap-add-relative 'font-lock-function-name-face '((:slant italic)))
    (face-remap-add-relative 'font-lock-string-face '((:slant italic)))
    (face-remap-add-relative 'font-lock-constant-face '((:weight bold))))
  (add-hook 'color-identifiers-mode-hook 'myfunc-color-identifiers-mode-hook))
#+end_src

* Profiling

** Final report
#+begin_src emacs-lisp
(aqua/report-time "addons-config")
#+end_src
