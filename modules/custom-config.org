#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file
#+end_src

* Table Of Contents                                                   :TOC_4:
- [[#emacs-custom-configurations][Emacs custom configurations]]
  - [[#toggling-annoying-and-gui-features-not-needed][Toggling annoying and GUI features not needed]]
  - [[#handling-file-backups-and-autosaves][Handling file backups and autosaves]]
  - [[#find-file-customisations][find-file customisation's]]
  - [[#get-rid-of-lock-files][Get rid of lock files]]
  - [[#custom-settings-to-act-globally][Custom settings to act globally]]
    - [[#personalised-settings][Personalised settings]]
    - [[#better-settings-for-macos][Better settings for MacOS]]
    - [[#window-management][Window Management]]
    - [[#remember-the-last-editing-position][Remember the last editing position]]
    - [[#keeping-track-of-recently-opened-files][Keeping track of recently opened files]]
    - [[#smart-tab][Smart tab]]
    - [[#parenthesis-matching][Parenthesis matching]]
    - [[#delete-the-selected-text-with-a-keypress][Delete the selected text with a keypress]]
    - [[#expansion-using-dabbrev][Expansion using dabbrev]]
    - [[#hippie-expand][Hippie Expand]]
    - [[#apropos][Apropos]]
  - [[#unclutter-the-mode-line][Unclutter the Mode line]]
  - [[#cua-mode-settings][CUA Mode settings]]
  - [[#window-and-frame-settings][Window and Frame settings]]
  - [[#cursor-settings][Cursor settings]]
  - [[#formatting-and-indentation-settings][Formatting and Indentation settings]]
  - [[#word-wrapping-and-text-auto-fill][Word wrapping and Text auto fill]]
  - [[#package-upgrade-and-load][Package upgrade and load]]
    - [[#custom-package-upgrade][Custom package upgrade]]
    - [[#load-3rd-party-packages-as-needed-from-a-directory][Load 3rd party packages as needed from a directory]]
  - [[#removing-whitespaces][Removing whitespaces]]
  - [[#moving-lines][Moving lines]]
  - [[#unfill-region][Unfill region]]
  - [[#rectangle-commands][Rectangle commands]]
  - [[#reformatting-an-org-buffer][Reformatting an org buffer]]
  - [[#function-to-remove-the-trailing-newline-for-shell-command][Function to remove the trailing newline for shell command]]
  - [[#improving-the-eshell][Improving the eshell]]
    - [[#toggle-eshell][Toggle Eshell]]
  - [[#for-faster-font-locking][For faster font locking]]
- [[#for-handling-errors-and-warnings][For handling errors and warnings]]
- [[#custom-location-settings-for-packages][Custom location settings for packages]]
  - [[#url][url]]
  - [[#request][request]]
  - [[#transient][transient]]
  - [[#tramp][tramp]]

* Emacs custom configurations
This contains all custom functions and configurations along with certain
packages to help customise the core Emacs.

To enable a mode or a setting for multiple modes, use the below format

#+begin_example
(dolist (hook (list
               'js-mode-hook
               'rust-mode-hook
               'python-mode-hook
               'c-mode-common-hook
               'c-mode-hook
               'c++-mode-hook
               ))
  (add-hook hook '(lambda () (foo-ensure))))
#+end_example

** Toggling annoying and GUI features not needed
Emacs provides features to turn off certain features in the =GUI= mode to provide
more real estate for writing and it sometimes also helps for distraction free
writing. Also certain features like mouse intervention can be turned off as
well.

#+begin_src emacs-lisp :lexical no
(scroll-bar-mode 0)                  ; ^Turn off scrollbars
(tool-bar-mode   0)                  ; ^Turn off toolbar

(mouse-avoidance-mode 'exile)        ; ^Move mouse pointer out of way of cursor
(context-menu-mode)                  ; ^Right click instead of middle button
#+end_src

** Handling file backups and autosaves
Keep backups and autosaves in specific directories rather than leaving temporary
files all over the filesystem. If Emacs or the computer crashes, you can recover
the  files you  were editing  at  the time  of  the crash  from their  auto-save
files.   To  do   this,   start   Emacs  again   and   type   the  command   ~M-x
recover-session~. Here, we parameterize how files are saved in the background.

Here are the settings for controlling how auto saving happens.

#+begin_src emacs-lisp
  ;; ^ Turn on/off auto-save. We can have fallback in case of any crashes or data loss.
  ;;   Use `recover-file' or `recover-session' to recover the same.
  (setq auto-save-default t
	;; Don't auto-disable auto-save after deleting big chunks. This defeats
	;; the purpose of a failsafe. This adds the risk of losing the data we
	;; just deleted, but I believe that's VCS's jurisdiction, not ours.
	auto-save-include-big-deletions t
	;; ^ For specifying the auto save locations
	;; ^ Keep it out of `emacs-dir' or the local directory.
	auto-save-list-file-prefix (expand-file-name "autosave" aqua-savefile-dir)
	tramp-auto-save-directory  (expand-file-name "tramp-autosave" aqua-savefile-dir)
	auto-save-file-name-transforms
	(list (list "\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'"
		    ;; Prefix the tramp autosaves to prevent conflicts with local ones
		    (concat auto-save-list-file-prefix "tramp-\\2") t)
	      (list ".*" auto-save-list-file-prefix t)))
#+end_src

Here are the settings for backups.

Emacs carefully  copies the old  contents to  another file, called  the "backup"
file, before  actually saving. Emacs  makes a backup for  a file only  the first
time that file is saved from a buffer. No matter how many times you subsequently
save the file, its backup remains unchanged. However, if you kill the buffer and
then visit  the file again, a  new backup file  will be made. Here,  we activate
backup and parameterize the number of backups to keep.


#+begin_src emacs-lisp :lexical no
;; ^ Put backups in another directory.
;;   first create directory for backup
(let ((aqua/backup-dir (expand-file-name "backups/" aqua-savefile-dir)))
  ;; save backup files to the dedicated directory
  (setq backup-directory-alist `(("." . , aqua/backup-dir))
        tramp-backup-directory-alist backup-directory-alist))

;; ^ For maintaining numeric backup versions in a directory
(setq version-control t
      ;; even version controlled files get to be backed up.
      vc-make-backup-files t
      ;; instead of renaming current file, do not clobber symbolic links
      backup-by-copying t
      ;; Only keep the last 10 backups of a file.
      kept-old-versions 10
      kept-new-versions 10)

;; ^Silently delete execess backup versions and also
;; ^Delete files to trash
(setq delete-old-versions t          ; clean up after itself
      delete-by-moving-to-trash t)
#+end_src

** find-file customisation's
Configure the option to resolve symlinks while opening files, so that any
operations are conducted from the file's original or true directory. We can also
disable warnings while opening same file with different names.

#+begin_src emacs-lisp :lexical no
;; Resolve symlinks when opening files, so that any operations are
;; conducted from the file's true directory (like `find-file').
(setq find-file-visit-truename t
      vc-follow-symlinks t)

;; Disable the warning "X and Y are the same file". It's fine to ignore this
;; warning as it will redirect you to the existing buffer anyway.
(setq find-file-suppress-same-file-warnings t)
#+end_src

** Get rid of lock files
Lock files are created to avoid editing collisions and also these lock files
will kill =npm= start when using =node=. We don't need that setting.

#+begin_src emacs-lisp :tangle no
;; this now set in early-init
;; do not create any lock files
(setq-default create-lockfiles nil)
#+end_src

** Custom settings to act globally
Here we set some common custom settings enabled globally for all modes.
*** Personalised settings
[[http://pragmaticemacs.com/emacs/adaptive-cursor-width/][Adaptive cursor width | Pragmatic Emacs]]: make cursor the width of the
character it is under; i.e. full width of a TAB:
#+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t)
#+END_SRC

Move the mouse cursor out of the way when the text cursor seems to crash: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mouse-Avoidance.html][documentation]].

The possible values are: /banish, exile, jump, animate, proteus/

#+BEGIN_SRC emacs-lisp
(when (display-mouse-p) (setq mouse-avoidance-mode "animate"))
#+END_SRC

/Tip:/ For moving the buffer instead of the cursor while navigating, do below

*(M-x) | scroll-lock-mode*

*** Better settings for MacOS
Integrate with the Mac OSX clipboard
#+begin_src emacs-lisp :lexical no
;; Integrate with MacOS clipboard
(setq select-enable-clipboard t)
#+end_src

Making fonts look better with anti-aliasing
#+begin_src emacs-lisp :lexical no
;; make fonts look better with anti-aliasing
(setq mac-allow-anti-aliasing t)
#+end_src

Improve the look and feel of =titlebar= on Macos. Set =ns-appearance= to dark for
white title text and nil for black title text.

Disabling the below as it is better to use the
[[https://github.com/purcell/ns-auto-titlebar][ns-auyo-titlebar]] package foe setting this.
#+begin_src emacs-lisp :lexical no :tangle no
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

*** Window Management

This configuration allows to use the last buffer for splitting windows instead of the
current one.

It is adapted from [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org#make-window-splitting-more-useful][Sacha]].

#+BEGIN_SRC emacs-lisp
(defun my-vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun my-hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(bind-key "C-x 2" 'my-vsplit-last-buffer)
(bind-key "C-x 3" 'my-hsplit-last-buffer)
#+END_SRC

*** Remember the last editing position

The =savehist= package provides way to go to the last cursor position when a file
is opened

#+begin_src emacs-lisp :lexical no
;; saveplace remembers your location in a file when saving files
(use-package saveplace
  :hook (after-init . save-place-mode)
  :config
  (setq save-place-file (expand-file-name "saveplace" aqua-savefile-dir))
  ;; activate it for all the buffers
  (setq-default save-place t))

;; remember last editing position
(use-package savehist
  :config
  (setq savehist-additional-variables
        ;; search entries
        '(search-ring regexp-search-ring)
        ;; save every minute
        savehist-autosave-interval 60
        ;; keep the home clean
        savehist-file (expand-file-name "savehist" aqua-savefile-dir))
  (savehist-mode +1))
#+end_src

*** Keeping track of recently opened files

Keep a list of the most recently opened files for quick access.

#+begin_src emacs-lisp :lexical no
;; keeping track of the recently opened file list
(use-package recentf
  :config
  (setq recentf-save-file (expand-file-name "recentf" aqua-savefile-dir)
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)
  (recentf-mode +1))
#+end_src

*** Smart tab

Set ~tab~ to either indent or complete

#+begin_src emacs-lisp
;; ^set smart tab to either indent or complete
(setq tab-always-indent 'complete)
#+end_src


*** Parenthesis matching

Customise the way parentheses match look is done.

#+begin_src emacs-lisp :lexical no
;; ^parentheses match
(use-package paren
  :ensure nil
  :hook
  (after-init . show-paren-mode)
  :custom-face
  ;; (show-paren-match ((nil (:background "#800000" :foreground "#f1fa8c")))) ;; :box t
  :config
  (setq show-paren-delay 0.1
        show-paren-highlight-openparen t
        show-paren-when-point-inside-paren t
        show-paren-when-point-in-periphery t)
  :custom
  ;; options are 'mixed', 'parenthesis' and 'mixed'
  (show-paren-style 'parenthesis)
  (set-face-background 'show-paren-match-face "#aaaaaa")
  (set-face-foreground 'show-paren-mismatch-face "maroon")
  (set-face-attribute 'show-paren-match-face nil
                      :weight 'bold :underline nil :overline nil :slant 'normal)
  (set-face-attribute 'show-paren-mismatch-face nil
                      :weight 'bold :underline t :overline nil :slant 'normal)
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t))
#+end_src

*** Delete the selected text with a keypress

To delete the selected text easily enable this.

#+begin_src emacs-lisp
;; delete selection with a simple keypress
(delete-selection-mode t)
#+end_src

*** Expansion using dabbrev
=dabbrev=  is a  built-in Emacs  package which  stands for  =dynamic abbreviation
package=. It allows to write just a few characters of words written earlier to be
able to expand them.

#+begin_example
To abbreviate a word put point right after the word and press
M-/ perform (dabbrev-expand)
M-C-/ perform (dabbrev-completion)
#+end_example

#+begin_src emacs-lisp :lexical no
;; abbrevs configuration
(setq abbrev-file-name (expand-file-name "user/abbrev_defs" user-emacs-directory))
(setq save-abbrevs t)
(setq-default abbrev-mode t)
(setq save-abbrevs 'silently)
;;(diminish 'abbrev-mode " Ⓐ")
#+end_src

*** Hippie Expand

Hippie Expand looks at the word before point and tries to expand it in various
ways including expanding from a fixed list (like =`‘expand-abbrev’’=), expanding
from matching text found in a buffer (like =`‘dabbrev-expand’’=) or expanding in
ways defined by your own functions. Which of these it tries and in what order
is controlled by a configurable list of functions.

#+begin_src emacs-lisp
;; Hippie Expand is dabbrev expand on steroids
(use-package hippie-exp
  ;; a binding to replace the dabbrev expansions to hippie
  :bind ([remap dabbrev-expand] . hippie-expand)
  :commands (hippie-expand)
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
  :config
  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol
          try-complete-file-name-partially
          try-complete-file-name
          try-expand-all-abbrevs
          try-expand-list
          try-expand-line)))
#+end_src


#+begin_src emacs-lisp :tangle no
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

;; use hippie-expand instead of dabbrev
(global-set-key (kbd "M-/") #'hippie-expand)
(global-set-key (kbd "s-/") #'hippie-expand)
#+end_src

*** Apropos
The ~apropos~ commands answer questions like, “What are the commands for working
with files?” More precisely, you specify your query as an apropos pattern, which
is either a word, a list of words, or a regular expression.
#+begin_src emacs-lisp :lexical no
(with-eval-after-load "apropos"
  ;; apropos commands will search more extensively by checking all
  ;; the variables and non-interactive functions as well.
  (setq apropos-do-all t))
#+end_src


** Unclutter the Mode line
Unclutter the modeline by either removing the mode names or renaming the same
using =diminish= package.
#+begin_src emacs-lisp :lexical no
;; Unclutter the mode line.
(with-eval-after-load "diminish-autoloads"
  (with-eval-after-load "abbrev"       (diminish 'abbrev-mode " Ⓐ"))
  (with-eval-after-load "back-button"  (diminish 'back-button-mode))
  (with-eval-after-load "volatile-highlights" (diminish 'volatile-highlights-mode))
  (with-eval-after-load "checkdoc"     (diminish 'checkdoc-minor-mode " Cd"))
  (with-eval-after-load "color-identifiers-mode" (diminish 'color-identifiers-mode))
  (with-eval-after-load "fancy-narrow" (diminish 'fancy-narrow-mode))
  (with-eval-after-load "flycheck"     (diminish 'flycheck-mode " fC"))
  (with-eval-after-load "flyspell"     (diminish 'flyspell-mode " fS"))
  (with-eval-after-load "flymake"      (diminish 'flyspell-mode " fM"))
  (with-eval-after-load "rainbow-mode" (diminish 'rainbow-mode))
  (with-eval-after-load "whitespace"   (diminish 'whitespace-mode))
  (with-eval-after-load "which-key"    (diminish 'which-key-mode))
  (with-eval-after-load "org-ai"       (diminish 'org-ai-mode))
  (with-eval-after-load "verb"         (diminish 'verb-mode)))
#+end_src

** CUA Mode settings

CUA-mode is a minor-mode that enables the use of Ctrl-X/C/V for cut/copy/paste,
as is customary in many computer programs. The mode interferes the rectangle
mode and after the mark setup with the press of ~C-x~ the selection gets
deleted. The following will clear that issue.

#+begin_src emacs-lisp
  ;; CUA-mode is a minor-mode that enables the use of Ctrl-X/C/V
  ;; for cut/copy/paste, as is customary in many computer programs.
  ;; With the below settings, C-x for cut only works when a selection
  ;; is active, and when no other key is pressed shortly.
  ;; Otherwise, C-x behaves as usual.
  (setq cua-enable-cua-keys nil) ;; only for rectangles
  (cua-mode t)
#+end_src

** Window and Frame settings

Set the ~Frame title~ using a more useful format for the frame title to either
display a file or a buffer name in case if the buffer is not visiting a file.

#+begin_src emacs-lisp
;; ^ Using a more useful format for the frame title
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b")))
      icon-title-format frame-title-format)

;; ^ Do not resize frames in steps as it might look weird during tiling window
;;   managers, as it might leave unseemly gaps.
(setq frame-resize-pixelwise t)

;; ^ Do not resize windows pixelwise, which may cause crashes in some cases
;;   while resizing too many windows at once or rapidly.
(setq window-resize-pixelwise nil)

;; ^ Since Emacs 25.1, native border "consumes" a pixel of the fringe on
;;   right-most splits, while `window-divider' does not.
(setq window-divider-default-places t
      window-divider-default-bottom-width 1
      window-divider-default-right-width 1)

;; ^ Favour for vertical splits over horizontal ones
(setq split-width-threshold 160
      split-height-threshold nil)
#+end_src

** Cursor settings
Display the cursor by changing colour and shape as per the buffer state.

#+begin_src emacs-lisp :tangle no
;; ^Customise the cursor color and type based on buffer state
;;  read-only, overwrite, and normal insert modes
(defun aqua/customize-cursor-style ()
  "Change cursor color and type based on buffer state."
  (let* ((read-only-color "purple1")
         (overwrite-color "#7F7F7F")
         (default-color "black")
         (color (cond (buffer-read-only read-only-color)
                      (overwrite-mode overwrite-color)
                      (t default-color)))
         (type (if (null overwrite-mode) 'bar 'box)))
    (set-cursor-color color)
    (setq cursor-type type)))

(add-hook 'post-command-hook #'aqua/customize-cursor-style)

;; Cursor to use.
(setq-default cursor-type 'bar)

;; Cursor blinks forever.
(setq blink-cursor-blinks 0)
#+end_src

** Formatting and Indentation settings

Certain variables are ~buffer-local~, and hence changing them using ~setq~
will only change them in a single buffer. Using setq-default we change
the buffer-local variable’s default value.

#+begin_src emacs-lisp
;; ^ Favour for spaces over tabs. 4 spaces is a more consistent default than 8-space tabs.
;;   It can be changed on a per-mode basis anyway
(setq-default indent-tabs-mode nil
              tab-width 4)

;; Only indent the line when at BOL or in a line's indentation. Anywhere else,
;; insert literal indentation.
(setq-default tab-always-indent nil)

;; Make `tabify' and `untabify' only affect indentation. Not tabs/spaces in the
;; middle of a line.
(setq tabify-regexp "^\t* [ \t]+")


;; ^ Maximum line width for handling wide screens and terminals
(setq-default fill-column 80)

;; ^ Doom adaptations
;; ^ Continue with wrapped words at whitespace, rather than in middle of a word
(setq-default word-wrap t)
;; ...but don't do any wrapping by default. It's expensive. Enable
;; `visual-line-mode' if you want soft line-wrapping. `auto-fill-mode' for hard
;; line-wrapping.
(setq-default truncate-lines t)
;; If enabled (and `truncate-lines' was disabled), soft wrapping no longer
;; occurs when that window is less than `truncate-partial-width-windows'
;; characters wide. We don't need this, and it's extra work for Emacs otherwise,
;; so off it goes.
(setq truncate-partial-width-windows nil)

;; This was a widespread practice in the days of typewriters. I actually prefer
;; it when writing prose with monospace fonts, but it is obsolete otherwise.
(setq sentence-end-double-space nil)

;; The POSIX standard defines a line is "a sequence of zero or more non-newline
;; characters followed by a terminating newline", so files should end in a
;; newline. Windows doesn't respect this (because it's Windows), but we should,
;; since programmers' tools tend to be POSIX compliant (and no big deal if not).
(setq require-final-newline t)

;; Default to soft line-wrapping in text modes. It is more sensibile for text
;; modes, even if hard wrapping is more performant.
(add-hook 'text-mode-hook #'visual-line-mode)
#+end_src

Some custom settings for tab stops.
#+begin_src emacs-lisp :tangle no
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))))
#+end_src

** Word wrapping and Text auto fill
In =fill mode=, when we type past the end of a line, Emacs automatically starts a
new line, cleverly formatting paragraphs. This is a powerful form of "word
wrap".

#+begin_src emacs-lisp :lexical no
;; Wrap long lines when editing text
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

;; Do not show the "Fill" indicator in the mode line.
;; (diminish 'auto-fill-function)
#+end_src

Now  pressing  ~M-q~  will  cleverly  redistribute  the  line  breaks  within  any
paragraph, thereby making  it look better. With a prefix  argument, it justifies
it  as  well  —i.e.,  pads  extra  white space  to  make  the  paragraph  appear
rectangular.

/Fun Stuff: =M-o M-s= centres a line of text/

** Package upgrade and load

*** Custom package upgrade

A function to upgrade all packages and delete the obsolete ones.

#+begin_src emacs-lisp :lexical no
(defun aqua/upgrade-package ()
  "Upgrade all the listed packages."
  (interactive)
  (save-window-excursion
    (with-temp-buffer
      (package-list-packages)
      (package-menu-mark-upgrades)
      (package-menu-mark-obsolete-for-deletion)
      (package-menu-execute t))))
#+end_src

*** Load 3rd party packages as needed from a directory

Loop through the custom lisp under the ~vendor~ directory and load all the ~.el~
files from the vendor package.

#+begin_src emacs-lisp :lexical no

(defvar custom-load-paths
  '(
    ;; "xslide"                            ;; xml and xslt syntax, customization's
    ;; "xslt-process/lisp"                 ;; xslt processor ide
    )
  "Custom load paths that do not follow the normal vendor/elisp/module-name.el format.")

;; loop through the custom lisp under the vendor directory
;; load all the .el files from the vendor package
(require 'cl-lib)
(cl-loop for location in custom-load-paths
         do (add-to-list 'load-path
                         (message "loading vendor pkg %s" location)
                         (concat
                          (file-name-directory
                           (directory-file-name
                            (file-name-directory
                             (or load-file-name (buffer-file-name)))))
                          "vendor/"
                          location)))
#+end_src

** Removing whitespaces
Make the trailing whitespaces at the end of a line visible as well as remove
the same while saving the buffer.

#+begin_src emacs-lisp :lexical no
;; highlight the trailing whitespaces in all modes.
;; (setq-default show-trailing-whitespace t)

;; Trim all the trailing whitespaces in the buffer.
(add-hook 'before-save-hook
          (lambda ()
            ;; Except for ...
            (let ((buffer-undo-list buffer-undo-list)) ; For goto-chg.
              (unless (or (derived-mode-p 'message-mode)
                          ;; ... where "-- " is the signature
                          ;; separator (for when using emacsclient
                          ;; to compose emails and doing C-x #).
                          (derived-mode-p 'diff-mode))
                ;; ... where the patch file can't be changed!
                (delete-trailing-whitespace)))))
#+end_src

** Moving lines

Move text lines UP or DOWN easily.

#+begin_src emacs-lisp
  ;; Moving lines up and down are very common editing operations
  ;; to move line up
  (defun aqua/move-line-up ()
    (interactive)
    (transpose-lines 1)
    (previous-line 2))
  (global-set-key [(meta shift up)] 'aqua/move-line-up)

  ;; to move line down
  (defun aqua/move-line-down ()
    (interactive)
    (next-line 1)
    (transpose-lines 1)
    (previous-line 1))

  (global-set-key [(meta shift down)] 'aqua/move-line-down)
#+end_src

** Unfill region
Unfilling a region joins all the lines in a paragraph into a single line for
each paragraphs in that region. It is the contrary of ~fill-region~.
#+begin_src emacs-lisp :lexical no
(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single
    logical line.  This is useful, e.g., for use with
    `visual-line-mode'."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))
#+end_src

** Rectangle commands

Rectangle commands serve as handy tools while working with multi-column and
tabular text.

#+begin_src emacs-lisp
  ;; ^Create a menu for rectangle commands
  ;; easymenu is preloaded without needing (require 'easymenu)
  ;; The below elisp snippet does the following things
  ;; 1. adds a menu entry for rectangle-mark-mode to Edit menu.
  ;; 2. adds a menu entry for tabify and untabify commands to Edit menu
  ;; 3. adds a menu named Rectangle which gets activated when in rectangle-mark-mode.
  ;;
  (dolist
      (item
       '((begin-tabify menu-item "--")
	 ["Tabify" tabify :help "(tabify START END &optional ARG)\n\nConvert multiple spaces in region to tabs when possible.\nA group of spaces is partially replaced by tabs\nwhen this can be done without changing the column they end at.\nIf called interactively with prefix ARG, convert for the entire\nbuffer.\n\nCalled non-interactively, the region is specified by arguments\nSTART and END, rather than by the position of point and mark.\nThe variable `tab-width' controls the spacing of tab stops."]
	 ["Untabify" untabify :help "(untabify START END &optional ARG)\n\nConvert all tabs in region to multiple spaces, preserving columns.\nIf called interactively with prefix ARG, convert for the entire\nbuffer.\n\nCalled non-interactively, the region is specified by arguments\nSTART and END, rather than by the position of point and mark.\nThe variable `tab-width' controls the spacing of tab stops."]
	 (after-tabify menu-item "--")))
    (easy-menu-add-item global-map
			'("menu-bar" "edit")
			item "bookmark"))

  (easy-menu-add-item global-map
		      '("menu-bar" "edit")
		      ["Rectangle Mark Mode" rectangle-mark-mode :style toggle :selected rectangle-mark-mode :help "(rectangle-mark-mode &optional ARG)\n\nToggle the region as rectangular.\nActivates the region if needed.  Only lasts until the region is deactivated."]
		      "bookmark")

  (with-eval-after-load 'rect
    (easy-menu-define my-rectangle-mark-mode-map-menu rectangle-mark-mode-map "Menu for Rectangle Mark Mode Map."
      '("Rectangle"
	["String Rectangle" string-rectangle :help "(string-rectangle START END STRING)\n\nReplace rectangle contents with STRING on each line.\nThe length of STRING need not be the same as the rectangle width.\n\nWhen called interactively and option `rectangle-preview' is\nnon-nil, display the result as the user enters the string into\nthe minibuffer.\n\nCalled from a program, takes three args; START, END and STRING."]
	["Delete Rectangle" delete-rectangle :help "(delete-rectangle START END &optional FILL)\n\nDelete (don't save) text in the region-rectangle.\nThe same range of columns is deleted in each line starting with the\nline where the region begins and ending with the line where the region\nends.\n\nWhen called from a program the rectangle's corners are START and END.\nWith a prefix (or a FILL) argument, also fill lines where nothing has\nto be deleted."]
	"--"
	["Kill Rectangle" kill-rectangle :help "(kill-rectangle START END &optional FILL)\n\nDelete the region-rectangle and save it as the last killed one.\n\nWhen called from a program the rectangle's corners are START and END.\nYou might prefer to use `delete-extract-rectangle' from a program.\n\nWith a prefix (or a FILL) argument, also fill lines where nothing has to be\ndeleted.\n\nIf the buffer is read-only, Emacs will beep and refrain from deleting\nthe rectangle, but put it in `killed-rectangle' anyway.  This means that\nyou can use this command to copy text from a read-only buffer.\n(If the variable `kill-read-only-ok' is non-nil, then this won't\neven beep.)"]
	["Copy Rectangle As Kill" copy-rectangle-as-kill :help "(copy-rectangle-as-kill START END)\n\nCopy the region-rectangle and save it as the last killed one."]
	["Yank Rectangle" yank-rectangle :help "(yank-rectangle)\n\nYank the last killed rectangle with upper left corner at point."]
	"--"
	["Open Rectangle" open-rectangle :help "(open-rectangle START END &optional FILL)\n\nBlank out the region-rectangle, shifting text right.\n\nThe text previously in the region is not overwritten by the blanks,\nbut instead winds up to the right of the rectangle.\n\nWhen called from a program the rectangle's corners are START and END.\nWith a prefix (or a FILL) argument, fill with blanks even if there is\nno text on the right side of the rectangle."]
	["Close Rectangle" close-rectangle :help "(close-rectangle START END &optional FILL)\n\nDelete all whitespace following a specified column in each line.\nThe left edge of the rectangle specifies the position in each line\nat which whitespace deletion should begin.  On each line in the\nrectangle, all contiguous whitespace starting at that column is deleted.\n\nWhen called from a program the rectangle's corners are START and END.\nWith a prefix (or a FILL) argument, also fill too short lines."]
	["Clear Rectangle" clear-rectangle :help "(clear-rectangle START END &optional FILL)\n\nBlank out the region-rectangle.\nThe text previously in the region is overwritten with blanks.\n\nWhen called from a program the rectangle's corners are START and END.\nWith a prefix (or a FILL) argument, also fill with blanks the parts of the\nrectangle which were empty."]
	"--"
	["Rectangle Number Lines" rectangle-number-lines :help "(rectangle-number-lines START END START-AT &optional FORMAT)\n\nInsert numbers in front of the region-rectangle.\n\nSTART-AT, if non-nil, should be a number from which to begin\ncounting.  FORMAT, if non-nil, should be a format string to pass\nto `format' along with the line count.  When called interactively\nwith a prefix argument, prompt for START-AT and FORMAT."]
	"--"
	["Rectangle Exchange Point And Mark" rectangle-exchange-point-and-mark :help "(rectangle-exchange-point-and-mark &optional ARG)\n\nLike `exchange-point-and-mark' but cycles through the rectangle's corners."]
	"--"
	["Quit" keyboard-quit :help "(keyboard-quit)\n\nSignal a `quit' condition.\nDuring execution of Lisp code, this character causes a quit directly.\nAt top-level, as an editor command, this simply beeps."])))

  (dolist
      (item
       '((begin-rect menu-item "--")
	 ["Rectangle Mark Mode" rectangle-mark-mode :style toggle :selected rectangle-mark-mode :help "(rectangle-mark-mode &optional ARG)\n\nToggle the region as rectangular.\nActivates the region if needed.  Only lasts until the region is deactivated."]
	 (after-rect menu-item "--")))
    (easy-menu-add-item global-map
			'("menu-bar" "edit")
			item "bookmark"))
#+end_src

** Reformatting an org buffer

A function that reformats the current buffer by regenerating the text from its
internal parsed representation.

#+begin_src emacs-lisp
(defun aqua/org-reformat-buffer ()
  "Reformat the current buffer."
  (interactive)
  (when (y-or-n-p "Really format current buffer? ")
    (let ((document (org-element-interpret-data (org-element-parse-buffer))))
      (erase-buffer)
      (insert document)
      (goto-char (point-min)))))
#+end_src

** Function to remove the trailing newline for shell command
The emacs lisp command ~shell-command-to-string~ adds a trailing newline and the
below function trims it off.
#+begin_src emacs-lisp :lexical no
;; remove the trailing newline from shell-command-to-string output
(defun aqua/string-trim-final-newline (string)
  (let ((len (length string)))
    (cond
     ((and (> len 0) (eql (aref string (- len 1)) ?\n))
      (substring string 0 (- len 1)))
     (t string))))
#+end_src

** Improving the eshell

Improve =eshell= prompt and assign aliases, also setup some custom helper
functions for easier use.

#+begin_src emacs-lisp :lexical no
;; set a prompt
(setq eshell-prompt-function
      (lambda nil
        (concat
         (if (string= (eshell/pwd) (getenv "HOME"))
             (propertize "~" 'face `(:foreground "#2255bb"))
           (replace-regexp-in-string
            (getenv "HOME")
            (propertize "~" 'face `(:foreground "#2255bb"))
            (propertize (eshell/pwd) 'face `(:foreground "#2255bf"))))
         (if (= (user-uid) 0)
             (propertize " α " 'face `(:foreground "#aa0000"))
           (propertize " λ " 'face `(:foreground "#68228b"))))))
(setq eshell-prompt-regexp "^[^αλ\n]*[αλ] ")

;; do not highlight prompt
(setq eshell-highlight-prompt nil)

;; disable global highlight
(add-hook 'eshell-mode-hook
          (lambda () (global-hl-line-mode 0)))
#+end_src

Install =eshell-syntax-highlighting= package which helps to provide syntax
highlighting for ~Eshell~.

#+begin_src emacs-lisp :lexical no
;; provide syntax highlighting foe eshell
(use-package eshell-syntax-highlighting
  :defer 3
  :ensure t
  :quelpa
  (:fetcher "github" :repo "akreisher/eshell-syntax-highlighting")
  :config
  ;; enable in all Eshell buffers.
  (eshell-syntax-highlighting-global-mode +1))
#+end_src

*** Toggle Eshell

The package =eshell-toggle= provides a simple functionality to show/hide
eshell/ansi-term (or almost any other buffer) at the bottom of active window
with directory of its buffer.
#+begin_src emacs-lisp :lexical no
;; eshell-toggle
;; Show/hide eshell at the bottom of active window with directory of its buffer
(use-package eshell-toggle
  :defer 3
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term)
  :quelpa
  (eshell-toggle :repo "4DA/eshell-toggle" :fetcher github :version original)
  :bind
  ("C-M-`" . eshell-toggle))
#+end_src

** For faster font locking
While enabling the ~font-lock~ it is better to have the below values to avoid the
slight glitch.

#+begin_src emacs-lisp :lexical no
;; faster font locking
(setq! jit-lock-defer-time 0
       jit-lock-stealth-time 2.5
       jit-lock-contextually t
       jit-lock-context-time 2)
#+end_src

* For handling errors and warnings

Like everything in Emacs, handling of certain errors and/or warnings is
configurable. Turning off the warnings is as easy as adding some options.
For handling errors or warnings like ~ad-handle-definition: ‘url-cache-extract’
got redefined~ we can follow the below:

#+begin_src emacs-lisp :lexical no
;; Suppress warnings about functions being redefined
(setq ad-redefinition-action 'accept)
#+end_src

* Custom location settings for packages
Some of the packages need caching locations and temporary locations to stage
some files especially while working on network transactions. The default values
for these would almost always will be the root directory of ~Emacs~.

Let us update those so that the setup would be clean.

** url
~url~ is a default builtin package in ~Emacs~ that uses
~url-configuration-directory~ as a location to stage cookies, history etc. We can
configure it under the cache directory.

#+begin_src emacs-lisp :lexical no
;; update url-configuration-directory of url package
(use-package url
  :config
  (setq url-configuration-directory (expand-file-name "url" user-cache-directory))
  (setq url-automatic-caching t))
#+end_src

** request
~request~ is a package for making ~URL~ requests using *curl* and it is a dependency
for many packages. It uses ~request-storage-directory~ as a location to store data
related to the url requests made. Let us customise the same.
#+begin_src emacs-lisp :lexical no
;; customise location of request-storage-directory for request package
(use-package request
  :config
  (setq request-storage-directory (expand-file-name "request" user-cache-directory)))
#+end_src

** transient
~Transient~  is a  builtin ~Emacs~  library for  implementing the  keyboard driven
menus in  ~Magit~. It has a  variable ~transient-levels-file~ that stores  levels of
transients  and   their  suffixes  to  a   file  ~~/.emacs.d/transient/levels.el~.
Similarly,   the  ~transient-history-file~   stores  history   of  transients   to
~~/.emacs.d/transient/history.el~.   Let's  change   these  to   put  inside   the
~user-cache-directory~.

#+begin_src emacs-lisp :lexical no
;; customise caching locations of files for transient library
(use-package transient
  :config
  (setq transient-levels-file (expand-file-name "transient/levels.el" user-cache-directory)
        transient-history-file (expand-file-name "transient/history.el" user-cache-directory)))
#+end_src

** tramp
~tramp~ is a builtin package that  provides remote file editing capabilities for
Emacs.   It  maintains   the  connection   history  of   Tramp  connections   to
~~/.emacs.d/tramp~. Let us move it to the cache location.

#+begin_src emacs-lisp :lexical no
;; update tramp-persistency-file-name of tramp package to write
;; tramp connection details to cache location
(use-package tramp
  :config
  (setq tramp-persistency-file-name (expand-file-name "tramp" user-cache-directory)))
#+end_src
