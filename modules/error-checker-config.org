#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file
#+end_src

* Error Checkers Configuration                                        :TOC_4:
- [[#flycheck-configuration][Flycheck configuration]]
    - [[#disable-flycheck-in-org-mode-src][Disable flycheck in org mode src]]
  - [[#flycheck-inline][Flycheck Inline]]
  - [[#flycheck-posframe-and-posframe][Flycheck posframe and posframe]]
  - [[#flycheck-popup-tip][flycheck-popup-tip]]
  - [[#flycheck-eglot-integration][Flycheck Eglot integration]]
- [[#flymake-configuration][Flymake Configuration]]
  - [[#flymake-diagnostics-on-cursor-hover][Flymake diagnostics on cursor hover]]
  - [[#flymake-support-for-languagetool][Flymake support for LanguageTool]]
- [[#setting-priorities-between-flymake-and-flycheck][Setting priorities between FlyMake and FlyCheck]]

* Flycheck configuration
The ~Flycheck~ configuration enables to perform linting on all the buffers
using the appropriate **linter/compiler/syntax** checker(s).

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :quelpa
  (flycheck :fetcher github :repo "flycheck/flycheck")

  :ensure t

  ;; :init
  ;; (add-hook 'after-init-hook #'global-flycheck-mode)

  :hook
  (prog-mode . flycheck-mode)
  ;; (org-src-mode . aqua/disable-fylcheck-in-org-src-block)

  :preface
  (defvar counsel-flycheck-history nil
    "History for `counsel-flycheck'")

  (defun counsel-flycheck ()
    (interactive)
    (if (not (bound-and-true-p flycheck-mode))
        (message "Flycheck mode is not available or enabled")
      (ivy-read "Error: "
                (let ((source-buffer (current-buffer)))
                  (with-current-buffer (or (get-buffer flycheck-error-list-buffer)
                                           (progn
                                             (with-current-buffer
                                                 (get-buffer-create flycheck-error-list-buffer)
                                               (flycheck-error-list-mode)
                                               (current-buffer))))
                    (flycheck-error-list-set-source source-buffer)
                    (flycheck-error-list-reset-filter)
                    (revert-buffer t t t)
                    (split-string (buffer-string) "\n" t " *")))
                :action (lambda (s &rest _)
                          (-when-let* ( (error (get-text-property 0 'tabulated-list-id s))
                                        (pos (flycheck-error-pos error)) )
                            (goto-char (flycheck-error-pos error))))
                :history 'counsel-flycheck-history)))

  (defun aqua/disable-fylcheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  :config
  ;; flycheck also runs checkdoc on elisp code by default
  ;; this gets in the way for quick throwaway elisp scripts,
  ;; so we switch off checkdoc.
  ;; (add-to-list 'flycheck-disabled-checkers 'emacs-lisp-checkdoc)
  (add-hook 'org-src-mode-hook 'aqua/disable-fylcheck-in-org-src-block)
  (setq flycheck-checkers (--remove (eq it 'emacs-lisp-checkdoc) flycheck-checkers))

  (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
    [#b00000000
     #b00011000
     #b00110000
     #b01100000
     #b11000000
     #b01100000
     #b00110000
     #b00011000] nil nil nil))
#+END_SRC

*** Disable flycheck in org mode src
Disable ElDoc when point is on a Flycheck overlay. This prevents ElDoc and
Flycheck from fighting over the echo area.

#+begin_src emacs-lisp :lexical no :eval no :tangle no
  ;; disable flycheck in org mode src blocks
  (defun aqua/disable-flycheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'org-src-mode-hook #'aqua/disable-flycheck-in-org-src-block)
#+end_src


** Flycheck Inline
Package ~flycheck-inline~ provides an error display function to show Flycheck
errors inline, directly below their location in the buffer.

#+begin_src emacs-lisp :lexical no
(use-package flycheck-inline
  :config (global-flycheck-inline-mode))
#+end_src

** Flycheck posframe and posframe
The extension =flycheck-posframe= allows for display of flycheck error messages
via ~posframe~. Similarly the extension ~flycheck-pos-tip~ shows errors under a
point in the ~pos-tip~ popups.

#+begin_src emacs-lisp
;; Flycheck posframe and postip configuration
(if (display-graphic-p)
    ;; Flycheck messages through posframe
    ;; posframe integration with flycheck
    (use-package flycheck-posframe
      :after (flycheck)
      :custom-face
      (flycheck-posframe-face      ((t (:foreground ,(face-foreground 'success)))))
      (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
      :hook (flycheck-mode . flycheck-posframe-mode)
      :custom
      (flycheck-posframe-position 'window-bottom-left-corner)
      (flycheck-posframe-border-width 3)
      (flycheck-posframe-inhibit-functions
       '((lambda (&rest _) (bound-and-true-p company-backend)))))

  ;; Flycheck postip
  (use-package flycheck-pos-tip
    :after (flycheck)
    :defines flycheck-pos-tip-timeout
    :hook (flycheck-mode . flycheck-pos-tip-mode)
    :custom (flycheck-pos-tip-timeout 30)))
#+end_src

** flycheck-popup-tip
This is an extension for ~flycheck~ that implements minor-mode for displaying errors from Flycheck using ~popup.el~.

#+begin_src emacs-lisp :lexical no
;; flycheck-popup-tip
;; it implements minor-mode for displaying errors from Flycheck using popup.el.
(use-package flycheck-popup-tip
  :quelpa
  (:fetcher github :repo "https://github.com/flycheck/flycheck-popup-tip")
  :after (flycheck)
  :hook (flycheck-mode . flycheck-popup-tip-mode))
#+end_src

** Flycheck Eglot integration
This is a simple glue minor mode that allows Flycheck and Eglot to work
together. Thus, the Flycheck frontend can display the results of syntactic
checks performed by the LSP server.

#+begin_src emacs-lisp
  ;; Flycheck support for eglot
  (use-package flycheck-eglot
    :quelpa
    (flycheck-eglot :fetcher github :repo "intramurz/flycheck-eglot" :upgrade t)
    ;; :ensure t
    ;; :after (flycheck eglot)
    ;; :config
    ;; (global-flycheck-eglot-mode 1)
    ;; allowing only for golang mode for now so commenting above 3 lines
    :hook (go-mode . (lambda ()
                       ;; use regular flycheck checkers too...
                       (setq flycheck-eglot-exclusive nil)
                       (eglot-ensure)
                       ;; (flycheck-eglot-mode 1)
                       )))
#+end_src

* Flymake Configuration
=FlyMake= is an in-built on-the-fly syntax checker. Even though we are not using
=FlyMake= across for everything, =EGlot= uses it implicitly in favour of
=FlyCheck=. Otherwise, for everything else =FlyCheck= is the default error and
syntax checker configured.

=FlyMake= performs on-the-fly syntax checks on the files being edited using the
external syntax check tool (usually the compiler). Highlights erroneous lines
and displays associated error messages.

It is irrational to use both =FlyMake= and =FlycCheck= at the same time. We mainly
use =FlyCheck=, but =FlyMake= is configured to be able to use =flymake-languagetool= as it's better than =flycheck-languagetool=.

** Flymake diagnostics on cursor hover
This package shows =FlyMake= diagnostics on cursor hover. This works on both
graphical and non-graphical displays.

#+begin_src emacs-lisp
;; flymake-popon - Flymake diagnostics on cursor hover
;; dependency for flymake-popon
(use-package popon
  :quelpa
  (popon :fetcher git :url "https://codeberg.org/akib/emacs-popon.git"))

(use-package flymake-popon
  :quelpa
  (flymake-popon :fetcher git
                 :url "https://codeberg.org/akib/emacs-flymake-popon.git")
  :diminish flymake-popon-mode
  :hook (flymake-mode . flymake-popon-mode)
  :custom
  (flymake-popon-posframe-extra-arguments
   '(:poshandler posframe-poshandler-window-bottom-center)))
#+end_src

** Flymake support for LanguageTool
=LanguageTool= is a multilingual spelling, style, and grammar checker that helps
correct or paraphrase texts. =FlyMake= support for the same is provided through
this Emacs plugin.

#+begin_src emacs-lisp :lexical no
;; flymake-languagetool configuration
(use-package flymake-languagetool
  :ensure t

  :after (flymake)

  :quelpa
  (:fetcher "github" :repo "emacs-languagetool/flymake-languagetool")

  :hook
  ((text-mode       . flymake-languagetool-load)
   (org-mode        . flymake-languagetool-load)
   (markdown-mode   . flymake-languagetool-load))

  :init
  ;; Local server config
  (setq flymake-languagetool-server-jar "~/sw/tools/LanguageTool-6.2/languagetool-server.jar")
  ;; (setq flymake-languagetool-server-command (cl-case system-type
  ;;                                             (darwin '("languagetool-http-server"))
  ;;                                             (linux '("languagetool" "--http"))))

  :config
  ;; (add-to-list 'flymake-languagetool-ignore-faces-alist 'org-modern-block-name)
  ;; LanguageTool's whitespace rule can be a bit verbose in org-mode and it can
  ;; be disabled by adding its ID to this variable
  (add-to-list 'flymake-languagetool-disabled-rules "WHITESPACE_RULE"))
#+end_src

Now  we  can  run  =langtool-check= on  the  subsequent  grammatically
incorrect text  which is from  the LanguageTool website  which colours
errors in red,  when we click on  them we get the reason  why; then we
may invoke =langtool-correct-buffer= to quickly use the suggestions to
fix each correction, and  finally invoke =langtool-check-done= to stop
any remaining red colouring.

#+begin_example
LanguageTool offers spell  and grammar checking. Just  paste your text
here and click the 'Check Text'  button. Click the colored phrases for
details on potential errors. or use this text too see an few of of the
problems that LanguageTool  can detecd. What do you  thinks of grammar
checkers? Please  not that they  are not  perfect. Style issues  get a
blue marker: It's 5:35 P.M. in the afternoon. The weather was  nice on
Wednesday, 01 November 2023 --uh oh, that's the wrong date ;-)
#+end_example

#+begin_src emacs-lisp :lexical no
;; Quickly check, correct, then clean up /region/ with M-^
(eval-after-load 'langtool
  (progn
    (add-hook 'langtool-error-exists-hook
              (lambda ()
                (langtool-correct-buffer)
                (langtool-check-done)))

    (global-set-key "\M-^"
                    (lambda ()
                      (interactive)
                      (message "Grammar checking begun ...")
                      (langtool-check)))))
#+end_src

* Setting priorities between FlyMake and FlyCheck
It seems that the built-in Emacs based =FlyMake= syntax checker is better for
Emacs Lisp than =FlyCheck=, so let's use that for ELisp.

#+begin_src emacs-lisp :lexical no
;; using FlyMake for emacs-lisp instead of FlyCheck
(use-package flymake
  :hook ((emacs-lisp-mode . (lambda () (flycheck-mode -1)))
         (emacs-lisp-mode . flymake-mode))
  :bind (:map flymake-mode-map
              ("C-c ! n" . flymake-goto-next-error)
              ("C-c ! p" . flymake-goto-prev-error)))
#+end_src
