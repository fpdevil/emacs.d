#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file
#+end_src
#+TITLE: Language Server Protocol configuration
#+AUTHOR: Sampath Singamsetty

* LSP Configuration                                                     :TOC_4:
  - [[#installation-and-setup-of-lsp][Installation and setup of LSP]]
  - [[#lsp-servers][LSP Servers]]
  - [[#lsp-ui][LSP UI]]
  - [[#lsp-ivy][LSP ivy]]
  - [[#lsp-flycheck][LSP Flycheck]]
    - [[#concult-flycheck][Concult flycheck]]
  - [[#treemacs][Treemacs]]
  - [[#lsp-treemacs][LSP Treemacs]]
  - [[#treemacs-all-the-icons][Treemacs all-the-icons]]
  - [[#consult-lsp][Consult LSP]]
  - [[#company-lsp][Company LSP]]
    - [[#company-completion-provider-for-lsp][Company completion provider for LSP]]

** Installation and setup of LSP
LSP decouples the tooling into servers and clients, with the
former powering all the intelligent activities, and the
latter being integrated into any development tool of your
choice.
More details about the inner workings of =LSP= are available
at [[https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/][LSP]]

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp
             lsp-deferred
             lsp-enable-which-key-integration)

  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")

  ;; remove the lsp-server from the minor mode indicator in the
  ;; mode line and only display "LSP"
  ;; (diminish 'lsp-mode "LSP")

  :hook
  ((js-mode        . lsp-deferred)
   (css-mode       . lsp-deferred)
   (html-mode      . lsp-deferred)
   (rust-mode      . lsp-deferred)
   (go-mode        . lsp-deferred)
   (xml-mode       . lsp-deferred)
   (nxml-mode      . lsp-deferred)
   (c++-mode       . lsp-deferred)
   (c-mode         . lsp-deferred)
   (c-or-c++-mode  . lsp-deferred)
   (python-mode    . lsp-deferred)
   (lsp-mode       . efs/lsp-mode-setup))

  ;; :bind
  ;; (:map company-active-map
  ;;   ("<tab>" . company-complete-selection))
  ;; (:map lsp-mode-map
  ;;   ("<tab>" . company-indent-or-complete-common))

  :commands
  (lsp lsp-deferred)

  :init (progn
          (with-eval-after-load "lsp-go"
            (lsp-register-client
             (make-lsp-client :new-connection (lsp-tramp-connection "gopls")
                              :activation-fn (lsp-activate-on "go" "go.mod")
                              :major-modes '(go-mode)
                              :remote? t
                              :priority '1
                              :server-id 'lsp-go-remote)))

          ;; (with-eval-after-load "lsp-rust"
          ;;       (lsp-register-client
          ;;        (make-lsp-client
          ;;         :new-connection (lsp-tramp-connection "rust-analyzer")
          ;;         :remote? t
          ;;         :major-modes '(rust-mode)
          ;;         :initialization-options 'lsp-rust-analyzer--make-init-options
          ;;         :notification-handlers (ht<-alist lsp-rust-notification-handlers)
          ;;         :action-handlers (ht ("rust-analyzer.runSingle" #'lsp-rust--analyzer-run-single))
          ;;         :library-folders-fn (lambda (_workspace) lsp-rust-library-directories)
          ;;         :after-open-fn (lambda ()
          ;;                          (when lsp-rust-analyzer-server-display-inlay-hints
          ;;                            (lsp-rust-analyzer-inlay-hints-mode)))
          ;;         :ignore-messages nil
          ;;         :server-id 'rust-analyzer-remote)))
          )

  :custom
  (setq lsp-completion-enable t
        lsp-completion-show-detail t
        lsp-completion-show-kind t
        lsp-enable-indentation t
        lsp-auto-guess-root t
        ;; enable log for debug lsp-workspace-show-log will switch
        ;; to the corresponding log buffer.
        ;; set this to t, else TRAMP + lsp-mode won't work
        lsp-log-io t

        ;; turn off for better performance
        lsp-enable-symbol-highlighting nil
        lsp-enable-on-type-formatting  nil

        ;; reduce unexpected modifications to code
        ;; lsp-enable-on-type-formatting nil
        ;; disable below 2 features that have great potential to make slow
        lsp-enable-folding nil
        lsp-enable-text-document-color nil
        lsp-enable-links nil
        lsp-signature-auto-activate nil
        lsp-signature-render-documentation t

        ;; lsp-print-performance t
        lsp-eldoc-hook nil
        lsp-eldoc-render-all t

        ;; this is set in config.org (1Mb from default of 4Kb or 4096)
        read-process-output-max (* 1024 1024 10)

        lsp-idle-delay 0.5
        lsp-enable-file-watchers nil)

  :config (progn
            (with-no-warnings
              (lsp-enable-which-key-integration t))

          (dolist (dir '(
                         "[/\\\\]\\.venv$"
                         "[/\\\\]\\.mypy_cache$"
                         "[/\\\\]__pycache__$"
                         "[/\\\\]\\.vscode$"
                         ))
            (push dir lsp-file-watch-ignored)))

  :preface
  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)))
#+end_src

** LSP Servers
~LSP~ uses servers which needs to be installed for gaining the completion
phenomena. Frequently used ones are all embedded into a single function call as below:

#+begin_src emacs-lisp :lexical no
;; LSP servers to be installed
(defun aqua/install-lsp-servers ()
  (interactive)
  (lsp-install-server t 'pyright)
  (lsp-install-server t 'rust-analyzer)
  (lsp-install-server t 'eslint)
  (lsp-install-server t 'html-ls)
  (lsp-install-server t 'json-ls)
  (lsp-install-server t 'ts-ls)
  (lsp-install-server t 'css-ls)
  (lsp-install-server t 'tailwindcss)
  (lsp-install-server t 'clangd))
#+end_src

Any required language servers will be installed automatically when the file is
opened for editing and they are usually installed to ~$HOME/.emacs.d/.cache~. We
can manipulate and install manually as well, for instance here is for
=javascript= lsp.

#+begin_src shell :tangle no
npm -g --prefix $HOME/.emacs.d/.cache/lsp/npm/typescript-language-server i typescript-language-server
npm -g --prefix $HOME/.emacs.d/.cache/lsp/npm/typescript i typescript
#+end_src

** LSP UI
LSP UI is used by various packages requiring UI elements in LSP. Eg.,
~lsp-ui-flycheck-list~ opens a window where we can see various coding errors
during coding. We can use ~C-c l t~ to toggle several UI elements. We have also
remapped some of the ~xref-find~ functions, so that we can easily jump around
between symbols using ~M-., M-, and M-?~ keys.

#+begin_src emacs-lisp :lexical no
;; lsp-ui
;; lsp ui configuration
;; lsp-ui gives blue colored documentation boxes and the sidebar info
(use-package lsp-ui
  ;;:ensure t
  :after (lsp-mode)

  :hook (lsp-mode . lsp-ui-mode)

  ;; bindings
  :bind (("C-c l i" . lsp-ui-imenu)
         (:map lsp-ui-mode-map
               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
               ([remap xref-find-references]  . lsp-ui-peek-find-references)))

  :custom ((lsp-ui-sideline-enable              t)
           (lsp-ui-sideline-delay               0.05)
           (lsp-ui-sideline-show-hover          nil)
           (lsp-ui-sideline-ignore-duplicate    t)
           (lsp-ui-sideline-show-diagnostics    t)
           (lsp-ui-sideline-show-code-actions   nil)
           (lsp-ui-sideline-update-mode         'point)
           (lsp-ui-peek-enable                  t)
           (lsp-ui-peek-always-show             t)
           (lsp-ui-doc-enable                   t)
           (lsp-ui-doc-header                   t)
           (lsp-ui-doc-show-with-cursor         t)
           (lsp-ui-doc-include-signature        t)
           (lsp-ui-doc-use-childframe           nil)
           (lsp-ui-doc-position                 'at-point)
           (lsp-ui-doc-delay                    0.3 "higher than eldoc delay")
           (lsp-ui-doc-max-width                100)
           (lsp-ui-doc-max-height               30)
           (lsp-ui-doc-border                   (face-foreground 'default))
           (lsp-ui-sideline-code-actions-prefix ""))

  :config (progn
            (lsp-ui-doc-show)

            ;; Information on right fringe
            (add-to-list 'lsp-ui-doc-frame-parameters '(right-fringe . 8))

            ;; `C-g'to close doc
            (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

          ;; Reset `lsp-ui-doc-background' after loading theme
          (add-hook 'after-load-theme-hook
                    (lambda ()
                      (setq lsp-ui-doc-border (face-foreground 'default))
                      (set-face-background 'lsp-ui-doc-background
                                           (face-background 'tooltip))))))
#+end_src

** LSP ivy
#+begin_src emacs-lisp :lexical no
;; lsp ivy
(use-package lsp-ivy
  :if (package-installed-p 'ivy)
  :after lsp-mode
  :commands
  lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol)
#+end_src

** LSP Flycheck
#+begin_src emacs-lisp :lexical no
  ;; LSP Flycheck
  (defvar-local aqua/flycheck-local-cache nil)

  (defun aqua/flycheck-checker-get (fn checker property)
    (or (alist-get property (alist-get checker aqua/flycheck-local-cache))
        (funcall fn checker property)))

  (advice-add 'flycheck-checker-get :around 'aqua/flycheck-checker-get)

  (add-hook 'lsp-managed-mode-hook
            (lambda ()
              (when (derived-mode-p 'typescript-mode)
                (setq aqua/flycheck-local-cache
                      '((lsp . ((next-checkers . (javascript-eslint))))))
                (add-node-modules-path))))

  (add-hook 'lsp-managed-mode-hook
            (lambda ()
              (when (derived-mode-p 'js2-mode)
                (setq aqua/flycheck-local-cache
                      '((lsp . ((next-checkers . (javascript-eslint)))))))))

  (add-hook 'lsp-managed-mode-hook
            (lambda ()
              (when (derived-mode-p 'python-mode)
                (setq aqua/flycheck-local-cache
                      '((lsp . ((next-checkers . (python-flake8)))))))))
#+end_src

*** Concult flycheck
The module provides integration of flycheck with consult.
#+begin_src emacs-lisp :lexical no
;; using consult with flycheck
(use-package consult-flycheck
  :commands (consult-flycheck))
#+end_src

** Treemacs
Treemacs is a tree layout file explorer for Emacs and it provides UI elements that may be used by the LSP UI. =treemacs= is a dependency for the =lsp-treemacs=.

#+begin_src emacs-lisp :lexical no
;; treemacs configuration
;; treemacs: a tree layout file explorer for Emacs
(use-package treemacs
  :ensure t
  :quelpa
  (:fetcher github :repo "https://github.com/Alexander-Miller/treemacs")
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :commands (treemacs)
  :config
  (progn
    (setq treemacs-follow-after-init t
          treemacs-width-is-initially-locked nil
          treemacs-width 30
          treemacs-indentation 1
          treemacs-follow-after-init t
          treemacs-recenter-after-file-follow nil
          treemacs-collapse-dirs (if (executable-find "python") 3 0)
          treemacs-silent-refresh t
          treemacs-silent-filewatch t
          treemacs-change-root-without-asking t
          treemacs-sorting 'alphabetic-desc
          treemacs-show-hidden-files t
          treemacs-never-persist nil
          treemacs-is-never-other-window t
          treemacs-resize-icons 20
          treemacs-indentation-string (propertize " ⫶ " 'face 'font-lock-comment-face))

    ;; do not show files in .gitignore
    (setq treemacs-python-executable (executable-find "python3"))
    (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'extended))
      (`(t . _)
       (treemacs-git-mode 'simple))))

  (add-hook 'treemacs-mode-hook
	        (lambda ()
	          (message "treemacs-mode-hook `%s'" (current-buffer))
	          (text-scale-adjust -1)))

  :bind
  ;; keymap bindings
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+end_src

** LSP Treemacs

=lsp-treemacs= serves as an integration bridge between =lsp-mode= and =treemacs= and its an implementation of the treeview controls using treemacs as a tree renderer.

#+begin_src emacs-lisp :lexical no
  ;; lsp-treemacs configuration
  (use-package lsp-treemacs
    :ensure t

    :quelpa
    (:fetcher github :repo "https://github.com/emacs-lsp/lsp-treemacs")

    :after (lsp treemacs)

    :commands
    (lsp-treemacs-errors-list)

    ;; enable bidirectional synchronization of lsp workspace folders
    ;; and treemacs projects.
    :hook
    (lsp-mode . lsp-treemacs-sync-mode))
#+end_src

** Treemacs all-the-icons
Configuration of =all-the-icons= integration for =treemacs=

#+begin_src emacs-lisp :lexical no
  ;; all-the-icons integration for treemacs
  (use-package treemacs-all-the-icons
    :after (treemacs)
    :quelpa
    (treemacs-all-the-icons :fetcher github
                            :repo "Alexander-Miller/treemacs"
                            :files ("src/extra/treemacs-all-the-icons.el")))
#+end_src

** Consult LSP
Helm and Ivy users have extra commands that leverage lsp-mode extra information.

#+begin_src emacs-lisp
;; consult-lsp
(use-package consult-lsp
  :defer t

  :quelpa
  (:fetcher github :repo "https://github.com/gagbo/consult-lsp")

  :commands
  (consult-lsp-symbols consult-lsp-diagnostics consult-lsp-file-symbols))
#+end_src

** Company LSP
=company-lsp= package is not used anymore and hence qualified with *tangle: no*

#+begin_src emacs-lisp :tangle no
;; setting company backends for js completion
;; THIS IS NOT AVAILABLE, SO USE
;; USE :CONFIG (setq lsp-completion-provider :capf) IN COMPANY
(use-package company-lsp
  :defer t
  :after lsp-mode
  :config (push 'company-lsp company-backends)
  :config
  (setq company-lsp-cache-candidates 'auto
        company-lsp-async t
        company-lsp-enable-snippet nil
        company-lsp-enable-recompletion t))
#+end_src

*** Company completion provider for LSP
Setting up the completion provider for =LSP= to company based =capf=.
#+begin_src emacs-lisp :lexical no
;; Use company-capf as a completion provider.
;;
;; To Company-lsp users:
;;   Company-lsp is no longer maintained and has been removed from MELPA.
;;   Please migrate to company-capf.
(with-eval-after-load "company"
  (setq lsp-completion-provider :capf))
#+end_src
