#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file
#+end_src

* Flyspell configuration

    Enable spell check on all text buffers. Flyspell for other modes is added
    in the specific mode configuration. We don't defer loading of Flyspell as
    it has some interactions with org-mode (setting flyspell-delayed-commands)
    that cause intermittent start up errors when loading is deferred.

#+begin_src emacs-lisp
  ;; flyspell setup
  (use-package flyspell
      :ensure t
      :demand t
      ;;:ensure-system-package aspell
      :init
      ;; set the location of aspell
      (setq ispell-program-name (shell-command-to-string "printf %s \"$(which aspell)\""))
      ;; globally or selectively enable flyspell
      ;; (add-hook 'after-init-hook #'global-flycheck-mode)
      ;; (dolist (hook '(text-mode-hook org-mode-hook prog-mode-hook))
      ;;   (add-hook hook (lambda () (flyspell-mode 1))))
      :hook ((prog-mode . flyspell-prog-mode)
             (org-mode  . flyspell-mode)
             (text-mode . flyspell-mode))
      :config
      ;; Following setup that uses run-together mode for aspell is taken from:
      ;; http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html
      (defun flyspell-detect-ispell-args (&optional run-together)
        "if RUN-TOGETHER is true, spell check the CamelCase words."
        (let (args)
          (cond
           ((string-match  "aspell$" ispell-program-name)
            ;; Force the English dictionary for aspell
            ;; Support Camel Case spelling check (tested with aspell 0.6)
            (setq args (list "--sug-mode=ultra" "--lang=en_US"))
            (if run-together
                (setq args (append args '("--run-together" "--run-together-limit=5" "--run-together-min=2")))))
           ((string-match "hunspell$" ispell-program-name)
            ;; Force the English dictionary for hunspell
            (setq args "-d en_US")))
          args))
      ;; ispell-cmd-args is useless, it's the list of *extra* arguments we
      ;; will append to the ispell process when "ispell-word" is called.
      ;; ispell-extra-args is the command arguments which will *always* be
      ;; used when start ispell process
      ;; Please note when you use hunspell, ispell-extra-args will NOT be used.
      ;; Hack ispell-local-dictionary-alist instead.
      (setq-default ispell-extra-args (flyspell-detect-ispell-args t))

      ;; Improves flyspell performance by preventing messages from being displayed for
      ;; each word when checking the entire buffer.
      (setq flyspell-issue-message-flag nil)



      ;; (setq ispell-cmd-args (flyspell-detect-ispell-args))
      (defadvice ispell-word (around my-ispell-word activate)
        (let ((old-ispell-extra-args ispell-extra-args))
          (ispell-kill-ispell t)
          (setq ispell-extra-args (flyspell-detect-ispell-args))
          ad-do-it
          (setq ispell-extra-args old-ispell-extra-args)
          (ispell-kill-ispell t)))

      (defadvice flyspell-auto-correct-word (around my-flyspell-auto-correct-word activate)
        (let ((old-ispell-extra-args ispell-extra-args))
          (ispell-kill-ispell t)
          ;; use emacs original arguments
          (setq ispell-extra-args (flyspell-detect-ispell-args))
          ad-do-it
          ;; restore our own ispell arguments
          (setq ispell-extra-args old-ispell-extra-args)
          (ispell-kill-ispell t)))

      ;; flycheck also runs checkdoc on elisp code by default
      ;; this gets in the way for quick throwaway elisp scripts,
      ;; so we switch off checkdoc.
      (setq-default ispell-extra-args '("--sug-mode=ultra" "--lang=en_GB" "--run-together")
                    ispell-dictionary "british"
                    ispell-check-comments  t
                    flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))

      ;; ispell can be configured to skip over regions that match regexes
      ;; skip over :PROPERTIES: and :LOGBOOK: drawers as well as SRC AND EXAMPLE blocks
      (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
      (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
      (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXPORT" . "#\\+END_EXPORT"))
      (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE")))

    ;; (eval-after-load "flyspell"
    ;;   '(progn
    ;;      (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
    ;;      (define-key flyspell-mouse-map [mouse-3] #'undefined)))

    ;; mouse right click
    (eval-after-load "flyspell"
      '(progn
         (define-key flyspell-mouse-map (kbd "<down-mouse-3>") #'flyspell-correct-word)
         (define-key flyspell-mouse-map (kbd "<mouse-3>") 'undefined)))
#+end_src


** Lazy initiation of flyspell
Improve Emacs flyspell responsiveness using idle timers.

#+begin_src emacs-lisp :lexical no
  ;; lazy initiation of flyspell
  (use-package flyspell-lazy
    :disabled t
    :ensure t
    :config (flyspell-lazy-mode))
#+end_src

** Flyspelll popup and ivy integration
#+begin_src emacs-lisp
;; Distraction-free words correction with flyspell via selected interface.
(use-package flyspell-correct
  :defer 3
  :after (flyspell)
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

;; Correcting words with flyspell via Ivy
(use-package flyspell-correct-ivy
  :after (flyspell-correct))
#+end_src

* Dictionary from Synasaurus
An extensible thesaurus mode for emacs from [[https://github.com/hpdeifel/synosaurus][Synosaurus]]. It is a thesaurus
fontend for Emacs with pluggable backends.
#+begin_src emacs-lisp :lexical no
;; Synosaurus is a thesaurus fontend for Emacs with pluggable backends.
(use-package synosaurus
  :after (flycheck)
  :diminish synosaurus-mode
  :init
  (synosaurus-mode)
  :config  (setq synosaurus-choose-method 'popup) ;; 'ido is default.
  (global-set-key (kbd "M-#") 'synosaurus-choose-and-replace))
#+end_src
