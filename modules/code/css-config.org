:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
:END:

#+begin_src emacs-lisp :exports none
;;; package --- documentation modes configuration -*- lexical-binding:t ; -*-
;;;
;;; Commentary
;;; DO NOT EDIT THIS FILE DIRECTLY
;;; This is a file generated from a literate programing source file
;;; ORG mode configuration
;;; Filename           : css-config.el
;;; Description        : CSS configuration and development
;;; Date               :
;;; Last Modified Date :
;;
;;
;;
;;; Code:
;;;
#+end_src

#+TITLE: CSS Configuration for Emacs
#+STARTUP: indent

* CSS Configuration                                                     :TOC:
- [[#for-handling-css][For handling CSS]]
  - [[#sorting-and-eldoc-support-for-css][Sorting and Eldoc support for CSS]]
- [[#tailwind-css-configuration][Tailwind CSS Configuration]]
  - [[#css-in-js][CSS in JS]]

* For handling CSS
For =css= development we can resort to the =css-mode=.

#+begin_src emacs-lisp :lexical no
;; css-mode
(use-package css-mode
  :ensure t
  :mode "\\.css\\'"
  :mode "\\(\\.css\\|\\.js$\\)\\'"
  :config
  (add-hook 'css-mode-hook
            (lambda()
              (add-to-list (make-local-variable 'company-backends)
                           '(company-css
                             company-files
                             company-yasnippet
                             company-capf))))

  (setq css-indent-offset 4)
  ;; (setq flycheck-stylelintrc "~/.stylelintrc")
  )
#+end_src

** Sorting and Eldoc support for CSS
Here we use packages for sorting the css as well as providing eldoc support for
=css=. Sort arranges selected selectors, to clean up your code while Eldoc shows
completion options in the minibuffer.

#+begin_src emacs-lisp :lexical no
;; sort and eldoc for css
(use-package com-css-sort
  :commands
  (com-css-sort com-css-sort-attributes-block com-css-sort-attributes-document)
  :config
  (setq com-css-sort-sort-type 'alphabetic-sort))

;css-eldoc
(use-package css-eldoc
  :commands turn-on-css-eldoc
  ;; add a hook if you want always to see the selector options in the minibuffer
  :config
  (add-hook 'css-mode-hook 'turn-on-css-eldoc)
  (add-hook 'scss-mode-hook 'turn-on-css-eldoc))
#+end_src


* Tailwind CSS Configuration

=TailWind CSS= is a utility-first CSS framework packed with classes like flex,
pt-4, text-center and rotate-90 that can be composed to build any design,
directly in your markup.

#+begin_src emacs-lisp :lexical no
;; TailWind CSS LSP Configuration
(use-package lsp-tailwindcss
  :ensure t
  :quelpa
  (:fetcher github :repo "https://github.com/merrickluo/lsp-tailwindcss")
  :init
  (setq lsp-tailwindcss-add-on-mode t)
  :config
  (setq lsp-tailwindcss-major-modes
        '(typescript-tsx-mode
          js-mode
          rjsx-mode
          web-mode
          html-mode
          css-mode
          svelte-mode))
  (add-hook 'before-save-hook 'lsp-tailwindcss-rustywind-before-save))
#+end_src

** CSS in JS
An emacs minor mode for using =css= in =js= mode.

#+begin_src emacs-lisp :lexical no
;; css-in-js
(use-package css-in-js
  :ensure t
  :defer t
  :quelpa
  (css-in-js :fetcher github :repo "orzechowskid/css-in-js.el")
  :init
  (css-in-js-mode t))
#+end_src
