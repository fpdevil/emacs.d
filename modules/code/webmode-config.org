:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
:END:

#+begin_src emacs-lisp :exports none
;;; package --- documentation modes configuration -*- lexical-binding:t ; -*-
;;;
;;; Commentary
;;; DO NOT EDIT THIS FILE DIRECTLY
;;; This is a file generated from a literate programing source file
;;; ORG mode configuration
;;; Filename           : webmode-config.el
;;; Description        : Web Development Support
;;; Date               :
;;; Last Modified Date :
;;
;;
;; References
;; https://tuhdo.github.io/c-ide.html
;;
;;; Code:
;;;
#+end_src

#+TITLE: Web development configuration
#+STARTUP: indent

* Webmode configuration :TOC_4:
- [[#web-mode][Web mode]]
    - [[#install-company-web][Install company-web]]
    - [[#company-backend-configuration][Company backend configuration]]
- [[#html-snippet-support-for-emacs-via-emmet][HTML Snippet support for Emacs via Emmet]]
  - [[#indenting-html][Indenting HTML]]
- [[#webpack-dev-server][Webpack dev server]]

* Web mode
~web-mode.el~ is an emacs major mode for editing web templates aka HTML files
embedding parts (CSS/JavaScript) and blocks (pre rendered by client/server side
engines).

~web-mode~ specifically makes it more comfortable to edit mixed files
(javascript + html in same document, jsx etc.).

Comprehensive usage [[https://web-mode.org/][Documentation]] is available.

A few custom functions and hooks to be used while configuring the ~web-mode~ are
defined here:

#+begin_src emacs-lisp :lexical no
;; custom auxiliary hooks and functions for web-mode
(defun aqua/complete-web-mode ()
  (interactive)
  (let ((current-scope (web-mode-language-at-pos (point))))
    (cond ((string-equal "javascript" current-scope)
           (company-tide 'interactive))
          ((string-equal "css" current-scope)
           (company-css 'interactive))
          (t
           (company-dabbrev-code 'interactive)))))

(defun aqua/eldoc-web-mode ()
  (let ((current-scope (web-mode-language-at-pos (point))))
    (cond ((string-equal "javascript" current-scope)
           (tide-eldoc-function))
          ((string-equal "css" current-scope)
           (css-eldoc-function))
          (t
           nil))))

(defun aqua/setup-web-mode-mixed ()
  (web-mode)
  (aqua/activate-tide)
  (setq-local eldoc-documentation-function #'aqua/eldoc-web-mode))


(defun aqua/web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-extra-snippets '(
                                  (nil . (
                                          ("html5" . "<!DOCTYPE html>\n<html>\n<head>\n<title></title>\n<meta charset=\"utf-8\" />\n</head>\n<body>\n    |\n</body>\n</html>")
                                          )
                                       ))))
#+end_src

Now for the actual ~web-mode~ package installation, setup and configuration:

#+begin_src emacs-lisp :lexical no
;; install and configure web-mode
(use-package web-mode
  :after (tide css-eldoc)

  :hook ((web-mode . aqua/web-mode-hook))

  :mode
  (("\\.ts[x]?\\'" . web-mode)
   ;;("\\.jsx?$"   . web-mode)
   ("\\.html?$"    . aqua/setup-web-mode-mixed)
   ("\\.json\\'"   . web-mode))

  :init
  (require 'web-mode)

  :bind
  (:map web-mode-map ([(control return)] . aqua/complete-web-mode))

  :config
  (setq web-mode-enable-auto-quoting              t
        web-mode-enable-auto-opening              t
        web-mode-enable-auto-closing              t
        web-mode-enable-auto-pairing              t
        web-mode-markup-indent-offset             4
        web-mode-css-indent-offset                4
        web-mode-code-indent-offset               4
        web-mode-enable-auto-indentation          nil
        web-mode-enable-auto-pairing              nil
        web-mode-enable-part-face                 t
        web-mode-enable-current-column-highlight  t
        web-mode-enable-current-element-highlight t
        web-mode-content-types-alist
        '(("jsx" . "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'"))
        web-mode-engines-alist
        '(("django" . "\\.html\\'"))))
#+end_src

*** Install company-web
~company-web~ is a company variant of the ~ac-html~, complete for ~web~, ~html~, ~emmet~,
~jade~, ~slim~ modes. It is same as ~ac-html~, but for _company_ completion framework.

#+begin_src emacs-lisp :lexical no
;; using company-web
(use-package company-web
  :ensure t
  :config
  (add-hook 'web-mode-hook
            (lambda()
              (cond ((equal web-mode-content-type "html")
                     (aqua/web-html-setup)))))
  (add-hook 'web-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-web-html company-files))
              (company-mode t))))
#+end_src


*** Company backend configuration
We will not use the below configuration, so setting the =tang;e= option to _no_.

#+begin_src emacs-lisp :tangle no
(defun aqua/web-html-setup ()
  "Setup for web-mod html files."
  (message "web-mode using html related setup")
  (flycheck-add-mode 'html-tidy 'web-mode)
  (flycheck-select-checker 'html-tidy)
  (set (make-local-variable 'company-backends)
       '(company-css
         company-web-html
         company-yasnippet
         company-files
         company-keywords))
  (add-hook 'before-save-hook 'sgml-pretty-print))
(add-hook 'web-mode-hook 'aqua/web-html-setup)
#+end_src


* HTML Snippet support for Emacs via Emmet

=emmet= provides very useful snippets for html code completion.

#+begin_src emacs-lisp :lexical no
;; emmet mode
(use-package emmet-mode
  :defer 3
  :diminish emmet-mode
  ;;:init (require 'emmet-mode)
  :config
  (progn
    (add-hook 'html-mode-hook 'emmet-mode)
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook  'emmet-mode)
    (add-hook 'rjsx-mode-hook 'emmet-mode)
    (add-hook 'js-mode-hook   'emmet-mode)
    (add-hook 'web-mode-hook  'emmet-mode))

  ;; Display an HTML expansion preview as I type
  ;; Press C-j then start typing; e.g., C-j #q.x.y>p>b RET
  (setq emmet-preview-default t)
  (setq emmet-self-closing-tag-style " /") ; default being just "/"

  ;; After expanding, positioned the cursor between first empty quotes.
  ;; The preview can help with tricky CSS precedence rules; e.g., C-j
  ;; gives the same thing for: a>b+c>d   ==  a>(b+(c>d))
  ;; E.g., C-j #q[name] RET
  (setq emmet-move-cursor-between-quotes t))
#+end_src

** Indenting HTML
Whitespace in HTML documents has no effect on what browsers display, so you can
add indentation freely in the source to make it look nice when editing.

#+begin_src emacs-lisp :lexical no
(add-hook 'html-mode-hook
        (lambda ()
          ;; Default indentation is usually 2 spaces, changing to 4.
          (set (make-local-variable 'sgml-basic-offset) 4)))

;; SGML mode can also guess the indentation of an opened file
;; with ‘sgml-guess-indent’ if it is added in a hook.
(add-hook 'sgml-mode-hook
        (lambda ()
          ;; Default indentation to 2, but let SGML mode guess, too.
          (set (make-local-variable 'sgml-basic-offset) 2)
          (sgml-guess-indent)))
#+end_src

* Webpack dev server
An Emacs mode for controlling ~webpack-dev-server~.

#+begin_src emacs-lisp :lexical no
  ;; webpack development server
  (use-package webpack-dev-server
    :straight
    (webpack-dev-server :type git :host github :repo "creichert/webpack-dev-server.el")

    :commands (webpack-dev-server)

    ;; Use any custom command to launch webpack
    :custom
    (webpack-dev-server-command  "make webpack-dev-server")

    :bind (("C-c e p" . webpack-dev-server)
           ("C-c e k" . webpack-dev-server-stop)
           ("C-c e b" . webpack-dev-server-browse)))
#+end_src
