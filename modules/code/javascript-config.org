:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
:END:

#+begin_src emacs-lisp :lexical no
;;;-*- lexical-binding:t ; -*-
;;; package --- javascript configuration
;;;
;;; Commentary
;;; DO NOT EDIT THIS FILE DIRECTLY
;;; This is a file generated from a literate programing source file
;;; ORG mode configuration
;;; Filename           : javascript-config.el
;;; Description        : For javascript completion and syntax checking assistance
;;; Date               :
;;; Last Modified Date :
;;
;;
;;; Code:
;;;
#+end_src

#+STARTUP: indent

* Javascript and ReactJS configuration for Emacs :TOC_4:
- [[#javascript-development][JavaScript development]]
  - [[#for-node-js][For node js]]
  - [[#js2-mode][JS2 Mode]]
  - [[#jsdoc-comments-integration][JSDoc comments integration]]
  - [[#prettierjs][PrettierJS]]
  - [[#sveltejs][SvelteJS]]
- [[#jsx-support-for-react][JSX Support for React]]
  - [[#react-snippets][React Snippets]]
  - [[#react--redux-snippets][React & Redux snippets]]
- [[#linting-configuration][Linting configuration]]
  - [[#eslint][ESLint]]

* JavaScript development
With a few custom settings and packages targeted for ~javascript~ and variants
like ~React~, ~svelte~ etc we can configure Emacs as a sophisticated IDE capable of
handling full fledged ~javascript~ project development.

We will configure supporting packages for development with =nodejs= and
=javascript= in general.

** For node js

#+begin_src emacs-lisp :lexical no
;; Bring node.js to Emacs
(use-package nodejs-repl
  :defer t
  :commands (nodejs-repl
             nodejs-repl-send-buffer
             nodejs-repl-switch-to-repl
             nodejs-repl-send-region
             nodejs-repl-send-last-sexp
             nodejs-repl-execute
             nodejs-repl-load-file)
  :if (executable-find "node"))
#+end_src

Disabling the below block:
#+begin_src emacs-lisp :tangle no
;; package to have binaries in `node_modules' available.
(use-package add-node-modules-path
  :ensure t
  :commands (add-node-modules-path)
  :init
  (add-hook 'js-mode-hook #'add-node-modules-path)
  :config
    (eval-after-load 'js2-mode
      '(add-hook 'js2-mode-hook #'add-node-modules-path))
    (eval-after-load 'web-mode
      '(add-hook 'web-mode-hook #'add-node-modules-path))
    (eval-after-load 'typescript-mode
      '(add-hook 'typescript-mode-hook #'add-node-modules-path))
    (eval-after-load 'typescript-ts-mode
      '(add-hook 'typescript-mode-hook #'add-node-modules-path))
    (eval-after-load 'tsx-ts-mode
      '(add-hook 'typescript-mode-hook #'add-node-modules-path)))
#+end_src

** JS2 Mode

~js2-mode~ is an improved JavaScript editing mode for GNU Emacs

#+begin_src emacs-lisp
(use-package js2-mode
  :mode ("\\.js\\'" . js2-minor-mode)

  :commands (js2-mode
             js2-minor-mode)

  :hook (js2-mode . flycheck-mode)

  :defines js2-mode-map

  :init (progn
          ;; Setup node.js path
          (setenv "NODE_PATH" (concat (concat (getenv "HOME")
                                              "/node_modules")
                                      ":"
                                      (concat (getenv "HOME")
                                              "/local/lib/node_modules")
                                      ":/usr/local/lib/node_modules:/usr/local/lib/node"
                                      ":" (getenv "NODE_PATH")))

          ;; Check for node access
          (defun check-npm-module (&optional module local)
            (and (executable-find "npm")
                 (= 0 (call-process "npm"  nil nil nil "list"
                                    (if local " " "-g")
                                    (if module module "tern"))))))

  ;; :ensure-system-package ((typescript-language-server            . "npm install -g typescript-lsp")
  ;;                         (javascript-typescript-language-server . "npm install -g javascript-typescript-language-server")
  ;;                         (tsc                                   . "npm install -g typescript")
  ;;                         (tern                                  . "npm install -g tern")
  ;;                         (flow-bin                              . "npm install -g flow-bin"))

  :custom ((js2-basic-offset                       4)
           (js2-allow-rhino-new-expr-initializer   nil)
           (js2-auto-indent-p                      nil)
           (js2-enter-indents-newline              nil)
           (js2-idle-timer-delay                   0.1)
           (js2-indent-on-enter-key                nil)
           (js2-mirror-mode                        nil)
           (js2-strict-inconsistent-return-warning nil)
           (js2-auto-indent-p                      t  )
           (js2-include-rhino-externs              nil)
           (js2-include-gears-externs              nil)
           (js2-concat-multiline-strings          'eol)
           (js2-rebind-eol-bol-keys                nil)
           (js2-show-parse-errors                  nil)
           (js2-strict-missing-semi-warning        nil)
           (js2-strict-trailing-comma-warning      t))

  :config (progn
            (setq js-indent-level 4)
            (add-to-list 'interpreter-mode-alist
                         '("node" . js2-mode))
            (setq-default js2-global-externs
                          '("module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))))
#+end_src

** JSDoc comments integration
#+begin_src emacs-lisp
  ;; add jsdoc comments via Ctrl+c i
  (use-package js-doc
    :commands (js-doc-insert-function-doc
               js-doc-insert-file-doc
               js-doc-insert-tag)
    :config
    (setq js-doc-mail-address "singamsetty.sampath@gmail.com"
              js-doc-author (format "Sampath Singamsetty <%s>" js-doc-mail-address)
              js-doc-url "github.com/fpdevil"
              js-doc-license "MIT License"))
#+end_src

#+begin_src emacs-lisp
  ;; [Minimal Type Inference] When default values are provided, then we can infer
  ;; the type of the arguments.
  ;;
  ;; Use: Run “M-x jsdoc” on a JS function.
  ;;
  ;; (use-package jsdoc
  ;;   :ensure t
  ;;   :quelpa (jsdoc
  ;; 	   :fetcher github
  ;; 	   :repo "isamert/jsdoc.el")
  ;;   :config
  ;;   (use-package tree-sitter)        ;; these are required dependencies
  ;;   (use-package tree-sitter-langs)
  ;;   :hook
  ;;   (js-mode . tree-sitter-mode))
#+end_src

** PrettierJS
This is a minor mode for formatting ~javascript~ and ~typescript~ code.
#+begin_src emacs-lisp :lexical no
;; prettify javascript and typescript
(use-package prettier-js
  :delight

  :defer t

  :custom (prettier-js-args '("--print-width" "100"
                              "--tab-width" "4"
                              "--single-quote" "true"
                              "--arrow-parens" "always"
                              "--trailing-comma" "all"))

  :config
  ;; (setq prettier-js-args '("--arrow-parens" "avoid"))
  ;; (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '(("\\.js[x]?\\'" "\\.ts\\'" "\\.tsx\\'") . prettier-js-mode))))
  (add-hook 'typescript-mode-hook 'prettier-js-mode)

  :preface
  (defun enable-minor-mode (my-pair)
  "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
  (if (buffer-file-name)
      (if (string-match (car my-pair) buffer-file-name)
      (funcall (cdr my-pair))))))
#+end_src

** SvelteJS
An emacs major mode for svelte.
#+begin_src emacs-lisp :lexical no
  ;; major mode for SvelteJS
  (use-package svelte-mode
    :custom
    (defun svelte-mode-sgml-empty-tag-p-advice (old-function tag-name)
      "Advice function intended to wrap around `sgml-empty-tag-p

  Makes case significant when checking whether tags need to be
  closed or not, to not confuse elements with Svelte components."
      (if (eq major-mode 'svelte-mode)
          (assoc-string tag-name sgml-empty-tags)
        (funcall old-function tag-name)))

    (defun svelte-mode-sgml-unclosed-tag-p-advice (old-function tag-name)
      "Advice function intended to wrap around `sgml-unclosed-tag-p

  Makes case significant when checking whether tags need to be
  closed or not, to not confuse elements with Svelte components."
      (if (eq major-mode 'svelte-mode)
          (assoc-string tag-name sgml-unclosed-tags)
        (funcall old-function tag-name)))
    (progn (
            (setq svelte-basic-offset 4
                  svelte-tag-relative-indent t
                  svelte-display-submode-name t)
            (advice-add 'sgml-empty-tag-p :around 'svelte-mode-sgml-empty-tag-p-advice)
            (advice-add 'sgml-unclosed-tag-p :around 'svelte-mode-sgml-unclosed-tag-p-advice))))
#+end_src


* JSX Support for React
Configuring =JSX= with _RJSX_ for supporting =ReactJS= development.
=rjsx-mode= mode derives from js2-mode, extending its parser to support JSX
syntax which means we will get all of the js2 features plus proper syntax
checking and highlighting of JSX code blocks.

#+begin_src emacs-lisp :lexical no
;; https://github.com/felipeochoa/rjsx-mode
(use-package rjsx-mode
  :ensure t
  :quelpa (rjsx-mode :fetcher github :repo "felipeochoa/rjsx-mode")
  :hook (rjsx-mode . lsp-deferred)
  :init
  ;; use react jsx extension mode for javascript files
  (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
  (add-to-list 'auto-mode-alist '("pages\\/.*\\.js\\'"      . rjsx-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'"                . rjsx-mode)))
#+end_src


** React Snippets
React snippets made available through =yasnippet=.

#+begin_src emacs-lisp :lexical no
;; react snippets
(use-package react-snippets
  :defer t)
#+end_src

** React & Redux snippets
Snippets for =javascript=, =react= and =redux= are available from the package
~js-react-redux-yasnippets~.
#+begin_src emacs-lisp :lexical no
;; snippets from js-react-redux-yasnippets
(use-package js-react-redux-yasnippets
  :straight
  (js-react-redux-yasnippets :type git :host github :repo "sooqua/js-react-redux-yasnippets"))
#+end_src

* Linting configuration

Allowing linting via the =tsconfig.json= configuration file.

#+begin_src emacs-lisp :lexical no
;; for some tsconfig not found errors we need this is needed
;; It throws an warning/error if removed...
(cl-defmethod project-root ((project (head eglot-project)))
  (cdr project))

(defun aqua/project-try-tsconfig-json (dir)
  (when-let* ((found (locate-dominating-file dir "tsconfig.json")))
    (cons 'eglot-project found)))

(add-hook 'project-find-functions
          'aqua/project-try-tsconfig-json nil nil)
#+end_src

** ESLint
Using =eslint= for linting using the lsp dependency eslint.

#+begin_src emacs-lisp :tangle no
;; eslint with lsp
(with-eval-after-load 'lsp
  (setq lsp-eslint-server-command '("node"
                                    "~/.emacs.d/.cache/lsp/eslint/unzipped/extension/server/out/eslintServer.js"
                                    "--stdio")))
#+end_src
