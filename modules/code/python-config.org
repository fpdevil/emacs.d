#+TITLE: Python configuration for Emacs
#+AUTHOR: Sampath Singamsetty

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

  ;; python-config.el --- Python module configuration
  ;; Author: Sampath Singamsetty
  ;; Keywords: python
  ;;
  ;;; Commentary:
  ;; Python development environment configuration.  Several python
  ;; packages can be installed with `pip'. Many of these are needed by
  ;; the Emacs packages used in this configuration.

  ;; * autopep8      -- automatically formats python code to conform to PEP 8 style guide
  ;; * black         -- uncompromising code formatter
  ;; * flake8        -- style guide enforcement
  ;; * importmagic   -- automatically add, remove, manage imports
  ;; * ipython       -- interactive python shell
  ;; * yapf          -- formatter for python code

  ;; Emacs packages to support python development:
  ;; * eglot         -- language server integration
  ;;                    (need to pip install pyright)
  ;; * numpydoc      -- python doc templates, uses `yasnippets'
  ;; * pythonic      -- utility packages for running python in different
  ;;                    environments (dependency of anaconda)
  ;; * pyvenv        -- virtualenv wrapper
#+end_src

* Introduction                                                          :TOC:
- [[#python-configuration][Python configuration]]
  - [[#elpy][ELPY]]
  - [[#jedi-support][JEDI Support]]
  - [[#virtualenv-support][Virtualenv support]]
  - [[#conda-virtualenv-support][Conda virtualenv support]]
  - [[#error-checking][Error checking]]
  - [[#sort-the-python-imports][Sort the python imports]]
  - [[#language-server-protocol][Language Server Protocol]]
  - [[#set-pretty-outlines-for-python][Set pretty outlines for python]]
  - [[#insert-numpy-style-docstrings-in-python-functions][Insert NumPy style docstrings in Python functions]]

* Python configuration
The default python module provides bare minimum support for python code
editing, but for advanced facilities like code completion, syntax analysis
etc., we will depend on libraries like =elpy=, =jedi=, =flycheck= etc.,
#+begin_src emacs-lisp
(use-package python
  :ensure t

  :mode ("\\.py\\'" . python-mode)

  ;;:hook (python-mode . lsp-deferred)
  :interpreter ("ptipython" . python-mode)

  :init
  (setq indent-tabs-mode nil
	    python-indent-guess-indent-offset nil
        python-shell-prompt-detect-failure-warning nil
        python-shell-completion-native-enable nil)

  :config
  (when (and (executable-find "python3")
             (string= python-shell-interpreter "python"))
    (setq python-shell-interpreter "python3"))
  (setq python-shell-interpreter-args "-i")

  ;; there is a message about the interpreter not using readline
  ;; and the below should be able to handle the same
  (setq warning-suppress-types '((python)
                                 (emacs))))
#+end_src

** ELPY
Emacs Python Development Environment.
As per the [[https://github.com/jorgenschaefer/elpy][Elpy link]] Elpy is an Emacs package to bring powerful Python editing
to Emacs. It combines and configures a number of other packages, both written
in Emacs Lisp as well as Python.

#+begin_src emacs-lisp :lexical no
;; ELPY module for Python
(use-package elpy
  :after python

  :hook (python-mode . elpy-enable)

  :commands (elpy-enable)

  :custom ((elpy-rpc-python-command      "python3")
           (elpy-rpc-ignored-buffer-size 5000000))

  :init
  (elpy-enable)
  ;; (advice-add 'python-mode :before 'elpy-enable)

  :config (progn
            (add-hook 'python-mode-hook 'eldoc-mode)
            (add-to-list 'company-backends 'elpy-company-backend)
            (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
            (setq elpy-rpc-python-command "python3"
	              elpy-shell-echo-output nil
	              elpy-rpc-backend "jedi")
            (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
            (with-eval-after-load 'python
              (defun python-shell-completion-native-try ()
	            "Return non-nil if can trigger native completion."
	            (let ((python-shell-completion-native-enable nil)
	                  (python-indent-offset 4)
	                  (python-indent 4)
	                  (python-shell-completion-native-output-timeout
	                   python-shell-completion-native-try-output-timeout))
	              (python-shell-completion-native-get-completions
	               (get-buffer-process (current-buffer))
	               nil "_"))))))
#+end_src

** JEDI Support
Jedi.el is a Python auto-completion package for Emacs. It aims at helping your
Python coding in a non-destructive way. It also helps you to find information
about Python objects, such as docstring, function arguments and code location.

#+begin_src elisp :tangle no
;; JEDI
;; preferred way is to install only company-jedi, so disabling this
(use-package jedi
  :after (python)

  :init
  (add-hook 'python-mode-hook 'jedi:setup)

  :config
  (progn
    (setcar jedi:install-server--command "pip3")
    (setq jedi:complete-on-dot t)
    (setq jedi:server-command (list "python3" jedi:server-script))))
#+end_src

Install the preferred company backend for Python jedi

#+begin_src emacs-lisp :lexical no
;; Company backend for Python jedi
(use-package company-jedi
  :quelpa (company-jedi :fetcher github :repo "emacsorphanage/company-jedi")

  :commands (company-jedi)

  :hook
  (python-mode . (lambda ()
                   (setq-local company-backends
                               (append (list 'company-jedi) company-backends))))

  :config
  (unless (file-exists-p
           (expand-file-name
            ".python-environments" user-emacs-directory))
    (message "Installing JEDI Server...")
    (jedi:install-server-block)
    (message "Finished Installing JEDI Server..."))
  (add-hook 'python-mode-hook 'jedi:setup)
  ;; (setq jedi:environment-virtualenv
  ;;       (list (expand-file-name ".python-environments" user-emacs-directory)))

  (setq jedi:complete-on-dot t
        jedi:use-shortcuts t))
#+end_src

** Virtualenv support
#+begin_src emacs-lisp :lexical no
;; virtualenv support
(use-package pyvenv
  :after (python-mode)
  :config
  (defalias 'workon 'pyvenv-workon)
  :init
  (setenv "WORKON_HOME" "/opt/homebrew/Caskroom/miniforge/base/envs")
  (pyvenv-mode 1))
#+end_src

** Conda virtualenv support
~conda.el~ is an Emacs helper library (and minor mode) to work with conda environments.
It detects and auto-activates the right conda environment for a particular buffer.

#+begin_src emacs-lisp
(use-package conda
  :quelpa
  (conda :fetcher github :repo "necaris/conda.el")
  :init
  ( setq conda-anaconda-home "/opt/homebrew/Caskroom/miniforge/base/")
  :config
  ;; if you want interactive shell support, include:
  (conda-env-initialize-interactive-shells)
  ;; if you want eshell support, include:
  (conda-env-initialize-eshell)
  ;; if you want auto-activation (see below for details), include:
  (conda-env-autoactivate-mode t))
#+end_src

** Error checking

Using =flycheck= for handling syntactic errors in the code.

#+begin_src emacs-lisp :lexical no
;; use flake8 with flycheck to check for coding errors
(with-eval-after-load "flycheck-mode"
  (add-hook 'python-mode-hook 'flycheck-mode)
  ;; flycheck includes other Python checkers which we will disable
  (setq-default flycheck-disabled-checkers '(python-pylint)))

(use-package py-autopep8
  :hook ((python-mode . py-autopep8-mode)))
#+end_src


** Sort the python imports
#+begin_src emacs-lisp :lexical no
;; sorting py imports
(use-package py-isort
  :after (python)

  :if (executable-find "isort")

  :commands (py-isort-buffer py-isort-before-save)

  :hook ((python-mode . pyvenv-mode)
	     (before-save . py-isort-before-save))

  :config
  (setq py-isort-options '("--lines=100")))
#+end_src

** Language Server Protocol

Setting =LSP= for python completion

*** A LSP client for Emacs using Python Jedi Language Server

#+begin_src emacs-lisp :tangle no
(use-package lsp-jedi
  :after (lsp)

  :quelpa (lsp-jedi :fetcher github :repo "fredcamps/lsp-jedi")

  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi))
  (add-hook 'python-mode-hook
	        (lambda ()
		      (lsp-deferred))))
#+end_src

*** Using pyright lsp client

=pyright= package must be installed to make this work. The same can be installed
as a ~node~ dependency or as a ~pip~ dependency.

#+begin_src emacs-lisp :lexical no :tangle no
;; pyright lsp
;; $ npm -g install pyright
(use-package lsp-pyright
  :after (lsp)

  :if (executable-find "pyright")

  :init
  (setq lsp-pyright-multi-root nil
        lsp-pyright-auto-import-completions nil
        lsp-pyright-diagnostic-mode "workspace"
        lsp-pyright-typechecking-mode "basic"
        lsp-pyright-disable-organize-imports t)
  (when (executable-find "python3")
    (setq lsp-pyright-python-executable-cmd "python3"))

  :hook
  (python-mode . lsp-pyright/python-mode-hook)

  :config (setq lsp-pyright-log-level "trace")

  :preface
  (defun lsp-pyright/python-mode-hook ()
    ;; lsp-pyright
    (require 'lsp-pyright)
    (when (fboundp 'flycheck-mode)
      ;; we will use flake8 or pyright
      (setq flycheck-disabled-checkers '(python-mypy)))))
#+end_src

** Set pretty outlines for python

The below code snippet configures pretty outlines for python code.

#+begin_src emacs-lisp
;; pretty outlines for python code
(defun lpy-outline-comment-highlight (limit)
  (while (re-search-forward "^# \\(?:[^*]\\|$\\)" limit t)
    (let* ((pt (point))
           (success (save-excursion
                      (and (re-search-backward "^# \\*" nil t)
                           (null (re-search-forward "^[^#]" pt t))))))
      (when success
        (set-match-data (list (line-beginning-position) (line-end-position)
                              (point) (line-end-position)))
        (end-of-line)
        t))))

(defconst lpy-font-lock-keywords
  '(("^# \\(\\* .*\\)$" 1 'org-level-1 prepend)
    ("^# \\(\\*\\* .*\\)$" 1 'org-level-2 prepend)
    ("^# \\(\\*\\*\\* .*\\)$" 1 'org-level-3 prepend)
    ("^# \\(\\*\\*\\*\\* .*\\)$" 1 'org-level-4 prepend)
    ("^# \\(\\*\\*\\*\\*\\* .*\\)$" 1 'org-level-5 prepend)
    (lpy-outline-comment-highlight 1 'default prepend)
    ("`\\([^\n']+\\)'" 1 font-lock-constant-face prepend)))

(font-lock-add-keywords 'python-mode lpy-font-lock-keywords)
#+end_src

*** Docstring skeletons for python
=sphinx-doc= provides a minor mode for inserting doctring skeleton for Python
functions and methods. The structure of the docstring is as per the requirements
of the Sphinx documentation generator described [[http://sphinx-doc.org/index.html][here]].

#+begin_src emacs-lisp :lexical no
;; Sphinx-styled documentation generation
;; docstring skeleton generator for python functions and methods
(use-package sphinx-doc
  :after (python)
  :quelpa (:fetcher github :repo "https://github.com/naiquevin/sphinx-doc.el")
  :hook (python-mode . sphinx-doc-mode))
#+end_src

** Insert NumPy style docstrings in Python functions

An Emacs lisp package for automatically inserting [[https://numpydoc.readthedocs.io/en/latest/format.html][NumPy style docstrings]]  in
python function definitions.

Calling =numpydoc-generate= parses the function at point (the cursor can be
anywhere in the function body). The parsing detects argument names, type hints,
exceptions, and the return type hint. This information is used to generate a
docstring.

#+begin_src emacs-lisp :lexical no
(use-package numpydoc
  :after (python)
  :hook (python-mode . sphinx-doc-mode)
  :custom
  (numpydoc-insert-examples-block nil)
  (numpydoc-template-long nil)
  :bind (:map python-mode-map
              ("C-c c n" . numpydoc-generate)))
#+end_src
