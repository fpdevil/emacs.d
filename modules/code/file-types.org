#+STARTUP: indent

* Treesitter
Tree-sitter is a parser generator tool and an incremental parsing library. It
can build a concrete syntax tree for a source file and efficiently update the
syntax tree as the source file is edited.

=tree-sitter= is an Emacs binding for Tree-sitter, an incremental parsing system.
#+begin_src emacs-lisp :lexical no
;; tree-sitter
(use-package tree-sitter-langs
  :after tree-sitter)

;; This is an emacs binding for Treesitter
(use-package tree-sitter
  :ensure t
  :config
  ;; activate tree-sitter on any buffer containing the code
  ;; for which it has a valid parser available
  ;; (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  ;; we can easily observe the difference tree-sitter-hl-mode makes
  ;; for python, ts or tsx by switching on and off
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

The  package ~tree-sitter-langs~  is a  convenient language  bundle for  the Emacs
package  tree-sitter. It  serves  as an  interim  distribution mechanism,  until
tree-sitter  is   widespread  enough   for  language-specific  major   modes  to
incorporate its functionalities.

#+begin_src emacs-lisp :tangle yes
;; Language bundle for Emacs's tree-sitter package
(use-package tree-sitter-langs
  :ensure t
  :after tree-sitter
  :quelpa (tree-stter-langs :fetcher github :repo "emacs-tree-sitter/tree-sitter-langs"))
#+end_src

For installing all the native language specific tree sitters, we can use the
package ~treesit-auto~. It automatically pick between TreeSitter and default major
modes in Emacs 29+.
#+begin_src emacs-lisp :lexical no
(use-package treesit-auto
  :quelpa (treesit-auto :fetcher github :repo "renzmann/treesit-auto")
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

* Tree-Sitter Support
Set all the required language grammar repository locations using the `elisp` variable `treesit-language-source-alist`. Then the command ~M-x treesit-install-language-grammar~ may be called to install each language.

We may also use the elisp evaluation to install all at once using below:
#+begin_src emacs-lisp :tangle no
;; install all language grammars at once
(mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
#+end_src

#+begin_src emacs-lisp :lexical no
;; tree-sitter language support
(use-package treesit
  :straight (:type built-in)
  :if (featurep 'treesit)
  :config
  (setq treesit-language-source-alist
	    (mapcar
	     (lambda (item)
	       (let ((lang (nth 0 item))
		         (url (nth 1 item))
		         (rev (nth 2 item))
		         (source-dir (nth 3 item)))
	         `(,lang ,url ,rev ,source-dir
		             ,(executable-find "gcc") ,(executable-find "c++"))))
	     '((bash "https://github.com/tree-sitter/tree-sitter-bash")
	       (cmake "https://github.com/uyha/tree-sitter-cmake")
	       (css "https://github.com/tree-sitter/tree-sitter-css")
	       (elisp "https://github.com/Wilfred/tree-sitter-elisp")
	       (go "https://github.com/tree-sitter/tree-sitter-go")
	       (html "https://github.com/tree-sitter/tree-sitter-html")
	       (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
	       (json "https://github.com/tree-sitter/tree-sitter-json")
	       (make "https://github.com/alemuller/tree-sitter-make")
	       (markdown "https://github.com/ikatyang/tree-sitter-markdown")
	       (python "https://github.com/tree-sitter/tree-sitter-python")
           (rust "https://github.com/tree-sitter/tree-sitter-rust")
	       (toml "https://github.com/tree-sitter/tree-sitter-toml")
	       (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
	       (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
	       (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))
  (setq treesit-font-lock-level 4)
  (setq major-mode-remap-alist
	    '((typescript-mode . typescript-ts-mode)
	      (js-mode . javascript-ts-mode)
	      (python-mode . python-ts-mode)
          (rust-mode . rust-ts-mode)
	      (json-mode . json-ts-mode)))
  (cl-loop for (old-mode . new-mode) in major-mode-remap-alist
	       ;; do (my/set-smartparens-indent new-mode)
	       do (set (intern (concat (symbol-name new-mode) "-hook"))
		           (list
		            (eval `(lambda ()
			                 (run-hooks
			                  ',(intern (concat (symbol-name old-mode) "-hook")))))))))
#+end_src

Modes that use ~tree-sitter~ are all named =<major-mode>-ts-mode=. Thatâ€™s the naming standard and it does mean we can quickly check if Emacs supports our pet major mode out of the box:

typing ~C-h a -ts-mode$~ should do the trick.

The ~apropos~ window will list all known ~tree-sitter~ major modes.

treesit-fold uses treesit.el for folding.
#+begin_src emacs-lisp :lexical no
;; treesit-fold uses treesit.el for folding.
(use-package treesit-fold
  :straight (treesit-fold :type git :host github :repo "emacs-tree-sitter/treesit-fold")
  :commands (treesit-fold-mode))
#+end_src
