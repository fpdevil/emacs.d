#+TITLE: Emacs lisp configuration
#+STARTUP: indent

* Programming using the Emacs Lisp
  There is no need for using the ~use-package~ statement as ~lisp mode~ is an internal package.

  #+begin_src emacs-lisp
  (bind-key "RET" 'comment-indent-new-line emacs-lisp-mode-map)
  (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)

  (use-package ielm
    :commands ielm)
  #+end_src

** AutoFillMode
Do not use the [[https://www.emacswiki.org/emacs/AutoFillMode][Auto fill mode]] while editing the ~emacs-lisp~ code.

#+begin_src emacs-lisp :lexical no
(add-hook 'emacs-lisp-mode-hook 'turn-off-auto-fill)
#+end_src

** Elisp format

Testing the ~emacs-lisp~ code formatting.

#+begin_src emacs-lisp :lexical no
(use-package elisp-format
  :ensure t
  :defer 110)
#+end_src

** Pretty outlines for elisp

Configure pretty outlines in the ~emacs-lisp~ code.

#+begin_src emacs-lisp :lexical no
;; pretty outlines for emacs-lisp code
"^;; \\(\\*+.*\\)$"
(defconst lel-font-lock-keywords
  '(("^;; ?\\(\\* .*\\)$" 1 'org-level-1 prepend)
    ("^;; ?\\(\\*\\* .*\\)$" 1 'org-level-2 prepend)
    ("^;; ?\\(\\*\\*\\* .*\\)$" 1 'org-level-3 prepend)
    ("^;; ?\\(\\*\\*\\*\\* .*\\)$" 1 'org-level-4 prepend)
    ("^;; ?\\(\\*\\*\\*\\*\\* .*\\)$" 1 'org-level-5 prepend)
    ;; (lel-outline-comment-highlight 1 'default prepend)
    ("`\\([^\n']+\\)'" 1 font-lock-constant-face prepend)))

(font-lock-add-keywords 'emacs-lisp-mode lel-font-lock-keywords)
#+end_src

* Highlight function/macro calls in Emacs
This  package highlights  function symbols  in function  calls. This  makes them
stand out from  other symbols, which makes  it easy to see where  calls to other
functions are. It also  helps to reduce typos, as when  you’re typing a function
name, it becomes underlined when typed correctly. Optionally, macros and special
forms can be highlighted  as well. Also, a list of symbols  can be excluded from
highlighting; by  default, ones  like +  / -, <  / >,  error, require,  etc. are
excluded. Finally, the not function can be highlighted specially.

#+begin_src emacs-lisp :lexical no
;; highlight function calls
(use-package highlight-function-calls
  :quelpa
  (:fetcher github :repo "alphapapa/highlight-function-calls")
  :config
  (add-hook 'emacs-lisp-mode-hook 'highlight-function-calls-mode))
#+end_src

* Extra colors for Emacs info-mode
~info-colors~ is a modern adaption of the extra coloring provided by Drew Adams info+ package.
#+begin_src emacs-lisp
;; extra colors for emacs info-mode
(use-package info-colors
  :quelpa
  (:fetcher github :repo "ubolonton/info-colors")
  :hook
  (Info-selection-hook . info-colors-fontify-node))
#+end_src

* Better help in Emacs
~Helpful~ is an alternative to the built-in ~Emacs~ help that provides much more
contextual information.

#+begin_src emacs-lisp :lexical no
;; A better *Help* buffer in Emacs
(use-package helpful
  :commands (helpful-callable
	         helpful-variable
	         helpful-key
	         helpful-macro
	         helpful-function
	         helpful-command)
  :bind (([remap describe-function] . helpful-callable)
         ([remap describe-command]  . helpful-command)
         ([remap describe-variable] . helpful-variable)
         ([remap describe-key]      . helpful-key)
         ([remap describe-symbol]   . helpful-symbol)
         :map emacs-lisp-mode-map
         ("C-c C-d"                 . helpful-at-point)
         :map lisp-interaction-mode-map
         ("C-c C-d"                 . helpful-at-point)
         :map helpful-mode-map
         ("r"                       . remove-hook-at-point))
  :hook ((helpful-mode . cursor-sensor-mode) ; for remove-advice button
         (helpful-mode . visual-line-mode))
  :init
  (with-no-warnings
    (with-eval-after-load 'apropos
      ;; patch apropos buttons to call helpful instead of help
      (dolist (fun-bt '(apropos-function apropos-macro apropos-command))
        (button-type-put
         fun-bt 'action
         (lambda (button)
           (helpful-callable (button-get button 'apropos-symbol)))))
      (dolist (var-bt '(apropos-variable apropos-user-option))
        (button-type-put
         var-bt 'action
         (lambda (button)
           (helpful-variable (button-get button 'apropos-symbol)))))))
  :config
  (with-no-warnings
    ;; Open the buffer in other window
    (defun my-helpful--navigate (button)
      "Navigate to the path this BUTTON represents."
      (find-file-other-window (substring-no-properties (button-get button 'path)))
      ;; We use `get-text-property' to work around an Emacs 25 bug:
      ;; http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=f7c4bad17d83297ee9a1b57552b1944020f23aea
      (-when-let (pos (get-text-property button 'position
                                         (marker-buffer button)))
        (helpful--goto-char-widen pos)))
    (advice-add #'helpful--navigate :override #'my-helpful--navigate)))
#+end_src

* Addons for Emacs
If ~helpful~ package is already installed, then we can extend it with the [[https://github.com/xuchunyang/elisp-demos][elisp-demos]] project.
#+begin_src emacs-lisp
;; Elisp API Demos
(use-package elisp-demos
  :quelpa (elisp-demos :fetcher github :repo "xuchunyang/elisp-demos")
  :after helpful
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src
Find a function without a good demonstration? Call =elisp-demos-add-demo=.

Wilfred’s [[https://github.com/Wilfred/suggest.el][suggest]] function helps us find the right function. Basically, we type in the parameters of a function, and then the desired output, and it will write the function call for us.
#+begin_src emacs-lisp
;; suggest.el is an Emacs package for discovering elisp functions based on examples.
;; You supply an example input and output, and it makes suggestions.
(use-package suggest
  :quelpa (suggest :fetcher "github" :repo "Wilfred/suggest.el"))
#+end_src
