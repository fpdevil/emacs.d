#+TITLE: Rust Language Configuration and Setup
#+AUTHOR: Sampath Singamsetty

#+begin_src emacs-lisp :exports none
  ;;; -*- lexical-binding: t -*-
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file
  ;; You should make any changes there and regenerate it from Emacs
  ;; org-mode using C-c C-v t
  ;;
  ;;; Commentary:
  ;; RUSTIC Documentation available here
  ;; https://github.com/brotzeit/rustic
  ;;
  ;;; Code:
  ;;; For below error message
  ;;; Emacs: rust-analyzer + rustic - couldn't discover workspace
  ;;; rust-analyzer should init in your project folder
  ;;; (1) remove the wrong workspaces (eg. /home/geo) with lsp-workspace-folders-remove
  ;;; (2) make sure lsp-auto-guess-root is nil
  ;;; (3) open a rust file in your project to interactively set
  ;;;     the correct workspace root*
  ;;;
  ;;; lsp-workspace-folders-remove
  ;;; set lsp-auto-guess-root to nil
  ;;; open your project's rust file
  ;;;
#+end_src

* Introduction                                                          :TOC:
- [[#rust-installation-and-setup][Rust Installation and Setup]]
  - [[#installation-of-rust][Installation of Rust]]
  - [[#rust-analyzer----a-rust-compiler-front-end-for-ides][rust-analyzer -  A Rust compiler front-end for IDEs]]
  - [[#rust-configuration-for-emacs][Rust Configuration for Emacs]]

* Rust Installation and Setup
=Rust= is a multi-paradigm, general-purpose programming language. Rust emphasises
performance, type safety, and concurrency and also =Rust= enforces memory safety.

** Installation of Rust
To have a working =Rust= environment, the language binaries need to be installed
first using the below command:

#+begin_src shell :eval no
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
#+end_src

Next install the =Rust= source which is needed for documentation using the below
command:

#+begin_src shell :eval no
rustup component add rust-src
#+end_src

** rust-analyzer -  A Rust compiler front-end for IDEs

~rust-analyzer~ is a modular compiler frontend for the Rust language. It is a
part of a larger rls-2.0 effort to create excellent IDE support for Rust. This
is required for IDE setup and auto completion features.

#+begin_src shell :eval no
rustup component add rust-analyzer

# check where the binaries are located
rustup which --toolchain stable rust-analyzer
/Users/sampathsingamsetty/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rust-analyzer

# create a soft link from .cargo/bin
ln -s /Users/sampathsingamsetty/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rust-analyzer rust-analyzer
#+end_src

=LSP= specific settings for =rust= can be configured if =lsp-mode= is available:

#+begin_src emacs-lisp :lexical no
;; lsp for rust
(with-eval-after-load "lsp"
  ;; This controls the overlays that display type and other hints inline. Enable
  ;; / disable as you prefer. Well require a `lsp-workspace-restart' to have an
  ;; effect on open projects.
  (setq lsp-rust-analyzer-cargo-watch-command "clippy"
        lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial"
        lsp-rust-analyzer-server-display-inlay-hints t
        lsp-rust-analyzer-display-chaining-hints t
        lsp-rust-analyzer-display-closure-return-type-hints t
        lsp-rust-analyzer-display-parameter-hints nil
        lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil
        lsp-rust-analyzer-display-reborrow-hints nil))
#+end_src

** Rust Configuration for Emacs
Support for ~Rust~ in ~Emacs~ has been continuously improving with plugins and also
=LSP= agents.

Once proper configuration on =Emacs= has been done, the editor will be capable of
providing the following benefits:


+ Navigating the source code (go to to implementation, list references, outline module structure)
+ Code completion
+ Code snippets
+ Highlighting errors and warnings inline
+ Apply code fixes and refactorings.
+ Automatically import definitions if necessary (such as for Traits)
+ Code formatting with rustfmt.
+ Building & running other cargo commands.

The current setup will be based on =rust-analyzer= which is an ~LSP~ server which
is been under under very active development.

*** Install rustic
~rustic~ s based on the =rust-mode= and provides some additional features.

#+begin_src emacs-lisp :lexical no
;; rustic
(use-package rustic
  :ensure
  :quelpa (:fetcher github :repo "https://github.com/brotzeit/rustic")
  :config
  (setq
   ;; eglot seems to be the best option right now.
   ;; default package is lsp-mode
   ;; rustic-lsp-client 'eglot
   rustic-format-on-save nil
   ;; prevent automatic syntax checking, which was causing lags and stutters.
   eglot-send-changes-idle-time (* 60 60))
  ;; If you are using rustup to manage your rust-analyzer,
  ;; you would have to configure like this to make it work with use-package
  :custom
  (rustic-analyzer-command '("rustup" "run" "stable" "rust-analyzer"))
  ;;
  ;; comment to disable rustfmt on save
  (add-hook 'rustic-mode-hook 'aqua/rustic-mode-hook))

;; Code formatting with rustfmt
(defun aqua/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been
  ;; resolved this should no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t))
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))
#+end_src
