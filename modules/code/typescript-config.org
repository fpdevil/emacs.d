:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
:END:

#+STARTUP: indent

#+begin_src emacs-lisp :exports none
;;; package --- documentation modes configuration -*- lexical-binding:t ; -*-
;;;
;;; Commentary
;;; DO NOT EDIT THIS FILE DIRECTLY
;;; This is a file generated from a literate programing source file
;;; ORG mode configuration
;;; Filename           : typescript-config.el
;;; Description        : TypeScript React configuration and development
;;; Date               :
;;; Last Modified Date :
;;
;;
;;
;;; Code:
;;;
#+end_src

#+TITLE: TypeScript Configuration

* Emacs for Typescript support                                          :TOC:
- [[#typescript-configuration][TypeScript configuration]]
  - [[#tree-sitter][Tree Sitter]]
  - [[#typescript-treesitter-integrated-configuration][TypeScript treesitter integrated configuration]]
  - [[#tide][Tide]]
- [[#web-mode][Web mode]]
- [[#html-snippet-support-for-emacs-via-emmet][HTML Snippet support for Emacs via Emmet]]
  - [[#indenting-html][Indenting HTML]]

* TypeScript configuration
Configure packages and settings for supporting =Typescript= development in Emacs.

** Tree Sitter
=tree-sitter= has a dedicated =tsx= parser that will be used for =tsx=
(/typescript + react/) files. By default it is currently not the case,
as it uses the =typescript= parser which does not understand the =tsx=
extensions.

A new derived mode  is created to map to both  =.tsx= and =.ts= files.
Due to the derived mode’s  name, the typescript language server will
use =tsx= support, and due  to the the explicit mapping, =tree-sitter=
will select its =tsx= parser.

#+begin_src emacs-lisp :lexical no
;; typescript support for tsx and react
;; ensure that tree-sitter’s dedicated tsx parser will be used for
;; handling the tsx (typescript + react) files.
(use-package typescript-mode
  :after tree-sitter

  :quelpa
  (:fetcher github :repo "emacs-typescript/typescript.el")

  :hook
  (typescript-mode . lsp-deferred)

  :config
  (tree-sitter-require 'tsx)
  ;; (with-eval-after-load 'flycheck
  ;;   (flycheck-add-mode 'javascript-eslint 'typescript-mode))

  ;; we choose this instead of tsx-mode so that eglot can
  ;; automatically figure out the language for server
  ;; @ref https://github.com/joaotavora/eglot/issues/624 and
  ;; https://github.com/joaotavora/eglot#handling-quirky-servers
  (define-derived-mode typescriptreact-mode typescript-mode
    "TypeScript TSX")

  ;; use our derived mode for tsx files
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
  ;; by default, typescript-mode is mapped to the treesitter typescript parser
  ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx))

  :custom
  (typescript-indent-level 4)
  ;; TSLint is depreciated in favor of ESLint.
  (flycheck-disable-checker 'typescript-tslint)
  (lsp-clients-typescript-tsserver "/opt/homebrew/bin/typescript-language-server")
  (lsp-clients-typescript-server-args '("--stdio")))
#+end_src

** TypeScript treesitter integrated configuration

We can configure the =tsi.el= package which will give us =tree-sitter=
based indentation for =TypeScript=, =JSON= and =(S)CSS=. The code here
shows how to  do this with =use-package= and =quelpa=,  as =tsi.el= is
not yet available on =melpa=.

#+begin_src emacs-lisp :lexical no
;; https://github.com/orzechowskid/tsi.el/
;; great tree-sitter-based indentation for typescript/tsx, css, json
(use-package tsi
  :after tree-sitter
  :quelpa (tsi :fetcher github :repo "orzechowskid/tsi.el")
  ;; define autoload definitions which when actually invoked will cause package to be loaded
  :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
  :init
  (add-hook 'typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
  (add-hook 'json-mode-hook       (lambda () (tsi-json-mode 1)))
  (add-hook 'css-mode-hook        (lambda () (tsi-css-mode 1)))
  (add-hook 'scss-mode-hook       (lambda () (tsi-scss-mode 1))))
#+end_src

** Tide
*TIDE* is _Typescript Interactive Development Environment_ and is pretty helpful for
syntax highlighting the typescript stuff on Emacs.

First, define a function for explicitly setting up some general configuration
for =tide= and =typescript-mode= as below:

#+begin_src emacs-lisp :lexical no
  ;; function for activating tide by need
  (defun aqua/setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))
#+end_src

Now install =tide= with some optional formatting options.

#+begin_src emacs-lisp :lexical no
(use-package tide
  :after (typescript-mode)

  :init
  (add-hook 'typescript-mode-hook #'aqua/setup-tide-mode)
  (add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (aqua/setup-tide-mode))))

  :config (progn
            ;; configure javascript-tide checker to run after your default javascript checker
            ;; (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)

            ;; formatting options
            (setq tide-format-options
              '((:indentSize 4)
                (:tabSize 4)
                (:convertTabsToSpaces nil)
                (:insertSpaceAfterCommaDelimiter t)
                (:insertSpaceAfterFunctionKeywordForAnonymousFunctions t)
                (:insertSpaceAfterOpeningAndBeforeClosingEmptyBraces t)
                (:placeOpenBraceOnNewLineForFunctions nil)))))
#+end_src


* Web mode
~web-mode.el~ is an emacs major mode for editing web templates aka HTML files
embedding parts (CSS/JavaScript) and blocks (pre rendered by client/server side
engines).

~web-mode~ specifically makes it more comfortable to edit mixed files
(javascript + html in same document, jsx etc.).

Comprehensive usage [[https://web-mode.org/][Documentation]] is available.

A few custom functions and hooks to be used while configuring the ~web-mode~ are
defined here:

#+begin_src emacs-lisp :lexical no
;; custom auxiliary hooks and functions for web-mode
(defun aqua/complete-web-mode ()
  (interactive)
  (let ((current-scope (web-mode-language-at-pos (point))))
    (cond ((string-equal "javascript" current-scope)
           (company-tide 'interactive))
          ((string-equal "css" current-scope)
           (company-css 'interactive))
          (t
           (company-dabbrev-code 'interactive)))))

(defun aqua/eldoc-web-mode ()
  (let ((current-scope (web-mode-language-at-pos (point))))
    (cond ((string-equal "javascript" current-scope)
           (tide-eldoc-function))
          ((string-equal "css" current-scope)
           (css-eldoc-function))
          (t
           nil))))

(defun aqua/setup-web-mode-mixed ()
  (web-mode)
  (aqua/activate-tide)
  (setq-local eldoc-documentation-function #'aqua/eldoc-web-mode))


(defun aqua/web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-extra-snippets '(
                                  (nil . (
                                          ("html5" . "<!DOCTYPE html>\n<html>\n<head>\n<title></title>\n<meta charset=\"utf-8\" />\n</head>\n<body>\n    |\n</body>\n</html>")
                                          )
                                       ))))
#+end_src

Now for the actual ~web-mode~ package installation, setup and configuration:

#+begin_src emacs-lisp :lexical no
;; install and configure web-mode
(use-package web-mode
  :after (tide css-eldoc)

  :hook ((web-mode . aqua/web-mode-hook))

  :mode
  (("\\.ts[x]?\\'" . web-mode)
   ("\\.jsx?$"     . web-mode)
   ("\\.html?$"    . aqua/setup-web-mode-mixed)
   ("\\.json\\'"   . web-mode))

  :init
  (require 'web-mode)

  :bind
  (:map web-mode-map ([(control return)] . aqua/complete-web-mode))

  :config
  (setq web-mode-enable-auto-quoting t
        web-mode-enable-auto-opening t
        web-mode-enable-auto-closing t
        web-mode-enable-auto-pairing t
        web-mode-markup-indent-offset 4
        web-mode-css-indent-offset 4
        web-mode-code-indent-offset 4
        web-mode-enable-auto-indentation nil
        web-mode-enable-auto-pairing nil
        web-mode-enable-part-face t
        web-mode-enable-current-column-highlight t
        web-mode-enable-current-element-highlight t
        web-mode-content-types-alist
        '(("jsx" . "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'"))
        web-mode-engines-alist
        '(("django" . "\\.html\\'"))))
#+end_src

*** Install company-web
~company-web~ is a company variant of the ~ac-html~, complete for ~web~, ~html~, ~emmet~,
~jade~, ~slim~ modes. It is same as ~ac-html~, but for _company_ completion framework.

#+begin_src emacs-lisp :lexical no
;; using company-web
(use-package company-web
  :ensure t
  :config
  (add-hook 'web-mode-hook
            (lambda()
              (cond ((equal web-mode-content-type "html")
                     (aqua/web-html-setup)))))
  (add-hook 'web-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-web-html company-files))
              (company-mode t))))
#+end_src


*** Company backend configuration
We will not use the below configuration, so setting the =tang;e= option to _no_.

#+begin_src emacs-lisp :tangle no
(defun aqua/web-html-setup ()
  "Setup for web-mod html files."
  (message "web-mode using html related setup")
  (flycheck-add-mode 'html-tidy 'web-mode)
  (flycheck-select-checker 'html-tidy)
  (set (make-local-variable 'company-backends)
       '(company-css
         company-web-html
         company-yasnippet
         company-files
         company-keywords))
  (add-hook 'before-save-hook 'sgml-pretty-print))
(add-hook 'web-mode-hook 'aqua/web-html-setup)
#+end_src


* HTML Snippet support for Emacs via Emmet

=emmet= provides very useful snippets for html code completion.

#+begin_src emacs-lisp :lexical no
;; emmet mode
(use-package emmet-mode
  :ensure t
  :diminish emmet-mode
  :init (require 'emmet-mode)
  :config
  (progn
    (add-hook 'html-mode-hook 'emmet-mode)
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook  'emmet-mode)
    (add-hook 'rjsx-mode-hook 'emmet-mode)
    (add-hook 'js-mode-hook   'emmet-mode)
    (add-hook 'web-mode-hook  'emmet-mode)))
#+end_src

** Indenting HTML
Whitespace in HTML documents has no effect on what browsers display, so you can
add indentation freely in the source to make it look nice when editing.

#+begin_src emacs-lisp :lexical no
(add-hook 'html-mode-hook
        (lambda ()
          ;; Default indentation is usually 2 spaces, changing to 4.
          (set (make-local-variable 'sgml-basic-offset) 4)))

;; SGML mode can also guess the indentation of an opened file
;; with ‘sgml-guess-indent’ if it is added in a hook.
(add-hook 'sgml-mode-hook
        (lambda ()
          ;; Default indentation to 2, but let SGML mode guess, too.
          (set (make-local-variable 'sgml-basic-offset) 2)
          (sgml-guess-indent)))
#+end_src
