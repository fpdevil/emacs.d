:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
:END:

#+STARTUP: indent

#+begin_src emacs-lisp :exports none
;;; package --- documentation modes configuration -*- lexical-binding:t ; -*-
;;;
;;; Commentary
;;; DO NOT EDIT THIS FILE DIRECTLY
;;; This is a file generated from a literate programing source file
;;; ORG mode configuration
;;; Filename           : typescript-config.el
;;; Description        : TypeScript React configuration and development
;;; Date               :
;;; Last Modified Date :
;;
;;
;;
;;; Code:
;;;
#+end_src

#+TITLE: TypeScript Configuration

* Emacs for Typescript support                                          :TOC:
- [[#typescript-configuration][TypeScript configuration]]
  - [[#tree-sitter][Tree Sitter]]
  - [[#typescript-treesitter-integrated-configuration][TypeScript treesitter integrated configuration]]
  - [[#tide][Tide]]

* TypeScript configuration
Configure packages and settings for supporting =Typescript= development in Emacs.

** Tree Sitter
=tree-sitter= has a dedicated =tsx= parser that will be used for =tsx=
(/typescript + react/) files. By default it is currently not the case,
as it uses the =typescript= parser which does not understand the =tsx=
extensions.

A new derived mode  is created to map to both  =.tsx= and =.ts= files.
Due to the derived mode’s  name, the typescript language server will
use =tsx= support, and due  to the the explicit mapping, =tree-sitter=
will select its =tsx= parser.

#+begin_src emacs-lisp :lexical no
;; typescript support for tsx and react
;; ensure that tree-sitter’s dedicated tsx parser will be used for
;; handling the tsx (typescript + react) files.
(use-package typescript-mode
  :after tree-sitter

  :quelpa
  (:fetcher github :repo "emacs-typescript/typescript.el")

  :hook
  (typescript-mode . lsp-deferred)

  :config
  (tree-sitter-require 'tsx)
  ;; (with-eval-after-load 'flycheck
  ;;   (flycheck-add-mode 'javascript-eslint 'typescript-mode))

  ;; we choose this instead of tsx-mode so that eglot can
  ;; automatically figure out the language for server
  ;; @ref https://github.com/joaotavora/eglot/issues/624 and
  ;; https://github.com/joaotavora/eglot#handling-quirky-servers
  (define-derived-mode typescriptreact-mode typescript-mode
    "TypeScript TSX")

  ;; use our derived mode for tsx files
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
  ;; by default, typescript-mode is mapped to the treesitter typescript parser
  ;; use our derived mode to map both .tsx AND .ts -> typescriptreact-mode -> treesitter tsx
  (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx))

  :custom
  (typescript-indent-level 4)
  ;; TSLint is depreciated in favor of ESLint.
  (flycheck-disable-checker 'typescript-tslint)
  (lsp-clients-typescript-tsserver "/opt/homebrew/bin/typescript-language-server")
  (lsp-clients-typescript-server-args '("--stdio")))
#+end_src

** TypeScript treesitter integrated configuration

We can configure the =tsi.el= package which will give us =tree-sitter=
based indentation for =TypeScript=, =JSON= and =(S)CSS=. The code here
shows how to  do this with =use-package= and =quelpa=,  as =tsi.el= is
not yet available on =melpa=.

#+begin_src emacs-lisp :lexical no
;; https://github.com/orzechowskid/tsi.el/
;; great tree-sitter-based indentation for typescript/tsx, css, json
(use-package tsi
  :after tree-sitter
  :quelpa (tsi :fetcher github :repo "orzechowskid/tsi.el")
  ;; define autoload definitions which when actually invoked will cause package to be loaded
  :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
  :init
  (add-hook 'typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
  (add-hook 'json-mode-hook       (lambda () (tsi-json-mode 1)))
  (add-hook 'css-mode-hook        (lambda () (tsi-css-mode 1)))
  (add-hook 'scss-mode-hook       (lambda () (tsi-scss-mode 1))))
#+end_src

** Tide
*TIDE* is _Typescript Interactive Development Environment_ and is pretty helpful for
syntax highlighting the typescript stuff on Emacs.

First, define a function for explicitly setting up some general configuration
for =tide= and =typescript-mode= as below:

#+begin_src emacs-lisp :lexical no
  ;; function for activating tide by need
  (defun aqua/setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))
#+end_src

Now install =tide= with some optional formatting options.

#+begin_src emacs-lisp :lexical no
(use-package tide
  :after (typescript-mode)

  :init
  (add-hook 'typescript-mode-hook #'aqua/setup-tide-mode)
  (add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (aqua/setup-tide-mode))))

  :config (progn
            ;; configure javascript-tide checker to run after your default javascript checker
            ;; (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)

            ;; formatting options
            (setq tide-format-options
              '((:indentSize 4)
                (:tabSize 4)
                (:convertTabsToSpaces nil)
                (:insertSpaceAfterCommaDelimiter t)
                (:insertSpaceAfterFunctionKeywordForAnonymousFunctions t)
                (:insertSpaceAfterOpeningAndBeforeClosingEmptyBraces t)
                (:placeOpenBraceOnNewLineForFunctions nil)))))
#+end_src
