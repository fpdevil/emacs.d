#+begin_src emacs-lisp :exports none
  ;; -*- lexical-binding: t; no-byte-compile: t; coding: utf-8 -*-
  ;;; package --- org latex configuration
  ;;;
  ;;; Commentary
  ;;; DO NOT EDIT THIS FILE DIRECTLY
  ;;; This is a file generated from a literate programing source file
  ;;; ORG mode configuration
  ;;; Filename   : org-latex-config.org.el
  ;;; Description: ORG LATEX specific configuration and customization
  ;;               Contains export configurations for LaTeX
  ;;; Date               :
  ;;; Last Modified Date :
  ;;
  ;;
  ;; elisp code for org latex configuration
  ;;
  ;;; Code:
  ;;;
#+end_src

#+TITLE: Org Latex export configuration settings
#+AUTHOR: Sampath Singamsetty

* Orgmode LaTeX export and configuration settings

* LaTeX Export settings

For source code highlighting during the export of org documents, we will be
using the python ~pygments~ package. Ensure that the same is installed and is
available from the ~pip~.

For generating ~pdf~ from ~LaTeX~ and opening use ~C-c C-v~ key combo and for just
compiling use ~C-c C-c~.

#+begin_src emacs-lisp :tangle no
;; for the src code syntax highlighting during the export use pygments
;;    install the python pygments package
;;    which is for code syntax highlighting in export. we need to use
;;    -shell-escape with latex, and install pygments.
;;    (setq org-latex-listings t)
;;
;; The latex exporter is provided by the ox-latex
;;
;; now for a nice looking code block, use Listings instead of Verbatim
;; this is for code syntax highlighting in export.
;; use -shell-escape with latex, and install pygments.
;;
;; if org-latex-listings: nil is used then code blocks will be exported
;; using the default verbatim with no additional dependencies
;; using the minted package for source code coloration during latex export
;;
;; Include the latex-exporter
;; check whether org-mode is available
(eval-after-load "ox-latex"
  '(progn
     ;; You need to install pygments to use minted
     (when (executable-find "pygmentize")
       ;; default packages to be inserted in the header
       ;; add minted to the defaults packages to include when exporting.
       (add-to-list 'org-latex-packages-alist '("" "minted"))   ; coloured source code blocks
                                        ;
       ;; The below 3 are default packages included in every tex file,
       ;; whether pdflatex or xelatex
       (add-to-list 'org-latex-packages-alist '("" "graphicx" t))     ; Enhanced support for graphics
       (add-to-list 'org-latex-packages-alist '("" "longtable" nil))  ; Allow tables to flow over page boundaries
       (add-to-list 'org-latex-packages-alist '("" "float" nil))      ; Improved interface for floating object

       (add-to-list 'org-latex-packages-alist '("" "listings")) ; typeset source code listings
       (add-to-list 'org-latex-packages-alist '("" "color"))    ; fix enhanced colour support
       (add-to-list 'org-latex-packages-alist '("" "parskip"))  ; fix spacing's

       ;; Tell the latex export to use the minted package for source
       ;; code coloration.
       (setq org-latex-listings 'minted)

       ;; Let the exporter use the -shell-escape option to let latex
       ;; execute external programs.
       ;; minted specific options through pygments
       (setq org-latex-minted-options
             '(("frame" "lines")
               ("fontsize" "\\scriptsize")
               ("bgcolor" "mintedbg")
               ("fontsize" "\\footnotesize")
               ("mathescape" "true")
               ("linenos" "")
               ("breaklines" "true")
               ("breakanywhere" "true")
               )))
     ))
#+end_src

** Syntax highlighting with Minted
~minted~ is a LaTeX package that facilitates expressive syntax highlighting using the python ~Pygments~ library. The package also provides options to customize the highlighted source code output using ~fancyvrb~.

#+begin_src emacs-lisp
;; for code syntax highlighting in org exports and during compilation
;; latex should be used with -shell-escape after installing pygments
(setq org-latex-listings 'minted)

;; https://tex.stackexchange.com/questions/9796/how-to-add-todo-notes
;; (("backgroundcolor=green!40" "todonotes" nil) t)) ; Marking things to do in a LaTeX

;; minted specific options through pygments
(setq org-latex-minted-options
      '(("frame"         "lines")
        ;;("fontsize" "\\scriptsize")
        ;;("bgcolor" "mintedbg")
        ("fontsize"      "\\scriptsize")
        ("linenos"       "")
        ("autogobble"    "")
        ("mathescape"    "true")
        ("breaklines"    "true")
        ("breakanywhere" "true")
        ;; ("samepage"      "")
        ;; ("xrightmargin"  "0.5cm")
        ;; ("xleftmargin"   "0.5cm")
        ))
#+end_src

#+begin_src emacs-lisp :lexical no :tangle no
(setq org-latex-packages-alist
      ;; default packages to be inserted in the header
      '(("" "minted")                                      ; coloured source code blocks

        ;; The below 3 are default packages included in every tex file,
        ;; whether pdflatex or xelatex
        ("" "graphicx" t)                                  ; Enhanced support for graphics
        ("" "longtable" nil)                               ; Allow tables to flow over page boundaries
        ("" "float" nil)                                   ; Improved interface for floating object

        ("" "listings")                                    ; typeset source code listings
        ("" "parskip")                                     ; fix spacings
        ("" "color")                                       ; color support
        ("" "xcolor")                                      ; driver independent color support
        ("english" "babel")))                              ; Multilingual support for LaTeX
#+end_src


Also, as explained in this [[https://tex.stackexchange.com/questions/2984/frequently-loaded-packages-differences-between-pdflatex-and-xelatex][article]], ~XeTeX~ uses the ~fontspec~ package instead of
~inputenc~ or ~fontenc~ so add =("" "fontspec")= to ~org-latex-packages-alist~.

/holding this for now as seeing an error with latex preview due to below error/

#+begin_example
  fatal package fontspec error: the fontspec package requires either xetex or
#+end_example

#+begin_src emacs-lisp :lexical no :tangle no
(add-to-list 'org-latex-packages-alist '("" "fontspec"))
#+end_src

*Note*: Some good resources for LaTeX are available [[https://steeven9.github.io/USI-LaTeX/html/general_index.html][here]].

* Custom document export settings for LaTeX

We can avoid placing of the ~\maketitle~ right after ~begin{document}~ which allows
us to place the ~\maketitle~ wherever we want.

#+begin_src emacs-lisp :lexical no
;; to avoid getting \maketitle right after the begin{document}
;; we should be able to place \maketitle if and where you want it.
(setq org-latex-title-command "")
#+end_src

By default, Org generates its own internal labels during LaTeX
export.  This process ensures that the ~\label~ keys are unique
and valid, but it means the keys are not available in advance of
the export process.

By default, Org generates its own internal labels during LaTeX
export.  This process ensures that the \label keys are unique
and valid, but it means the keys are not available in advance of
the export process.

Setting this variable gives you control over how Org generates
labels during LaTeX export, so that you may know their keys in
advance.  One reason to do this is that it allows you to refer to
various elements using a single label both in Org’s link syntax
and in embedded LaTeX code.

#+begin_src emacs-lisp :lexical no
(setq org-latex-prefer-user-labels t)
#+end_src

** LaTeX options for default exported packages

Here, we consider options for using multilingual support in LaTeX through
appropriate options.

+ *Note:*

  For adding additional options to a package already exported via the default
  class options, like for example =babel= we can use the below format.

#+begin_example
#+LATEX_OPTIONS: \PassOptionsToPackage{english,sanskrit}{babel}
#+end_example

  Here, we added /sanskrit/ as a second language.

*** A quick multilingual export example.

#+begin_example
#+TITLE: Multilingual support in ORG

#+LATEX_HEADER: \usepackage{polyglossia}
#+LATEX_HEADER: \setotherlanguages{sanskrit}

#+#%LATEX_HEADER: \PassOptionsToPackage{english,sanskrit}{babel}
#+LATEX_HEADER: \newfontfamily\devanagarifont[Script=Devanagari]{Adelle Sans Devanagari}
#+end_example

*** Enable pdf and eps images in org mode

The below configuration enables to use ~pdf~ and ~eps~ images in org mode.

#+begin_src emacs-lisp :lexical no
;; Suggestion from Julian Burgos on the org mode mailing lists
(add-to-list 'image-file-name-extensions "pdf")
(add-to-list 'image-file-name-extensions "eps")

(add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "eps")
(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "pdf")

(setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
#+end_src

**  A small latex experiment

\begin{sanskrit}
सर्वधर्मान् परित्यज्य मामेकं शरणं व्र्ज

अहं त्वां सर्वपापेभ्यो मोक्षयिष्यामि मा शुचः
\end{sanskrit}

** Some text and latex
so with the text...
#+NAME: code:1
#+BEGIN_SRC shell-script
echo hello world
#+END_SRC
[[code:1]] is a reference to src block

#+NAME: eqn:1
\begin{equation}
    f(x) =  \sum\limits_0^\infty(f^{(n)}(x)|_{x=0} \cdot x)
\end{equation}

And this is an equation [[eqn:1]]
#+end_example

+ TODO: Explore https://github.com/grettke/org-utf-to-xetex#installation

* Latex previewing

Orgmode is used mainly by scientists and researchers taking notes. Sometimes
these notes include mathematics and scientists almost universally use LaTeX in
order to write mathematics, but since LaTeX is not WYSIWYG, it is often useful
to provide a preview of what something will look like when typeset.

Once latex facility has been set up, it can be used very simply. One writes
LaTeX code and invokes the command org-preview-latex-fragment (bound to =C-c C-x
C-l=). The command processes the latex code and produces a PNG image that is
overlaid on the LaTeX code that was used to produce the image, thereby
providing the required preview. Pressing =C-c C-c= gets rid of the overlay.

After writing the latex equations, if =C-c C-x C-l= pressed here (or =C-u C-c C-x
C-l= to preview everything in the subtree, or =C-u C-u C-c C-x C-l= to preview
everything in the buffer) the latex equation will be rendered as a standard
mathematical equation.

Additional information is available at the link
https://orgmode.org/worg/org-tutorials/org-latex-preview.html.

One can turn on the previewing of all LaTeX fragments in a file with

#+begin_text
#+STARTUP: latexpreview
#+end_text

To disable use

#+begin_text
#+STARTUP: nolatexpreview
#+end_text

** Additional options for latex previewing

Some additional settings are available to customise the latex preview as defined below.

#+begin_src emacs-lisp :lexical no
;; (require 'tex-site)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

;; automatically convert LaTeX fragments to inline images.
;; (setq org-startup-with-latex-preview t)

(setq org-latex-create-formula-image-program 'dvipng) ;; for sharper images
(setq org-preview-latex-default-process 'dvisvgm)
#+end_src


These are disabled for now
#+begin_src emacs-lisp :lexical no :tangle no
(setq org-preview-latex-default-process 'dvisvgm)
(setq org-latex-preview-ltxpng-directory
      (concat (temporary-file-directory) "ltxpng/"))
(setq org-preview-latex-process-alist
       '((dvipng :programs
         ("lualatex" "dvipng")
         :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
         (1.0 . 1.0)
         :latex-compiler
         ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
         :image-converter
         ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
       (dvisvgm :programs
          ("latex" "dvisvgm")
          :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
          (1.7 . 1.5)
          :latex-compiler
          ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
          :image-converter
          ("dvisvgm %f -n -b min -c %S -o %O"))
       (imagemagick :programs
              ("latex" "convert")
              :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
              (1.0 . 1.0)
              :latex-compiler
              ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
              :image-converter
              ("convert -density %D -trim -antialias %f -quality 100 %O"))))
#+end_src

#+begin_src emacs-lisp :lexical no
;;Latex Preview Helper Function
(defun org-latex-preview-fix (&optional ARG)
  "A wrapper function that stops org-preview from including
  packages that break latex"
  (interactive nil)
  (let ((org-latex-packages-alist . nil))
    (org-latex-preview ARG)))

;; (local-set-key (kbd "C-c C-x C-l") 'org-latex-preview-fix)
#+end_src

** Toggle latex preview on mouse enter with addon org-fragtog

~org-fragtog~ is package that can automatically toggle Org mode LaTeX fragment
previews as the cursor enters and exits them.

#+begin_src emacs-lisp :lexical no
;; org-fragtog for automatically toggle Org mode LaTeX fragment
;; previews as the cursor enters and exits them
(use-package org-fragtog
  :after (org)
  :hook
  (org-mode . org-fragtog-mode))

;; increase size of LaTeX fragment previews
;; (plist-put org-format-latex-options :scale 2)
(setq aqua/org-latex-scale 3.0)
(setq org-format-latex-options (plist-put org-format-latex-options :scale aqua/org-latex-scale))
#+end_src

Org mode supports inline image previews of LaTeX fragments. These can be
toggled with ~C-c C-x C-l~. org-fragtog automates this, so fragment previews are
disabled for editing when your cursor steps onto them, and re-enabled when the
cursor leaves.

** General LaTeX completion with cdlatex and company-math

=CDLatex= provides a collection of convenience functions that speed up editing LaTeX documents. It allows fast input methods to enter LaTeX data and Math. The package =company-math= provides a completion back-ends for the math unicode symbols and latex tags.

Instead of installing =CDLaTeX= you’d turn on org-cdlatex-mode. You don’t even need to install CDLaTeX, it’s already on your system! ~org-cdlatex-mode~ is part of Org.

Typing in the grave key (`) and a letter inserts symbols into the buffer, automatically adding inline math dollars if necessary:

+ ` and a-z (A-Z) insert greek letters (uppercase), so `a gives \alpha, `L gives \Lambda etc
+ ` plus keys to insert arrows:

| key    | grave ` + key  | two graves ` ` + key                      |
|--------+----------------+-------------------------------------------|
| > or < | \(\rightarrow\) or \(\leftarrow\) | \(\longrightarrow\) or \(\longleftarrow\) |
| ] or [ | \(\Rightarrow\) or \(\Leftarrow\) | \(\Longrightarrow\) or \(\Longleftarrow\) |
| ^ or _ | \(\uparrow\) or \(\downarrow\) |                                           |
| =      | \(\Leftrightarrow\)          | \(\Longleftrightarrow\)                   |

#+begin_src emacs-lisp :lexical no
;; CDLatex for faster input of latex
;; https://gist.github.com/karthink/7d89df35ee9b7ac0c93d0177b862dadb
(use-package cdlatex
  :ensure t
  :after (:any org-mode tex-mode auctex)
  :hook
  ((org-mode    . turn-on-org-cdlatex)
   (LaTeX-mode  . turn-on-cdlatex)
   (latex-mode  . turn-on-cdlatex)
   (cdlatex-tab . yas-expand)
   (cdlatex-tab . cdlatex-in-yas-field)))

;; company completion for latex math symbols
(use-package company-math
  :after (:any org-mode tex-mode)
  :preface
  ;; local configuration for TeX modes
  (defun aqua/latex-math-mode-setup ()
    (setq-local company-backends
                (append '((company-math-symbols-latex
                           company-latex-commands))
                        company-backends)))
  :hook
  ((org-mode   . aqua/latex-math-mode-setup)
   (LaTeX-mode . aqua/latex-math-mode-setup)
   (latex-mode . aqua/latex-math-mode-setup)))
#+end_src

** Company math symbol handling
Enable math symbol backend only in =TeX-mode= and =org-mode=.

#+begin_src emacs-lisp
(with-eval-after-load 'company
  (defun aqua/company-math-init()
    (setq-local company-backends
                (append '((company-math-symbols-latex
                           company-auctex-macros
                           company-auctex-symbols
                           company-auctex-environments))
                        company-backends)))

  (add-hook 'TeX-mode-hook 'aqua/company-math-init)
  (add-hook 'org-mode-hook 'aqua/company-math-init))
#+end_src

* Pdf export of org documents

For exporting ~pdf~ and generation of the ~pdf~ documents from ~org~ we need a proper
~LaTeX~ compiler and we will be using ~xelatex~ for our purpose. Please note that
we will be using ~xelatex~ instead of ~pdflatex~ as fontspec is only supported by
~xelatex~ or ~lualatex~.

While compiling a ~LaTeX~ document with citations, it is required to run the
compiler *4* times in order to get all the formatting and intermediate documents
correct. The command ~org-latex-pdf-process~ takes care of that.

Pre-export settings useful for adding and configuring the packages.

#+begin_src emacs-lisp :lexical no
;; LaTeX Export Settings with customisations using XeLaTeX
;; interpret "_" and "^" for export when braces are used.
(setq org-export-with-sub-superscripts '{})

;; list of default packages to be inserted into preamble
(setq org-latex-default-packages-alist
      '(("AUTO" "inputenc" t)       ; translates various standard and other input encodings
        (""     "lmodern" nil)      ; Latin Modern Roman - this is for having good fonts
        ("T1"   "fontenc" t)        ; This is for handling accented characters

        ;; for standard margins to be placed
        ("top=1in, bottom=1.in, left=1in, right=1in" "geometry" nil)

        ;; The below 3 are default packages included in every tex file,
        ;; whether pdflatex or xelatex
        ("" "graphicx"     t)         ; Enhanced support for graphics
        ("" "longtable"    nil)       ; Allow tables to flow over page boundaries
        ("" "float"        nil)       ; Improved interface for floating object

        ("" "wrapfig"      nil)       ; to wrap text around figures
        ("" "rotating"     nil)       ; rotation of figures and tables
        ("normalem" "ulem" t)         ; for underlining

        ;; ("" "fixltx2e" nil)        ; patch for LaTeX
        ;; ("" "soul" t)              ; proper hyphenation
        ;; ("" "latexsym" t)          ; additional characters from lasy fonts

        ;; for math symbols support
        ;; the order of below is important to avoid \iint and \iiint errors
        ("" "amsmath"  t)                    ; math formulas support
        ("" "textcomp" t)                    ; support for Text Companion fonts
        ("" "marvosym" t)                    ; support for currency symbols
        ("" "wasysym"  t)                    ; support for wasy fonts
        ("" "amssymb"  t)                    ; math symbols support
        ("" "amsmath"  t)                    ; math formulas support
        ("theorems, skins" "tcolorbox" t)    ; coloured and framed text boxes

        ;; bibliography styles
        ;; note that natbib and biblatex are incompatible
        ("numbers,square,sort&compress" "natbib" nil) ; flexible bibliography support
        ("" "natmove" nil)                           ; move superscripted citations beyond punctuation

        ;; Verbatim with URL-sensitive line breaks
        ("" "url" nil)

        ;; for source code highlighting
        ("cache=false" "minted" nil)

        ;; this allows you to use underscores in places like filenames.
        ;; control behaviour of "_" in text
        ("strings" "underscore" nil)

        ;; hyperref should be the last to load
        ;; https://tex.stackexchange.com/questions/46032/hyperref-error-when-using-xelatex-and-fontspec-with-latexmk
        ("linktocpage,pdfstartview=FitH,colorlinks=true,linkcolor=teal,anchorcolor=teal,
citecolor=magenta,filecolor=green,urlcolor=cyan" "hyperref" nil)

        ;; allows to attachs binary files in pdfs
        ("" "attachfile" nil)

        ;; support for setting the spacing between lines in a document.
        ("" "setspace" nil)

        ))

;; from scimax
;; do not put in \hypersetup. Use your own if you want it e.g.
;; \hypersetup{pdfkeywords={%s},\n pdfsubject={%s},\n pdfcreator={%}}
(setq org-latex-hyperref-template nil)

;; format for displaying numbers in scientific notation
(setq org-latex-table-scientific-notation "%s × 10\\(^\\text{%s}\\)")

;; Font-lock
;; Latex fragments for highlighting latex related syntax in buffer
(setq org-highlight-latex-and-related '(native script entities))
(set-face-foreground 'org-latex-and-related "blue")

;; to circumvent reliance on Apache config, solution by Seb:
;; http://thread.gmane.org/gmane.emacs.orgmode/53856/focus=53875
(setq org-html-xml-declaration
      '(("html" . "<!-- <xml version=\"1.0\" encoding=\"utf-8\"> -->")))
#+end_src

Here, we set the compilation command for org to latex to pdf.

#+begin_src emacs-lisp
;; setting up XELATEX for pdf generation
;;
;; Let the exporter use the -shell-escape option to let latex
;; execute external programs.

(setq org-latex-compiler "xelatex")

;;  defines how to generate the pdf file using xelatex + bibtex
;;  switching from to biber from bibtex or vice-versa
;;  -8bit has been added to address ^^X sequences


;; defines how to generate the pdf file using xelatex + biber
;; (setq org-latex-pdf-process
;;       '(
;;         "xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
;;         "bibtex %b"
;;         "xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
;;         "xelatex -8bit -shell-escape -interaction nonstopmode -output-directory %o %f"
;;         ))

;; Using pdflatex from latexmkrc
;; (setq org-latex-pdf-process
;;       (list "latexmk -pdflatex='%latex -8bit -shell-escape -interaction
;; nonstopmode' -pdf -bibtex -f -output-directory=%o %f"))

(setq org-latex-pdf-process '("LC_ALL=en_US.UTF-8 latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

** LaTeX export with additional classes

Org-mode  includes  a  powerful  export  module for  converting  files  to  many
formats. Start  the export module  with the ~org-export-dispatch~  function, which
can be  run with  the ~C-c  C-e~ keyboard  shortcut. The  dispatch will  split the
screen and provide a range of options.

The export  functionality comes with  some sensible  defaults, but to  craft our
article or a book the way we want  it to look, we need to add some configuration
and options within our Org file.

LaTeX is  a powerful typesetting  system, especially for writing  scientific and
technical documents. But writing documents in  LaTeX can be confusing because it
is required  to know many commands,  and the text is  littered with backslashes,
curly braces, and other syntax distractions.  Being productive as a writer needs
focusing on the text's content instead of  how it looks. Org mode is the perfect
LaTeX editor because it frees one from such distractions.

Here are the list of installed latex classes.

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)

(mapcar 'car org-latex-classes)
#+END_SRC

By default, Org mode uses the /article class/ to export documents, but this can
be changed with export settings in the file header, for example:

#+begin_example
  #+latex_class: book
  #+latex_class_options: [a4paper]
  #+latex_header: \usepackage{times}
  #+options: :toc:nil
#+end_example

This particular file header sets the LaTeX class to a ~book~ in *A4* paper size and
uses the /Times package fonts/. The last line tells Org mode to omit the table of
contents from the export.

More complex header configurations may be defined by changing the
~org-latex-classes~ list. The example below adds the template for journals of the
/Taylor & Francis/ publisher.

#+begin_example
  (add-to-list 'org-latex-classes '("taylorfrancis"
                                    "\\documentclass[largeformat]{interact}"
                                    ("\\section{%s}" . "\\section*{%s}")
                                    ("\\subsection{%s}" . "\\subsection*{%s}")))
#+end_example

Call this particular class by adding *#+latex_class: taylorfrancis* to your file header.

** All custom LaTeX classes

Custom latex classes to be used for document exporte are all defined in this section.

#+begin_src emacs-lisp
;; adding additional classes for org-export
;;
;; (unless (boundp 'org-latex-classes)
;;   (setq org-latex-classes nil))
;;
;; beamer class is useful for creating presentations in latex and org
(add-to-list 'org-latex-classes
             '("beamer"
               "\\documentclass[11pt,professionalfonts]{beamer}\n
                \\mode<{{{beamermode}}}>\n
                \\usetheme{{{{beamertheme}}}}\n
                \\usecolortheme{{{{beamercolortheme}}}}\n
                \\beamertemplateballitem\n
                \\setbeameroption{show notes}
                \\usepackage[utf8]{inputenc}\n
                \\usepackage[T1]{fontenc}\n
                \\usepackage{hyperref}\n
                \\usepackage{color}
                \\usepackage{listings}
                \\usepackage{multirow}
                \\usepackage{subfigure}
                \\usepackage{graphicx}
                \\usepackage{xcolor}
                \\usepackage{url}
                \\usepackage{amssymb}
                \\usepackage{amsmath}
                \\usepackage{tikz}
                \\usepackage{xcolor}
                \\usepackage{lmodern}
                \\usepackage[margin=1in]{geometry}
                \\usepackage{algorithmic}
                \\usepackage{algorithm}
                \\usepackage{fontspec,xunicode,xltxtra}
                \\usepackage{polyglossia}
                \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
                         frame=single,
                         basicstyle=\\small,
                         showspaces=false,showstringspaces=false,
                         showtabs=false,
                         keywordstyle=\\color{blue}\\bfseries,
                         commentstyle=\\color{red},
                         }\n
                \\usepackage{verbatim}\n
                \\institute{{{{beamerinstitute}}}}\n
                \\subject{{{{beamersubject}}}}\n"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}"
                "\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}")))

;; letter is a latex class for creating formal letters
(add-to-list 'org-latex-classes
             '("letter"
               "\\documentclass[11pt]{letter}\n
                \\usepackage[utf8]{inputenc}\n
                \\usepackage[T1]{fontenc}\n
                \\usepackage{color}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; private latex classes (referred from http://www.star.bris.ac.uk/bjm/org-basics.html)
(add-to-list 'org-latex-classes
             '("bjmarticle"
               "\\documentclass{article}
                \\usepackage[utf8]{inputenc}
                \\usepackage[T1]{fontenc}
                \\usepackage{graphicx}
                \\usepackage{longtable}
                \\usepackage{hyperref}
                \\usepackage{natbib}
                \\usepackage{amssymb}
                \\usepackage{amsmath}
                \\usepackage{geometry}
                \\geometry{a4paper,left=2.5cm,top=2cm,right=2.5cm,bottom=2cm,marginparsep=7pt, marginparwidth=.6in}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("ieee"
               "\\usepackage{IEEEconf,IEEEtran} \\documentclass[12pt,journal]{IEEEtran}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(add-to-list 'org-latex-classes
             '("koma-article"
               "\\documentclass{scrartcl}
               [NO-DEFAULT-PACKAGES]
               [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


;; a customised article with better margins
(add-to-list 'org-latex-classes
             '("myarticle"                          ;; custom article class-name
               "\\documentclass{article}
\\usepackage[top=1in, bottom=1.in, left=1in, right=1in]{geometry}
 [PACKAGES]
 [EXTRA]" ;;header-string
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*a{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


;; org latex class for APA-style export
(add-to-list 'org-latex-classes
             '("apa6"
               "\\documentclass[man,12pt]{apa6}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; exporting a single chapter
(add-to-list 'org-latex-classes
             '("chapter" "\\documentclass[11pt]{report}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")))

(add-to-list 'org-latex-classes
             '("thesis"
               "\\documentclass{thesis}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))


;; Elsarticle is Elsevier class for publications.
(add-to-list 'org-latex-classes
             '("elsarticle"
               "\\documentclass{elsarticle}
 [NO-DEFAULT-PACKAGES]
 [PACKAGES]
 [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


;; https://github.com/Tufte-LaTeX/tufte-latex
;; tufte-book class for writing classy books
;; Edward Tufte is known for graphical excellence in his famous books. The
;; below latex class is to handle format matching his work
;; (add-to-list 'org-export-latex-classes
;;         '("tufte-book"
;;         "\\documentclass{tufte-book}\n
;;         \\usepackage{color}
;;         \\usepackage{amssymb}
;;         \\usepackage{gensymb}
;;         \\usepackage{units}"
;;         ("\\section{%s}"      . "\\section*{%s}")
;;         ("\\subsection{%s}"   . "\\subsection*{%s}")
;;         ("\\paragraph{%s}"    . "\\paragraph*{%s}")
;;         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; tufte-handout class for writing classy handouts and papers
;; (add-to-list 'org-export-latex-classes
;; '("tuftehandout"
;;         "\\documentclass{tufte-handout}
;;         \\usepackage{color}
;;         \\usepackage{amssymb}
;;         \\usepackage{amsmath}
;;         \\usepackage{gensymb}
;;         \\usepackage{nicefrac}
;;         \\usepackage{units}"
;;         ("\\section{%s}" . "\\section*{%s}")
;;         ("\\subsection{%s}" . "\\subsection*{%s}")
;;         ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;         ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+begin_src emacs-lisp :lexical no
(setq org-latex-listings-options '(("breaklines" "true")
                                   ("literate" "{0}{0}{1}%
                                                {1}{1}{1}%
                                                {2}{2}{1}%
                                                {3}{3}{1}%
                                                {4}{4}{1}%
                                                {5}{5}{1}%
                                                {6}{6}{1}%
                                                {7}{7}{1}%
                                                {8}{8}{1}%
                                                {9}{9}{1}%
                                                ")))
#+end_src

* Addition Addons and configurations settings for LaTeX

This section consists of certain configurations and Some additional helper
packages and functions required for working with ~LaTeX~.

** Compiling LaTeX documents
With =auctex= we can compile the =TeX= documents into =pdf= files using Emacs mapping
*C-c C-c* and then followed by typing *mk* and using *LaTeXmk* for compilation.
Also, *C-c C-a* does everything without any prompt.

*C-c C-e* –> add an environment
*C-c ret* –> add macros such as \item etc…

** Auctex

=AucTeX=  is  an extensible  package  for  writing  and  formatting Tex  files  in
Emacs.  It is  the  foundation for  LaTeX  (and ConText)  editing  in Emacs.  It
provides commands and  minor-modes for all the aspects of  document creation. It
provides all the ingredients we need.

~AucTeX~  does  most  of  the  work  of creating  a  full  fledged  LaTeX  editing
environment,  leaving  us  with  the  task  of  adding  time-saving  convenience
features.

~AucTeX~ is generally responsible for providing completions while typing. The most
general, always available options for text input are:

  * Insert an arbitrary environment with LaTeX-environment (C-c C-e),
  * or a macro with TeX-insert-macro (C-c C-m), which it will do so after prompting you for arguments.
  * Insert a section header with LaTeX-section (C-c C-s).

#+begin_src emacs-lisp :noweb yes
;; auctex
;; (use-package tex
;;   :defer t
;;   :ensure auctex)


(use-package tex
  :defer t
  :ensure auctex
  :init
  (progn
    ;; set the default command for tex command
    (setq TeX-command-default   (if (executable-find "latexmk") "LatexMk" "LaTeX")
          ;; set the LaTeX Engine
          TeX-engine            (if (executable-find "xetex")   'xetex    'default)
          TeX-auto-save                     t
          TeX-parse-self                    t
          TeX-syntactic-comment             t
          TeX-auto-local                    ".auctex-auto"
          TeX-style-local                   ".auctex-style"
          ;; Synctex is a nice add-on that synchronizes the editing tool
          ;; (Emacs/MacTeX/AucTeX) with a PDF viewing tool
          TeX-source-correlate-mode         t
          TeX-source-correlate-method       'synctex
          TeX-source-correlate-start-server nil
          TeX-electric-sub-and-superscript  t
          TeX-fill-break-at-separators      nil
          TeX-save-query                    t
          ;; Viewers
          TeX-view-program-list
          '(("Preview.app" "open -a Preview.app %o")
            ("Skim" "open -a Skim.app %o")
            ("displayline" "displayline -g -b %n %o %b")
            ("open" "open %o"))

          TeX-view-program-selection
          '((output-dvi "Skim")
            (output-pdf "Skim")
            (output-html "open"))))
  :config
  <<latex-fontification>>
  (setq TeX-master t)
  (setcar (cdr (assoc "Check" TeX-command-list)) "chktex -v6 -H %s")
  (add-hook 'TeX-mode-hook (lambda ()
                             (setq ispell-parser          'tex
                                   fill-nobreak-predicate (cons #'texmathp fill-nobreak-predicate))))
  (add-hook 'TeX-mode-hook #'visual-line-mode)
  (add-hook 'TeX-update-style-hook #'rainbow-delimiters-mode)
  (add-hook 'TeX-mode-hook #'turn-on-reftex)
  '(add-to-list 'TeX-expand-list '("%q" skim-make-url)))
  #+end_src

*Notes*

Open a =.tex= file and give it a try. Once you finish editing the source file,
you can compile the project with =C-c C-c= and =C-c C-c= again to view the PDF in
Skim. Forward search can be called by =C-c C-v= and inverse search can be
called by /shift + cmd + (left click)/.

#+begin_src emacs-lisp
(add-hook 'TeX-mode-hook
          #'(lambda ()
             (setq TeX-command-default "latexmk")))

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (push
             '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
               :help "Run latexmk on file")
             TeX-command-list)))
(add-hook 'TeX-mode-hook #'(lambda () (setq TeX-command-default "latexmk")))


(defun skim-make-url ()
  (concat
   (TeX-current-line)
   " "
   (expand-file-name (funcall file (TeX-output-extension) t)
                     (file-name-directory (TeX-master-file)))
   " "
   (buffer-file-name)))

;; outline for tex
;; (add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
;; (add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)

;; Synctex is a nice add-on that synchronizes the editing tool (Emacs/MacTeX)
;; with a PDF viewing tool
;; (setq TeX-source-correlate-method 'synctex)
;; (setq TeX-source-correlate-start-server t)
;; (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
#+end_src

** Borrowed configurations
This section consists of certain configurations borrowed and adopted either directly or indirectly from other famous emacs configurations.

The below sections are taken from Doom Emacs configuration.

#+name: latex-fontification
#+begin_src emacs-lisp :tangle no
(setq font-latex-match-reference-keywords
      '(;; BibLaTeX.
        ("printbibliography" "[{") ("addbibresource" "[{")
        ;; Standard commands.
        ("cite" "[{")       ("citep" "[{")
        ("citet" "[{")      ("Cite" "[{")
        ("parencite" "[{")  ("Parencite" "[{")
        ("footcite" "[{")   ("footcitetext" "[{")
        ;; Style-specific commands.
        ("textcite" "[{")   ("Textcite" "[{")
        ("smartcite" "[{")  ("Smartcite" "[{")
        ("cite*" "[{")      ("parencite*" "[{")
        ("supercite" "[{")
        ;; Qualified citation lists.
        ("cites" "[{")      ("Cites" "[{")
        ("parencites" "[{") ("Parencites" "[{")
        ("footcites" "[{")  ("footcitetexts" "[{")
        ("smartcites" "[{") ("Smartcites" "[{")
        ("textcites" "[{")  ("Textcites" "[{")
        ("supercites" "[{")
        ;; Style-independent commands.
        ("autocite" "[{")   ("Autocite" "[{")
        ("autocite*" "[{")  ("Autocite*" "[{")
        ("autocites" "[{")  ("Autocites" "[{")
        ;; Text commands.
        ("citeauthor" "[{") ("Citeauthor" "[{")
        ("citetitle" "[{")  ("citetitle*" "[{")
        ("citeyear" "[{")   ("citedate" "[{")
        ("citeurl" "[{")
        ;; Special commands.
        ("fullcite" "[{")
        ;; Cleveref.
        ("cref" "{")          ("Cref" "{")
        ("cpageref" "{")      ("Cpageref" "{")
        ("cpagerefrange" "{") ("Cpagerefrange" "{")
        ("crefrange" "{")     ("Crefrange" "{")
        ("labelcref" "{")))

(setq font-latex-match-textual-keywords
      '(;; BibLaTeX brackets.
        ("parentext" "{") ("brackettext" "{")
        ("hybridblockquote" "[{")
        ;; Auxiliary commands.
        ("textelp" "{")   ("textelp*" "{")
        ("textins" "{")   ("textins*" "{")
        ;; Subcaption.
        ("subcaption" "[{")))

(setq font-latex-match-variable-keywords
      '(;; Amsmath.
        ("numberwithin" "{")
        ;; Enumitem.
        ("setlist" "[{")     ("setlist*" "[{")
        ("newlist" "{")      ("renewlist" "{")
        ("setlistdepth" "{") ("restartlist" "{")
        ("crefname" "{")))
#+end_src

** Settings for tex-mode

=tex-mode= is a built-in package which we configure as per our requirement in this
section.

#+begin_src emacs-lisp
(use-package tex-mode
  :defer t
  :config
  (setq LaTeX-section-hook '(LaTeX-section-heading
                             LaTeX-section-title
                             LaTeX-section-toc
                             LaTeX-section-section
                             LaTeX-section-label)
        LaTeX-fill-break-at-separators nil
        LaTeX-item-indent              0))
#+end_src

** Adding LatexMk support

The package =auctex-latexmk= adds LatexMk support to AUCTeX.

#+begin_src emacs-lisp :tangle no
(use-package auctex-latexmk
  :after (auctex)
  :defer t
  :init
  (setq auctex-latexmk-inherit-TeX-PDF-mode t)
  (add-hook 'LaTeX-mode (lambda () (setq TeX-command-default "LatexMk")))
  :config
  (auctex-latexmk-setup))
#+end_src

** Auto completion for Auctex

=company-auctex= is a company specific package which provides autocompletion for ~auctex~.

#+begin_src emacs-lisp :tangle no
(use-package company-auctex
  :after (:all company tex)
  :demand t
  :quelpa (:fetcher github :repo "alexeyr/company-auctex")
  :init
  (add-hook 'TeX-mode-hook
            (lambda ()
              (make-local-variable 'company-backends)
              (company-auctex-init))))
#+end_src

** TeX configuration settings
Certain additional settings missed earlier but applicable for LaTeX buffers are all defined here.

#+begin_src emacs-lisp :lexical no
;; (setq TeX-auto-save t)
;; (setq TeX-parse-self t)
;; (setq-default TeX-master nil)

;; set the LaTeX Engine
;; (setenv "PATH" (concat ":/Library/TeX/texbin/" (getenv "PATH")))
;; (add-to-list 'exec-path "/Library/TeX/texbin/")

;; (setq TeX-engine (quote "/Library/TeX/texbin/xetex"))
;; (setq-default TeX-engine "xetex")

;; add synctex
(setq LaTeX-command "pdflatex -file-line-error -shell-escape -synctex=1")

;; to use pdfview with auctex
;; (add-hook 'LaTeX-mode-hook 'pdf-tools-install)

;; to use pdfview with Emacs latex mode
;; (add-hook 'latex-mode-hook 'pdf-tools-install)

;; set the default command for tex command
;; (setq TeX-command-default "XeTeX")

;; display the output of tex compilation
(setq TeX-show-compilation t)

;; for AucTex
;; updating the PDF-buffer after the TeX compilation has finished
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; TeX command list configuration
(setq TeX-command-list
      (quote
       (("TeX" "%(PDF)%(tex) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
         (plain-tex-mode texinfo-mode ams-tex-mode)
         :help "Run plain TeX")
        ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
         (latex-mode doctex-mode)
         :help "Run LaTeX")
        ("LaTeX Make" "latexmk -pdflatex='pdflatex -synctex=1' -pdf %s" TeX-run-command nil t
         :help "Run LaTeX Make")
        ("Makeinfo" "makeinfo %t" TeX-run-compile nil
         (texinfo-mode)
         :help "Run Makeinfo with Info output")
        ("Makeinfo HTML" "makeinfo --html %t" TeX-run-compile nil
         (texinfo-mode)
         :help "Run Makeinfo with HTML output")
        ("AmSTeX" "%(PDF)amstex %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
         (ams-tex-mode)
         :help "Run AMSTeX")
        ("ConTeXt" "texexec --once --texutil %(execopts)%t" TeX-run-TeX nil
         (context-mode)
         :help "Run ConTeXt once")
        ("ConTeXt Full" "texexec %(execopts)%t" TeX-run-TeX nil
         (context-mode)
         :help "Run ConTeXt until completion")
        ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX")
        ("Biber" "biber %s" TeX-run-Biber t t :help "Run Biber")
        ("View" "%V" TeX-run-discard-or-function nil t :help "Run Viewer")
        ("Print" "%p" TeX-run-command t t :help "Print the file")
        ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
        ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file")
        ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file")
        ("Check" "lacheck %s" TeX-run-compile nil
         (latex-mode)
         :help "Check LaTeX file for correctness")
        ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
        ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
        ("Clean All" "del *.aux *.log %s.out %s.exa %s.ilg %s.idx %s.ind %s.lof %s.lot %s.toc %s.bbl %s.blg %s.dvi %s.ps %s.pdf *~" TeX-run-command nil t :help "Delete generated intermediate and output files")
        ("Other" "" TeX-run-command t t :help "Run an arbitrary command")
        ("XeLaTeX_SyncteX" "%`xelatex --synctex=1%(mode)%' %t " TeX-run-command nil
         (latex-mode doctex-mode)))))
#+end_src

** ox-latex export settings
Some settings for the =ox-latex= while assisting in the export of org documents
into various formats.
#+begin_src emacs-lisp :lexical no
;; ox-latex export settings
(setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~"
                                            "aux" "idx" "log"
                                            "out" "toc" "nav"
                                            "snm" "vrb" "dvi"
                                            "fdb_latexmk" "blg"
                                            "brf" "fls" "entoc"
                                            "ps" "spl" "bbl"
                                            "pyg" "pygtex" "pygstyle")))

;; do not remove the log files after export
(setq org-latex-remove-logfiles nil)
#+end_src

** LaTeX Preview Pane
=latex-preview-pane= is a minor mode for Emacs that enables you to preview your LaTeX files directly in Emacs. It supports PDF previews, your choice of pdflatex or xelatex, and it highlights errors in your LaTeX buffer.

#+begin_src emacs-lisp :lexical no
(use-package latex-preview-pane
  :quelpa
  (:fetcher github :repo "https://github.com/jsinglet/latex-preview-pane")
  :defer t
  :config
  (latex-preview-pane-enable))
#+end_src

** LaTeX Math Preview
~latex-math-preview~ is a package for previewing the latex mathematical expressions.

#+begin_src emacs-lisp :lexical no
;; latex mathematical expressions preview
(use-package latex-math-preview
  :quelpa (:fetcher github :repo "https://github.com/emacsmirror/latex-math-preview")
  :defer t
  :config
  (autoload 'latex-math-preview-expression      "latex-math-preview" nil t)
  (autoload 'latex-math-preview-insert-symbol   "latex-math-preview" nil t)
  (autoload 'latex-math-preview-save-image-file "latex-math-preview" nil t)
  (autoload 'latex-math-preview-beamer-frame    "latex-math-preview" nil t))
#+end_src

** TexPdf options and auto-fill for latex

Enable =auto-fill= for the LaTeX content.

#+begin_src emacs-lisp :lexical no
;; PDF with LaTeX by default
(defun TeX-PDF-mode-on ()
  "Set the TEX PDF mode on."
  (interactive)
  (TeX-PDF-mode 1))

(add-hook 'tex-mode-hook   'TeX-PDF-mode-on)
(add-hook 'LaTeX-mode-hook 'TeX-PDF-mode-on)
(add-hook 'latex-mode-hook 'TeX-PDF-mode-on)

;; auto-fill mode
(defun auto-fill-mode-on ()
  "Turn on Autofill mode."
  (auto-fill-mode 1))

(add-hook 'tex-mode-hook   'auto-fill-mode-on)
(add-hook 'LaTeX-mode-hook 'auto-fill-mode-on)    ; using AucTeX
(add-hook 'latex-mode-hook 'auto-fill-mode-on)    ; using Emacs Latex
#+end_src

** Generating TeX file using a hook

The function defined here can be used in an ~after-save-hook~ to generate the
~LaTeX~ document from the ~org~ source and it can be defined on a per file basis.

#+begin_src emacs-lisp :lexical no
;; for LaTeX generation
(defun aqua/org-export-tex-on-save ()
  (interactive)
  (if (eq major-mode 'org-mode)
      (org-latex-export-to-latex t)))
#+end_src

The function can be invoked from local variables in a file with below

#+begin_example
# Local Variables:
# after-save-hook: aqua/org-export-tex-on-save
# End:
#+end_example


* LSP integration for LaTeX

We can harness the power of *LSP* for providing auto-completion to latex by
integrating the tex-mode with lsp.

Set the =lsp=server= value to =digestif=. The default is =texlab=.
#+BEGIN_SRC emacs-lisp
;; set lsp server for tex files
(setq lsp-tex-server 'digestif)
#+END_SRC

#+begin_src emacs-lisp :lexical no
;; lsp latex integration
(use-package lsp-latex
  :quelpa
  (lsp-latex :fetcher github :repo "ROCKTAKEY/lsp-latex")
  :hook ((tex-mode    . lsp-deferred)
         (latex-mode  . lsp-deferred)
         (LaTeX-mode  . lsp-deferred)
         (bibtex-mode . lsp-deferred))
  :config
  (setq lsp-latex-forward-search-executable "/Applications/Skim.app/Contents/SharedSupport/displayline"
        lsp-latex-forward-search-args       '("%l" "%p" "%f")))
#+end_src
