#+begin_src emacs-lisp :exports none
;;; -*- lexical-binding: t -*-
;;; pdftools-config.el --- pdf-tools package configuration
;;
;; Author: Sampath Singamsetty
;;
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file
;; addons-config.org
;;
;;; Commentary:
;; This module contains packages for pdf-tools
;; PDF Tools is among other things a replacement of DocView for PDF
;; files.  The key difference is, that pages are not prerendered by
;; e.g. ghostscript and stored in the file-system, but rather created
;; on-demand and stored in memory.
;;
;; Note: If package is updated, Emacs should be restarted afterwards.
;;
;; Prerequisites to be installed...
;;  brew install poppler automake libffi
;; To activate the package put
;;
;; (pdf-tools-install :no-query)
;;
;; M-x pdf-tools-help RET
;; gives some help on using the package and
;;
;; M-x pdf-tools-customize RET
;; offers some customization options.
;;
;; Features:
;;
;; * View
;;   View PDF documents in a buffer with DocView-like bindings.
;;
;; * Isearch
;;   Interactively search PDF documents like any other buffer. (Though
;;   there is currently no regexp support.)
;;
;; * Follow links
;;   Click on highlighted links, moving to some part of a different
;;   page, some external file, a website or any other URI.  Links may
;;   also be followed by keyboard commands.
;;
;; * Annotations
;;   Display and list text and markup annotations (like underline),
;;   edit their contents and attributes (e.g. color), move them around,
;;   delete them or create new ones and then save the modifications
;;   back to the PDF file.
;;
;; * Attachments
;;   Save files attached to the PDF-file or list them in a dired buffer.
;;
;; * Outline
;;   Use imenu or a special buffer to examine and navigate the PDF's
;;   outline.
;;
;; * SyncTeX
;;   Jump from a position on a page directly to the TeX source and
;;   vice-versa.
;;
;; * Misc
;;    + Display PDF's metadata.
;;    + Mark a region and kill the text from the PDF.
;;    + Search for occurrences of a string.
;;    + Keep track of visited pages via a history.
;;
;;
;;; Code:
;;;
#+end_src

#+TITLE: Pdf tools configuration
#+AUTHOR: Sampath Singamsetty
#+STARTUP: indent

* PDF and Document viewing Tools and configurations                   :TOC_4:
- [[#setup-pdf-tools][Setup pdf-tools]]
  - [[#useful-key-bindings][Useful key bindings]]
  - [[#document-viewer-for-emacs][Document viewer for Emacs]]
  - [[#additional-packages-supporting-the-pdf-for-org][Additional packages supporting the pdf for org]]
    - [[#org-noter-setup][org-noter setup]]
    - [[#major-mode-for-reading-epubs-in-emacs][Major mode for reading EPUBs in Emacs]]
      - [[#usage][Usage]]
    - [[#org-pdftools][org-pdftools]]

* Setup pdf-tools
For creating or reading ~pdf~ files we need the package ~pdf-tools~. Installing
this needs some prerequisites like /poppler/ and /automake/ which may be installed
with homebrew.
In addition, we need to setup ~pkg-config~ to find some libraries by setting
~PKG_CONFIG_PATH~ value. homebrew will show which paths need to be added to
~PKG_CONFIG_PATH~ during the installation process.

#+begin_src example
we can check if the foreign function interface is avaialble else install using homebrew
λ mdfind -name pkgconfig | grep libffi

λ brew install libffi
...
...
For compilers to find libffi you may need to set:
  export LDFLAGS="-L/opt/homebrew/opt/libffi/lib"
  export CPPFLAGS="-I/opt/homebrew/opt/libffi/include"

For pkg-config to find libffi you may need to set:
  export PKG_CONFIG_PATH="/opt/homebrew/opt/libffi/lib/pkgconfig"
#+end_src

#+begin_src emacs-lisp
;; set pkg-config
(if (string-equal system-type "darwin")
    (setenv "PKG_CONFIG_PATH"
            (concat (shell-command-to-string "printf %s \"$(brew --prefix libffi)\"") "/lib/pkgconfig/")
            (getenv "PKG_CONFIG_PATH")))
#+end_src

#+RESULTS:
: /opt/homebrew/opt/libffi/lib/pkgconfig/

Installation of =pdf-tools= is configured here.

#+begin_src emacs-lisp
;; pdf tools for viewing and interacting with pdf
(use-package pdf-tools
  ;; :quelpa (pdf-tools :fetcher github
  ;;                    :repo "vedang/pdf-tools")

  :functions
  (pdf-view-revert-buffer-maybe pdf-view-revert-buffer)

  :mode
  (("\\.pdf\\'" . pdf-view-mode))

  :magic
  ("%PDF" . pdf-view-mode)

  :hook
  (pdf-view-mode . (lambda () (cua-mode 0)))                   ; turn off cua so copy works
  (pdf-view-mode . (lambda () (display-line-numbers-mode -1))) ; does not work well with linum
  (doc-view-mode . (lambda () (require 'pdf-tools)))

  ;;:init
  ;;(pdf-loader-install :no-query)    ; on demand loading, leads to faster startup time

  :config
  ;; the :no-query auto builds epfinfo when required
  (pdf-tools-install :no-query)        ; standard activation command

  ;; required packages
  (require 'pdf-tools)
  (require 'pdf-view)
  (require 'pdf-misc)
  (require 'pdf-occur)
  (require 'pdf-util)
  (require 'pdf-annot)
  (require 'pdf-info)
  (require 'pdf-isearch)
  (require 'pdf-history)
  (require 'pdf-links)
  (require 'pdf-outline)
  (require 'pdf-sync)

  ;; (add-hook 'doc-view-mode-hook 'pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page)      ; open pdfs scaled to the fit page
  (setq pdf-view-use-scaling t)                       ; for mac with retina display

  ;; auto annotate highlights
  (require 'pdf-annot)
  (setq pdf-annot-default-annotation-properties
        `((t (label . ,user-full-name))
          (text (icon  . "Comment")
                (color . "#ff0000"))
          (highlight  (color . "yellow"))
          (squiggly   (color . "orange"))
          (strike-out (color . "red"))
          (underline  (color . "blue"))))

  ;; use regular isearch
  ;; (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  ;; additional fine-grained setting for space provisioning
  ;; zooming with + and - than the default 25%, now 10%
  (setq pdf-view-resize-factor 1.10
        pdf-annot-activate-created-annotations t  ; automatically annotate highlights
        mouse-wheel-follow-mouse t
        pdf-view-midnight-colors '("#DCDCCC" . "#383838"))

  (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)

  (defun pdf-view-revert-buffer-maybe (file)
    (when-let ((buf (find-buffer-visiting file)))
      (with-current-buffer buf
        (when (derived-mode-p 'pdf-view-mode)
          (pdf-view-revert-buffer nil t)))))

  :bind
  (:map pdf-view-mode-map
        ;; some keyboard shortcuts
        ("h"   . 'pdf-annot-add-highlight-markup-annotation)
        ("t"   . 'pdf-annot-add-text-annotation)
        ("d"   . 'pdf-annot-delete)
        ("C-s" . 'isearch-forward)))
#+end_src

** Useful key bindings
  Keybindings for =pdf-tools=.

  |--------------------------------+-----------------------------|
  | Key Binding                    | Description                 |
  |--------------------------------+-----------------------------|
  | n                              | Next page                   |
  | p                              | Previous page               |
  | SPC                            | Scroll up                   |
  | S-SPC                          | Scroll down                 |
  | C-n                            | Next line/page              |
  | C-p                            | Previous line/page          |
  |--------------------------------+-----------------------------|
  | <goto-line binding>            | Go to page                  |
  |--------------------------------+-----------------------------|
  | + / =                          | Enlarge view                |
  | -                              | Shrink view                 |
  | 0                              | Reset view                  |
  | W                              | Fit page width              |
  | H                              | Fit page height             |
  | P                              | Fit page                    |
  | s m <drag mouse to select box> | PDF zooms to that selection |
  | s r                            | Resets the above view slice |
  |--------------------------------+-----------------------------|
  | M-s w                          | isearch-forward-word        |
  | M-s o                          | pdf-isearch-occur           |
  |--------------------------------+-----------------------------|
  | m                              | bookmark-set                |
  |                                | (jump to bookmark using     |
  |                                | C-x r b)                    |
  |--------------------------------+-----------------------------|
  | View in Printed mode           | C-c C-r p                   |
  | View in Midnight mode          | C-c C-r m                   |
  |--------------------------------+-----------------------------|

** Document viewer for Emacs
DocView is a document viewer for Emacs.  It converts a number of
document formats (including PDF, PS, DVI, Djvu, ODF, EPUB, CBZ,
FB2, XPS and OXPS files) to a set of PNG (or TIFF for djvu) files,
one image for each page, and displays the images inside an Emacs
buffer.  This buffer uses `doc-view-mode' which provides convenient
key bindings for browsing the document.

#+begin_src emacs-lisp :lexical no
;; Doc-View
(use-package doc-view
  :custom
  (doc-view-resolution 300)
  (doc-view-mupdf-use-svg t)
  (large-file-warning-threshold (* 50 (expt 2 20))))
#+end_src

** Additional packages supporting the pdf for org
Here, we install and configure certain auxiliary packages that can be helpful
with documentation processes.

*** org-noter setup
=org-noter= is an Emacs document annotator which uses =org-mode=. It let's one to
create notes that are kept in sync when scrolled through the document, but that
are external to it - the notes themselves live in an Org-mode file.

#+begin_src emacs-lisp :lexical no
;; org-noter - Emacs document annotator, using Org-mode
(use-package org-noter
  :quelpa
  (:fetcher github :repo "https://github.com/weirdNox/org-noter")
  :config
  ;; Your org-noter config ........
  (require 'org-noter-pdftools))
#+end_src

*** Major mode for reading EPUBs in Emacs
=nov.el= provides a major mode for reading EPUB documents.
According to it's documentation at [[https://depp.brause.cc/nov.el][nov.el]] the following are it's core features:

 + Basic navigation (jump to TOC, previous/next chapter)
 + Remembering and restoring the last read position
 + Jump to next chapter when scrolling beyond end
 + Storing and following Org links to EPUB files
 + Renders EPUB2 (.ncx) and EPUB3 (<nav>) TOCs
 + Hyperlinks to internal and external targets
 + Supports textual and image documents
 + Info-style history navigation
 + View source of document files
 + Info-style incremental search
 + Metadata display
 + Image re-scaling

#+begin_src emacs-lisp :lexical no
;; nov.el provides a major mode for reading EPUB documents.
(use-package nov
  :defer 5
  :quelpa
  (nov :fetcher git :url "https://depp.brause.cc/nov.el.git")
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

Customising the rendering of =epub= files.
In  case  you're not  happy  with  the rendering  at  all,  you can  either  use
=nov-pre-html-render-hook= and =nov-post-html-render-hook= to adjust the HTML before
and  after  rendering  or  use   your  own  rendering  function  by  customising
=nov-render-html-function= to  one that replaces  HTML in a buffer  with something
nicer than the default output.

Here's an advanced example of text justification with the =justify-kp= package:

#+begin_src emacs-lisp :lexical no
;; customising the rendering of epub files
(require 'justify-kp)
(setq nov-text-width t)

(defun my-nov-window-configuration-change-hook ()
  (my-nov-post-html-render-hook)
  (remove-hook 'window-configuration-change-hook
               'my-nov-window-configuration-change-hook
               t))

(defun my-nov-post-html-render-hook ()
  (if (get-buffer-window)
      (let ((max-width (pj-line-width))
            buffer-read-only)
        (save-excursion
          (goto-char (point-min))
          (while (not (eobp))
            (when (not (looking-at "^[[:space:]]*$"))
              (goto-char (line-end-position))
              (when (> (shr-pixel-column) max-width)
                (goto-char (line-beginning-position))
                (pj-justify)))
            (forward-line 1))))
    (add-hook 'window-configuration-change-hook
              'my-nov-window-configuration-change-hook
              nil t)))

(add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)
#+end_src

=djvu= which allows for Editing and viewing the =Djvu= files via =djvused= is a
dependency for this package.

#+begin_src emacs-lisp :lexical no
;; djvu - Edit and view Djvu files via djvused
(use-package djvu
  :defer 5)
#+end_src

**** Usage
Open the =EPUB= file with =C-x C-f ~/novel.epub= and scroll with =SPC= key and switch
the chapters with =n= and =p=. More keybinds can be looked up with =F1 m=.

*** org-pdftools

=org-pdftools= is a custom org link type for =pdf-tools=

#+begin_src emacs-lisp
(use-package org-pdftools
  :quelpa (org-pdftools
           :fetcher github
           :repo "fuxialexander/org-pdftools")
  :hook (org-mode . org-pdftools-setup-link))

(use-package org-noter-pdftools
  :after org-noter
  :quelpa
  (:fetcher github :repo "https://github.com/fuxialexander/org-pdftools")
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freepointer-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

In order to link a specific page of a .pdf-file in an org-file, use the
following syntax:

#+begin_example
[[pdf:~/file.pdf::3][Link to page 3]]
#+end_example

While browsing a pdf buffer we can use =org-store-link= (by default C-c l) to get
a link to this location within the pdf even while marking some content in the
=.pdf=. Then use =org-insert-link= (by default C-c C-l) to create a link to this
page and this place on the page:

#+begin_example
[[pdf:~/file.pdf::5++0.00;;annot-5-0][file.pdf: Page 5; Quoting: some text]]
#+end_example
