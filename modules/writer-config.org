#+begin_src emacs-lisp :exports none
  ;;; package --- writer modes configuration -*- lexical-binding:t ; -*-
  ;;;
  ;;; Commentary
  ;;; DO NOT EDIT THIS FILE DIRECTLY
  ;;; This is a file generated from a literate programing source file
  ;;; ORG mode configuration
  ;;; Filename           : writer-config.el
  ;;  Description        : Utilities for writing and documentation
  ;;                       Customization information is available at
  ;;                       https://leanpub.com/markdown-mode
  ;;; Date               :
  ;;; Last Modified Date :
  ;;
  ;;; Code:
  ;;;
#+end_src


* Emacs Writing Setup :TOC_4:
- [[#writing-tools-and-documentation-configuration][Writing tools and Documentation configuration]]
  - [[#auto-fill-mode][Auto fill mode]]
  - [[#writeroom-mode][Writeroom Mode]]
  - [[#olivetti-mode][Olivetti mode]]
- [[#markdown-mode][Markdown mode]]
  - [[#generate-toc-for-markdown-file][Generate TOC for markdown file]]
  - [[#imenu-setup-for-markdown][iMenu setup for Markdown]]
- [[#get-word-definition-at-a-point][Get word definition at a point]]

* Writing tools and Documentation configuration
  Contains all tools to help for writing in *text*, *markdown* or *org* modes.

** Auto fill mode
Restricting the text files to 80 characters for easy readability.
#+begin_src emacs-lisp
;; text mode auto-fill
(add-hook 'text-mode-hook 'auto-fill-mode)
#+end_src

** Writeroom Mode
  ~writeroom-mode~  is  a  minor  mode for  Emacs  that  implements  a
  distraction-free writing mode similar  to the famous *Writeroom editor
  for OS  X*. writeroom-mode is meant  for GNU Emacs 24,  lower versions
  are not actively supported.
#+begin_src emacs-lisp
(use-package writeroom-mode
  :defer 3

  :init
  ;; (add-hook 'org-mode-hook 'writeroom-mode)
  (add-hook 'writeroom-mode-hook
            (lambda () (display-line-numbers-mode -1)))

  :custom
  (writeroom-global-effects nil)
  (writeroom-maximize-window nil)
  (writeroom-fringes-outside-margins nil)

  :bind
  (("C-c w w" . writeroom-mode)
   (:map writeroom-mode-map
         ("C-M-<" . writeroom-decrease-width)
         ("C-M->" . writeroom-increase-width)))

  :config
  (if (> (frame-width) 200)
          (setq writeroom-width (- (frame-width) 80))
        (setq writeroom-width 140)))
#+end_src

** Olivetti mode

#+begin_src emacs-lisp :lexical no
(use-package olivetti
  :ensure
  :defer 3
  :diminish
  :config
  (setq olivetti-body-width 0.65)
  (setq olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t)

  (define-minor-mode prot/olivetti-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters.

Fringes are disabled.  The modeline is hidden, except for
`prog-mode' buffers (see `prot/hidden-mode-line-mode').  The
default typeface is set to a proportionately-spaced family,
except for programming modes (see `prot/variable-pitch-mode').
The cursor becomes a blinking bar, per `prot/cursor-type-mode'."
    :init-value nil
    :global nil
    (if prot/olivetti-mode
        (progn
          (olivetti-mode 1)
          (set-window-fringes (selected-window) 0 0)
          (prot/variable-pitch-mode 1)
          (prot/cursor-type-mode 1)
          (unless (derived-mode-p 'prog-mode)
            (prot/hidden-mode-line-mode 1))
          (window-divider-mode 1)
          (when (eq major-mode 'org-mode)
            (org-superstar-mode 1)))
      (olivetti-mode -1)
      (set-window-fringes (selected-window) nil) ; Use default width
      (prot/variable-pitch-mode -1)
      (prot/cursor-type-mode -1)
      (unless (derived-mode-p 'prog-mode)
        (prot/hidden-mode-line-mode -1))
      (window-divider-mode -1)
      (when (eq major-mode "org-mode")
        (org-superstar-mode -1))))

  :bind ("C-c w o" . prot/olivetti-mode))
#+end_src

* Markdown mode
Markdown is an extremely useful tool; we will set up variable pitch and visual line mode. The
binary =multimarkdown= has been installed using =homebrew= and the location of the same is specified for _markdown-command_.

Detailed information for customisation is available at [[https://leanpub.com/markdown-mode/read][markdown-mode]]

#+begin_src emacs-lisp
;; enabling markdown Mode
(use-package markdown-mode
  :defer 3

  :quelpa
  (:fetcher github :repo "jrblevin/markdown-mode")

  :commands
  (markdown-mode gfm-mode)

  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.markdown"    . gfm-mode)
         ("\\.mdwn"        . gfm-mode))

  :hook
  (gfm-mode      . visual-line-mode)
  (markdown-mode . visual-line-mode)
  (markdown-mode . variable-pitch-mode)

  :init
  (setq markdown-enable-wiki-links t
        markdown-italic-underscore t
        markdown-asymmetric-header t
        markdown-make-gfm-checkboxes-buttons t
        markdown-gfm-uppercase-checkbox t
        markdown-fontify-code-blocks-natively t

        markdown-content-type "application/xhtml+xml"
        markdown-css-paths '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
                             "https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css")
        markdown-xhtml-header-content "
<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
<style>
body {
  box-sizing: border-box;
  max-width: 740px;
  width: 100%;
  margin: 40px auto;
  padding: 0 10px;
}
</style>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/default.min.css'>
<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
  document.body.classList.add('markdown-body');
  document.querySelectorAll('pre code').forEach((code) => {
    if (code.className != 'mermaid') {
      hljs.highlightBlock(code);
    }
  });
});
</script>

<script src='https://cdnjs.cloudflare.com/ajax/libs/mermaid/8.6.3/mermaid.min.js'></script>
<script>
mermaid.initialize({
  theme: 'default',  // default, forest, dark, neutral
  startOnLoad: true
});
</script>
"
        markdown-gfm-additional-languages "Mermaid")

  :config
  ;; `multimarkdown' is necessary for `highlight.js' and `mermaid.js'
  (when (executable-find "multimarkdown")
    (setq markdown-command "multimarkdown"))

  ;; Support for `mermaid'
  (add-to-list 'markdown-code-lang-modes '("mermaid" . mermaid-mode))

  (add-hook 'markdown-mode-hook 'turn-on-auto-fill)
  (add-hook 'markdown-mode-hook 'flycheck-mode)
  (add-hook 'markdown-mode-hook (lambda () (setq imenu-generic-expression markdown-imenu-generic-expression)))
  (setq markdown-imenu-generic-expression
        '(("title"  "^\\(.*\\)[\n]=+$" 1)
          ("h2-"    "^\\(.*\\)[\n]-+$" 1)
          ("h1"     "^# \\(.*\\)$" 1)
          ("h2"     "^## \\(.*\\)$" 1)
          ("h3"     "^### \\(.*\\)$" 1)
          ("h4"     "^#### \\(.*\\)$" 1)
          ("h5"     "^##### \\(.*\\)$" 1)
          ("h6"     "^###### \\(.*\\)$" 1)
          ("fn"     "^\\[\\^\\(.*\\)\\]" 1)))

  :custom-face
  (markdown-header-face   ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
  (markdown-header-face-1 ((t (:inherit markdown-header-face :foreground "violet" :height 1.8))))
  (markdown-header-face-2 ((t (:inherit markdown-header-face :foreground "lightslateblue" :height 1.4))))
  (markdown-header-face-3 ((t (:inherit markdown-header-face :foreground "mediumpurple1" :height 1.2))))
  (markdown-link-face     ((t (:background "#0e1014" :foreground "#bd93f9"))))
  (markdown-list-face     ((t (:foreground "mediumpurple"))))
  (markdown-pre-face      ((t (:foreground "#bd98fe"))))
  (markdown-header-delimiter-face ((t (:foreground "mediumpurple")))))


;; Use visual-line-mode in gfm-mode
;; (defun my-gfm-mode-hook ()
;;   (visual-line-mode 1))
;; (add-hook 'gfm-mode-hook 'my-gfm-mode-hook)
#+end_src

** Generate TOC for markdown file
~markdown-toc~ is a package that helps in generating the =TOC= for a markdown file.
#+begin_src emacs-lisp
;; generate TOC for markdown file
(use-package markdown-toc
  :after (markdown-mode)
  :quelpa
  (:fetcher github :repo "ardumont/markdown-toc")
  :hook
  (markdown-mode . markdown-toc-mode)
  :init
  (setq markdown-toc-header-toc-start "<!-- markdown-toc start -->"
        markdown-toc-indentation-space markdown-list-indent-width
        markdown-toc-header-toc-title "\n## Contents")

  ;; ISSUE https://github.com/ardumont/markdown-toc/issues/47
  (defun markdown-toc-refresh-before-save ()
    "Refresh markdown TOC before save."
    (when (and (derived-mode-p 'markdown-mode)
               (require 'markdown-toc)
               (markdown-toc--toc-already-present-p))
      (markdown-toc-generate-toc t)))
  (add-hook 'before-save-hook #'markdown-toc-refresh-before-save))
#+end_src

** iMenu setup for Markdown

Configuration of =imenu= for markdown
#+begin_src emacs-lisp :lexical no
;; set imenu for markdown mode
(use-package imenu-list
  :defer 3
  :ensure t
  :bind (("C-'" . imenu-list-smart-toggle))
  :config
  (setq imenu-list-focus-after-activation t
        imenu-list-auto-resize nil))
#+end_src

* Get word definition at a point
Display  the   definition  of  word  at   point  in  Emacs  using   the  package
=define-word=. It  is a GNU Emacs  package that lets  you see the definition  of a
word or a phrase at point, without having to switch to a browser.

#+begin_src emacs-lisp :lexical no
 ;; Display the definition of word at point in Emacs
 (use-package define-word
   :defer 5
   :bind (("C-c w e" . define-word)))
#+end_src
