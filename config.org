:DOC-CONFIG:
#+property: header-args :emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments yes
:END:

#+STARTUP: indent

#+begin_src emacs-lisp :epilogue (format-time-string ";; Last generated on %c")
;;; config.el --- Emacs Core Configuration -*- lexical-binding: t -*-
;;
;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file
;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
;;
;; Sources are available from https://github.com/fpdevil/dotemacs
;;
;; Copyright (C) 2023 Sampath Singamsetty
;;
;; Author: Sampath Singamsetty <singamsetty.sampath@gmail.com>
;; Homepage: https://github.com/fpdevil/emacs.d
;;
;; Commentary
;; This is the core configuration powering this Emacs setup and
;; it has all the required bootstrapping information for installing
;; the package managers and initialising them.
;;
;;
;; ------- The following code was auto-tangled from orgmode file. -------
#+end_src

* Table Of Contents                                                     :TOC_3:
- [[#main-emacs-configuration][Main Emacs configuration]]
  - [[#sectional-profiling][Sectional profiling]]
  - [[#early-init][Early init]]
  - [[#personal-information][Personal information]]
  - [[#set-custom-directories][Set custom directories]]
    - [[#vendor-dir][vendor-dir]]
    - [[#aqua-savefile-dir][aqua-savefile-dir]]
  - [[#setting-of-customised-variables][Setting of customised variables]]
  - [[#optional-settings][Optional settings]]
    - [[#tweaks][Tweaks]]
  - [[#set-the-prerequisites][Set the prerequisites]]
  - [[#custom-macro-definitions][Custom macro definitions]]
  - [[#package-management][Package management]]
    - [[#specify-the-package-locations-to-be-picked-from][Specify the package locations to be picked from]]
    - [[#set-the-ssl-and-tls-based-configurations][Set the SSL and TLS based configurations]]
    - [[#additional-options-for-gnus][Additional options for gnus]]
    - [[#using-straightel][Using straight.el]]
    - [[#get-use-package-for-installing-the-emacs-packages][Get use-package for installing the emacs packages]]
    - [[#using-quelpa-package-manager][Using QUELPA package manager]]
    - [[#gnu-elpa-keyring-update][gnu-elpa-keyring-update]]
    - [[#package-listing-through-paradox][package listing through Paradox]]
    - [[#asynchronous-processing][Asynchronous processing]]
    - [[#ansi-colors-in-compilation][ANSI Colors in compilation]]
  - [[#custom-settings-and-preferences][Custom settings and preferences]]
    - [[#always-start-with-the-scratch-window][Always start with the scratch window]]
    - [[#set-default-font][Set default font]]
    - [[#define-function-aliases][Define function aliases]]
    - [[#highlight-the-current-line][Highlight the current line]]
  - [[#highlight-matching-parenthesis][Highlight matching parenthesis]]
  - [[#using-exec-path-from-shell-package-for-proper-path-setup][Using exec-path-from-shell package for proper PATH setup]]
  - [[#for-certain-modes-enable-line-numbers][For certain modes enable line numbers]]
  - [[#loading-of-the-custom-configurations-and-modules][Loading of the Custom configurations and modules]]
  - [[#diminishing-the-minor-modes][Diminishing the minor modes]]
  - [[#org-contrib][ORG Contrib]]
  - [[#a-function-for-checking-the-package-loading][A function for checking the package loading]]
- [[#startup-hooks][Startup hooks]]
  - [[#profiling][Profiling]]
  - [[#end-if-init---gc][End if init - gc]]
- [[#loading-of-the-literate-mode-configurations][Loading of the Literate Mode Configurations]]
- [[#profiling-1][Profiling]]
  - [[#final-report][Final report]]

* Main Emacs configuration

The main configuration is available and picked from the ~config.org~ file which
gets tangled to ~config.el~.

** Sectional profiling
Define a timer profiler for identifying and checking which module takes how
much time to check if needed.
#+begin_src emacs-lisp :lexical no
(defvar aqua/init-start-time (current-time) "Time when init.el was started")
(defvar aqua/section-start-time (current-time) "Time when section was started")
(defun aqua/report-time (section)
  (message "%-36s %.2fs"
           (concat section " " "section time: ")
           (float-time (time-subtract (current-time) aqua/section-start-time))))
(message "---------------------------------------------------------------")
#+end_src

To use the above, follow the below format
#+begin_src emacs-lisp :tangle no
(aqua/report-time "Module or Library name")
#+end_src


** Early init :HOOK:OTHER:
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.emacs.d/early-init.el"
:END:

This code is meant to go into the [[file:early-init.el][early-init.el]] file. When this is tangled, it will create the file [[file:~/.emacs.d/early-init.el][~/.emacs.d/early-init.el]] (from the [[early init]] section)


#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
;;; early-init.el --- Emacs 27+ pre-initialisation config
;;
;;; Commentary:
;;
;; This is the first file that Emacs reads when starting up. It should
;; contain code that does not depend on any package or the proportions
;; of the Emacs frame.
;;
;; Emacs 27+ loads this file before (normally) calling
;; `package-initialize'.  We use this file to suppress that automatic
;; behaviour so that startup is consistent across Emacs versions.

;;; Code:
;;
;; This early-init.el file was auto-tangled from an orgmode file
;;
(setq site-run-file nil                        ; No site-wide run-time initializations.
      inhibit-default-init t                   ; No site-wide default library
      gc-cons-threshold most-positive-fixnum   ; Very large threshold for garbage
                                               ; collector during init
      package-enable-at-startup nil)           ; We'll use quelpa and use-package


;; ^ Toggle annoying GUI features that are not needed
(push '(tool-bar-lines . 0)   default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
;; And set these to nil so users don't have to toggle the modes twice to
;; reactivate them.
(scroll-bar-mode nil)                  ; ^Turn off scrollbars
(tool-bar-mode   nil)                  ; ^Turn off toolbar


;; ^ Compilation Warnings Handling
(setq native-comp-async-report-warnings-errors 'silent) ;; native-comp warning
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

;; ^ Emacs "updates" its ui more often than it needs to, so slow it down slightly
;; optimizations - from Doom's core.el
(setq idle-update-delay 1.0)                 ; default is 0.5

(setq native-comp-eln-load-path
      (list (expand-file-name "eln-cache" user-emacs-directory)))

;; ^ Using better values than default 1MB
(setq read-process-output-max (* 1024 1024))

;; ^ GC - The default is 800 kilobytes.  Measured in bytes.
;; Making startup faster by reducing the frequency of garbage
;; collection and then use a hook to measure Emacs startup time.
;; Temporarily we will increase the limit before GC is triggered
;; to make Emacs start up faster:
(setq gc-cons-threshold (* 50 1000 1000))
(setq gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*Emacs loaded in %s with %d garbage collections*"
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; ^ While exitting, kill processes without asking
(setq confirm-kill-processes nil)

;; ^ Show column number
(setq column-number-mode t)

;; ^ do not create any lock files as these just clutter file system
(setq create-lockfiles nil)

;; ^ Emacs lisp source/compiled preference
;;   Prefer loading newest compiled .el file
(customize-set-variable 'load-prefer-newer t)

;; ^ Don't ask about following symlinks
(setq vc-follow-symlinks t)

;; ^ Fix gap issues with tiling WMs
(setq frame-resize-pixelwise t)

;; ^ Window configuration
;; (setq frame-inhibit-implied-resize t)         ; supposed to hasten startup

;; ^ Minimum clutter
;; (add-to-list 'default-frame-alist '(vertical-scroll-bars))

;; ^ Makes the Aqua titlebar color the same as Emacs.
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))

#+end_src


** Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Sampath Singamsetty"
      user-mail-address "Singamsetty.Sampath@gmail.com")
#+END_SRC

[[elisp:(find-file user-init-file)][Check my init!]] is a nice clickable-actionable button within Emacs. The elisp
link is part of Emacs.

** Set custom directories
*** vendor-dir
The =vendor-dir= is for storing any custom packages not available through package management
#+begin_src emacs-lisp :lexical no
(defcustom vendor-dir (expand-file-name "vendor" user-emacs-directory)
  "Packages not yet available in ELPA.")
#+end_src

*** aqua-savefile-dir
The =aqua-savefile-dir= is for all auto save and recent files storage.
#+begin_src emacs-lisp :lexical no
;; custom directory for storage
(defconst aqua-savefile-dir (expand-file-name "savefile" user-emacs-directory)
  "Location for saving recent and auto save files.")

;; create the savefile dir if the same doesn't exist
(unless (file-exists-p aqua-savefile-dir)
  (make-directory aqua-savefile-dir))
#+end_src


** Setting of customised variables
Set a custom configuration file for storing the ~emacs~ custom settings.
Place all custom-defined variables in their own file and store the custom
variable file in the local machine's ~HONE~ directory outside of version
control. This enables us to keep specific config local to each machine
#+begin_src emacs-lisp
;; Get custom-set-variables out of init.el
;; (setq custom-file (concat user-emacs-directory "custom-settings.el"))
(defvar my/custom-file (concat user-emacs-directory "custom-settings.el"))
(setq custom-file my/custom-file)
(when (file-exists-p custom-file)
  (load custom-file 'noerror))
#+end_src

** Optional settings
Optionally enable the =debug-on-error= value.
#+begin_src emacs-lisp :eval no
;; enable debug setting value to t for troubleshooting any startup issues
(setq debug-on-error nil)
#+end_src

Keep local variables safe.
#+begin_src emacs-lisp :lexical no
(setq enable-local-variables :safe)
#+end_src

Set the location of global history file for URL package. This file contains a
list of all the visited URLs.
#+begin_src emacs-lisp :lexical no
;; set url history file location
(setq url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src

*** Tweaks
The variable =file-name-handler-alist= is consulted on every =load=, =require= and various =path/io= functions. We will get a minor performance boost by tweaking this.

#+begin_src emacs-lisp :lexical no
(defvar startup/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src

#+begin_src emacs-lisp :lexical no
;; minor performance optimization
(defun startup/revert-file-name-handler-alist ()
  "Reset or Restore the file-name-handler-alist variable."
  (setq file-name-handler-alist startup/file-name-handler-alist))

(add-hook 'emacs-startup-hook 'startup/revert-file-name-handler-alist)
#+end_src


** Set the prerequisites
#+begin_src emacs-lisp :lexical no
;; this setting has been offloaded to early-init.el
;; it checks whether installed packages are available when
;; Emacs starts
;; (setq package-enable-at-startup nil)

;; Set the Directory for installing Emacs packages
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory))
#+end_src

** Custom macro definitions
We can define any custom macros that can be used globally across ~emacs~.

#+begin_src emacs-lisp :lexical no
;; custom setq! macro
(defmacro setq! (&rest settings)
  "Like 'setq-default', but uses custom-set if it is set."
  `(progn ,@(cl-loop for (var val) on settings by 'cddr
                     collect `(funcall (or (get ',var 'custom-set) #'set-default)
                                       ',var ,val))))

(defmacro lambda! (&rest body)
  "A shortcut for inline interactive lambdas."
  (declare (doc-string 1))
  `(lambda () (interactive) ,@body))
#+end_src

** Package management
Declare the package settings and repositories to use.

*** Specify the package locations to be picked from
The official package archive of Emacs is GNU ELPA. It is maintained as part of
Emacs: those with write access to emacs.git can commit changes to elpa.git.

The “ELPA” acronym stands for “Emacs Lisp Package Archive”. GNU ELPA is enabled
by default in recent stable versions of Emacs per the value of the variable
=package-archives=. This means that the user can install many useful as well as
_free/libre_ packages without setting up another package archive.

GNU ELPA provides the latest tagged release of a package. There is, however, an
option available to fetch packages that are built periodically from source using
the most recent commit in the main branch and this would be the “development”
version of GNU ELPA.

#+begin_src emacs-lisp
;; set package archive locations
(custom-set-variables '(package-archives
                      '(("elpa"       . "https://elpa.gnu.org/packages/")
                        ("elpa-devel" . "https://elpa.gnu.org/devel/")
                        ("nongnu"     . "https://elpa.nongnu.org/nongnu/")
                        ("melpa"      . "https://melpa.org/packages/")
                        ("org"        . "https://orgmode.org/elpa/"))))

;; original
;; (custom-set-variables '(package-archives
;; 			            '(("melpa" . "https://melpa.org/packages/")
;; 			              ("org"   . "https://orgmode.org/elpa/")
;; 			              ("gnu"   . "https://elpa.gnu.org/packages/"))))
#+end_src


**** Prioritise archives and pin packages to archives
By default the package archives are not prioritised. The Emacs package manager (package.el) will fetch the highest version it finds. Users may control this behaviour by configuring the user option =package-archive-priorities=.

#+begin_src emacs-lisp :lexical no
;; Highest number gets priority (what is not mentioned has priority 0)
(setq package-archive-priorities
      '(("elpa"     . 4)
        ("melpa"    . 3)
        ("org"      . 2)
        ("nongnu"   . 1)))
#+end_src



*** Set the SSL and TLS based configurations
#+begin_src emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

(setq gnutls-verify-error (not (getenv "INSECURE")) ; you shouldn't use this
      tls-checktrust gnutls-verify-error
      tls-program (list "gnutls-cli --x509cafile %t -p %p %h"
			            ;; compatibility fallbacks
			            "gnutls-cli -p %p %h"
			            "openssl s_client -connect %h:%p -no_ssl2 -no_ssl3 -ign_eof"))
#+end_src

*** Additional options for gnus

Gnus or Gnus Network User Services, is a message reader which is part of GNU Emacs.

#+begin_src emacs-lisp :lexical no
;; make Gnus startup faster
(setq gnus-check-new-newsgroups nil
      gnus-check-bogus-newsgroups nil)

;; fixing summary buffer
;; there’s no need to recenter the summary buffer all the time
;; it only slows gnus down.
(setq gnus-auto-center-summary nil)

;; enter the summary buffer faster
(setq gnus-show-threads t
      gnus-use-cross-reference nil)
#+end_src

*** Using straight.el
~straight.el~ is a next-generation, purely functional package manager for Emacs.

#+begin_src emacs-lisp :lexical no :eval no
;; straight.el is a Next-generation, purely functional package manager
;; for the Emacs hacker.
;; Below is the bootstrap code for straight
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; set local directory for straight packages under elpa/straight
;; (setq straight-base-dir (expand-file-name "straight" package-user-dir))

;; call straight-use-package to bootstrap use-package so we can use it.
(straight-use-package 'use-package)
#+end_src

loading the latest ~org~ now...
#+begin_src emacs-lisp :tangle no
 (straight-use-package 'org)
#+end_src

*** Get use-package for installing the emacs packages
=use-package= is a macro that provides convenient syntactic sugar for many common
tasks related to installing and configuring Emacs packages. Now initialize the
package system and refresh the list of packages.

Finally install the required packages with =use-package= as needed.
#+begin_src emacs-lisp :lexical no
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(when (not (package-installed-p 'use-package))
  (package-install 'use-package))

;; Finally, we will load use-package
;; (require 'use-package)
(eval-when-compile
  (require 'use-package)
  (require 'bind-key))
#+end_src

While installing packages using =use-package=, the following key word options are handy

- =:init= :: This gets called before the package gets initialized or loaded.
- =:config= :: This gets called only after the package is initialized or loaded.
- =:if= :: Loads the package conditionally, like =:if (eq system-type 'darwin)=.
- =:diminish str= :: Uses /optional/ string ~str~ in the modeline to indicate this
  module is active. If we provide no ~str~ it will be eliminated from modeline.

The below keywords only take affect after a module loads.

- =:after= :: This makes the current definition to wait the loading of listed
  packages, like =:after (evil org)= makes it wait for the =evil= and =org= packages
  to be loaded.
- =:bind ((k₁ . f₁) … (kₙ . fₙ)= :: Lets us bind keys ~kᵢ~, such as ~"M-s o"~, to
  functions, such as =occur=.
  - When /n = 1/, the extra outer parenthesis are not necessary.
- =:hook ((m₁ … mₙ) . f)= :: Enables functionality ~f~ whenever we're in one of the
    modes ~mᵢ~, such as ~org-mode~. The ~. f~, along with the outermost parenthesis,
    is optional and defaults to the name of the package ---Warning: Erroneous
    behaviour happens if the package's name is not a function provided by the
    package; a common case is when package's name does /not/ end in ~-mode~,
    leading to the invocation ~((m₁ … mₙ) . <whatever-the-name-is>-mode)~ instead.

    Additionally, when /n = 1/, the extra outer parenthesis are not necessary.

    Outside of =use-package=, one normally uses a ~add-hook~ clause.  Likewise, an
    ‘advice’ can be given to a function to make it behave differently ---this is
    known as ‘decoration’ or an ‘attribute’ in other languages.

- =:custom (k₁ v₁ d₁) … (kₙ vₙ dₙ)= :: Sets a package's custom variables ~kᵢ~ to have
    values ~vᵢ~, along with /optional/ user documentation ~dᵢ~ to explain to yourself,
    in the future, why you've made this decision.

    This is essentially ~setq~ within ~:config~.

Set additional configuration options for =use-package=:

- Enable *imenu* integration support using the variable
  =use-package-enable-imenu-support=.

#+begin_src emacs-lisp
;; use-package is a declarative package configuration and we
;; can set some configurations before "requiring" use-package,
;; so that it integrates better with imenu and this init file.
(setq-default use-package-enable-imenu-support t
              use-package-form-regexp-eval
              `(concat ,(eval-when-compile
                          (concat "^\\s-*("
                                  (regexp-opt '("use-package" "use-feature" "require") t)
                                  "\\s-+\\("))
                       (or (bound-and-true-p lisp-mode-symbol-regexp)
                           "\\(?:\\sw\\|\\s_\\|\\\\.\\)+") "\\)"))
#+end_src

- The =use-package-always-ensure= variable indicates that =use-package= should always try
  to install missing packages. For certain libraries this is not appropriate, and in such
  cases you see the =:ensure nil= declaration as part of the =use-package= statement.
  This applies mainly to libraries which are installed as part of some other package
  (happens mostly with some libraries that come with org-mode).

#+begin_src emacs-lisp
(custom-set-variables '(use-package-always-ensure t))
#+end_src

- The =use-package-always-defer= sets =:defer true= as the default for all package declarations.
  This makes Emacs startup much faster by preventing packages from being loaded
  when Emacs starts, and only doing so when they are needed. Some packages
  don't work well with this, so you'll see some declarations which are
  explicitly set with =:defer nil= to force the package to be loaded at startup,
  or =:defer n= to load the package, but only =n= seconds after startup.
#+begin_src emacs-lisp
(custom-set-variables '(use-package-always-defer t))
#+end_src

- The =use-package-verbose= variable enables verbose loading of packages, useful for debugging.
  Set/Unset this variable according to the requirement.

#+begin_src emacs-lisp
(custom-set-variables '(use-package-verbose t))
#+end_src

- The extension =use-package-ensure-system-package= allows to ensure that the required system binaries
  exist alongside the mentioned package declarations.

#+begin_src emacs-lisp
(use-package use-package-ensure-system-package
  :defer 5
  :ensure t)
#+end_src

**** Use a feature or a library from existing package
Certain libraries do exist in the packages which can be loaded explicitly using
the standard =emacs require= or the =use-package=. Below provides a more better
alternative to use.

#+begin_src emacs-lisp :lexical no
(defmacro use-feature (name &rest args)
  "Like `use-package', but with `straight-use-package-by-default' disabled."
  (declare (indent defun))
  `(use-package ,name
     :straight nil
     ,@args))
#+end_src

An example of using the ~use-feature~ macro.
#+begin_src emacs-lisp :tangle no
(use-feature ox
  :after org
  :demand t
  :config
  ;; This is so that we are not queried if bind-keywords are safe when we set
  ;; org-export-allow-bind to t.
  (put 'org-export-allow-bind-keywords 'safe-local-variable #'booleanp)
  (setq org-export-with-sub-superscripts '{}
        org-export-coding-system 'utf-8
        org-html-checkbox-type 'html))
#+end_src

*** Using QUELPA package manager
Testing [[https://framagit.org/steckerhalter/quelpa][quelpa]] in order to install packages directly from their github
repositories (and other places). We will install =quelpa= using =use-package=
first, and then install [[https://framagit.org/steckerhalter/quelpa-use-package][quelpa-use-package]] to allow using =quelpa= from  within
=use-package= declarations. Very recursive.
~Quelpa~ allows us to build Emacs packages directly from source repositories. It
derives its name from the /German word Quelle/, for souce [code], adjoined to
*ELPA*. Its ~use-package~ interface allows us to use ~use-package~ like normal but
when we want to install a file from souce we use the keyword =:quelpa=.

#+begin_src emacs-lisp
;; using the quelpa package manager
;; (use-package quelpa
;;   :defer nil
;;   ;;:custom (quelpa-upgrade-p t "Always try to update packages")
;;   :config
;;   (setq quelpa-dir (expand-file-name "quelpa" package-user-dir))
;;   (quelpa
;;    '(quelpa-use-package
;;      :fetcher git
;;      :url "https://github.com/quelpa/quelpa-use-package.git"))
;;   (require 'quelpa-use-package))


(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))

;; set the location where quelpa builds and stores packages.
(setq quelpa-dir (expand-file-name "quelpa" package-user-dir))
(setq quelpa-self-upgrade-p nil)

;; Assuming quelpa is bootstrapped, install quelpa-use-package
;; (which installs use-package as a dependency) and require the library:
(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)


;; finally use quelpa
(require 'quelpa)
(quelpa-use-package-activate-advice)
#+end_src

*** gnu-elpa-keyring-update
This package updates the GPG keys used by the ELPA package manager
(a.k.a `package.el') to verify authenticity of packages downloaded
from the GNU ELPA archive.

#+begin_src emacs-lisp :tangle no
;; update GPG keys for ELPA package manager
(use-package gnu-elpa-keyring-update
  :ensure t
  :config
  (setq package-check-signature nil))
#+end_src

*** package listing through Paradox
#+begin_src emacs-lisp
;; Project for modernizing Emacs' Package Menu. With improved appearance,
;; mode-line information. Github integration, customizability, asynchronous
;; upgrading, and more.
(use-package paradox
  :ensure t
  :init
  (progn
    ;; The "paradox-token" file is supposed to contain this line:
    ;;     (setq paradox-github-token "<YOUR_TOKEN>")
    ;; (load (locate-user-emacs-file "paradox-token") :noerror :nomessage)
    (setq paradox-lines-per-entry 1)
    (paradox-enable))
  :custom
  ;; the value is set true to disable GitHub integration
  (paradox-github-token t)
  (paradox-column-width-package 25)
  (paradox-display-star-count nil)
  (paradox-execute-asynchronously t)
  (paradox-hide-wiki-packages t))
#+end_src

The following keys mappings are available for ~paradox~.
|----------+---------------------------------------|
| Shortcut | Description                           |
|----------+---------------------------------------|
| v        | Visit the package's homepage          |
| l        | View a list of recent commits         |
| f r      | filters by regexp (occur);            |
| f u      | display only packages with upgrades;  |
| f k      | filters by keyword (emacs 24.4 only). |
| f c      | clear filters                         |
| h        | See all keys                          |
| s        | Star/unstar package                   |
|----------+---------------------------------------|

*** Asynchronous processing
A Simple library for asynchronous processing in Emacs.
#+begin_src emacs-lisp
  (use-package async
    :hook (package-menu-mode . aqua/async-bytecomp-ensure)
    :config
    (defun aqua/async-bytecomp-ensure ()
      (async-bytecomp-package-mode 1)))
#+end_src

*** ANSI Colors in compilation
#+begin_src emacs-lisp
;; colorize compilation buffer
(use-package ansi-color
  :config
  (defun colorize-compilation-buffer ()
    (when (eq major-mode 'compilation-mode)
      (ansi-color-apply-on-region (point-min) (point-max))))
  (setq compilation-scroll-output t)
  :hook
  (compilation-filter . colorize-compilation-buffer))
#+end_src


** Custom settings and preferences
Here we set certain custom settings and preferences as needed.

*** Always start with the scratch window
#+begin_src emacs-lisp :lexical no
;; always start with the scratch window if set to t
(setq initial-buffer-choice nil)
#+end_src

*** Set default font
Set a *font* of choice along with the size.
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Monaco"
                    :height 160
                    :weight 'normal)
#+end_src

**** Switching between the fonts
We can quickly switch between the fonts defined as a part of a list

#+begin_src emacs-lisp :lexical no
;; list of fonts to select
(defvar fonts-list '(("Monaco"                   . 16)
                     ("Go Mono for Powerline"    . 16)
                     ("Tinos for Powerline"      . 16)
                     ("Space Mono for Powerline" . 16))
  "List of fonts with their sizes. By default the first one in the list will be selected")
#+end_src

Now switch between the fonts

#+begin_src emacs-lisp :lexical no
(defun change-font ()
  "Interactively change a font from a list a available fonts."
  (interactive)
  (let* (available-fonts font-name font-size font-setting)
    (dolist (font fonts-list (setq available-fonts (nreverse available-fonts)))
      (when (member (car font) (font-family-list))
        (push font available-fonts)))
    (if (not available-fonts)
        (message "No fonts from the chosen set are available")
      (if (called-interactively-p 'interactive)
          (let* ((chosen (assoc-string (completing-read "What font to use? " available-fonts nil t) available-fonts)))
            (setq font-name (car chosen) font-size (read-number "Font size: " (cdr chosen))))
        (setq font-name (caar available-fonts) font-size (cdar available-fonts)))
      (setq font-setting (format "%s-%d" font-name font-size))
      (set-frame-font font-setting nil t)
      (add-to-list 'default-frame-alist (cons 'font font-setting)))))

;; (when (display-graphic-p)
;;   (change-font))
#+end_src

*** Define function aliases
#+BEGIN_SRC emacs-lisp
;; change all prompts to short y or n
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Highlight the current line
#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :config
  (global-hl-line-mode +1)
  :hook
  (prog-mode . hl-line-mode)
  (text-mode . hl-line-mode))

(use-package diff-hl
  :ensure t
  :config
  (global-diff-hl-mode +1)
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC

** Highlight matching parenthesis
#+begin_src emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src

** Using exec-path-from-shell package for proper PATH setup
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  :config
  (dolist (var
           '("SSH_AUTH_SOCK"
             "SSH_AGENT_PID"
             "GPG_AGENT_INFO"
             "LANG"
             "LC_CTYPE"
             "NIX_SSL_CERT_FILE"
             "NIX_PATH"))
    (add-to-list 'exec-path-from-shell-variables var)))

;; set the new M1 Mac bin directory
;; (set exec-path (append "/opt/homebrew/bin" exec-path))

(defun set-exec-path-from-shell-PATH ()
  "Sets the exec-path to the same value used by the user shell"
  (let ((path-from-shell
         (replace-regexp-in-string
          "[[:space:]\n]*$" ""
          (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))

;; call function now
;; (set-exec-path-from-shell-PATH)
#+end_src

** For certain modes enable line numbers
Foe the modes in the list, the line numbers are enabled by default
#+begin_src  emacs-lisp
  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; we may override few modes that derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Loading of the Custom configurations and modules
We   will   split   the  specific   configurations   into   individual configuration  files of  their  own.  Each of  them  should contain  a declaration ~use-package~  for loading and configuring  the individual packages along with any other specific customised code.

#+BEGIN_SRC emacs-lisp
  (defun mjr/load-literate-cfg ()
    "Load literate config files using org-babel.")
  (let ((cfg-conf-dir (expand-file-name "modules/" user-emacs-directory)))
    (mapcar #'(lambda (conf-file)
		(org-babel-load-file conf-file))
	    (directory-files-recursively cfg-conf-dir "^[^.]\.*.org")))

  (defun mjr/insert-literate-config-file-list ()
    (interactive)
    (let ((cfg-conf-dir (expand-file-name "modules/" user-emacs-directory))
	  (file-list nil))
      (setq file-list (directory-files-recursively cfg-conf-dir "^[^.]\.*.org"))
      (save-excursion
	(goto-char (point-min))
	(when (re-search-forward "[:]CFGLST:" (point-max) t)
	  (let ((beg (point))
		(end
		 (save-excursion
		   (when (search-forward-regexp "^\\*" (point-max))
		     (forward-line -1))
		   (end-of-line)
		   (point))))
	    (delete-region beg end))
	  (insert "\n")
	  (insert "    Configuration for more specific functionality, modes and areas of work\n")
	  (mapcar #'(lambda (file) (insert (format "    - [[file:%s]]\n" (substring file 11)))) file-list)))))
#+END_SRC

** Diminishing the minor modes
Instead of displaying all the minor mode details in the mode line, we
may hide them by using ~diminish~ and ~delight~ packages.
#+begin_src emacs-lisp
  ;; diminish
  (use-package diminish)

  ;; delight
  (use-package delight)
#+end_src

** ORG Contrib
Let’s conclude this ‘boot-up’ by augmenting the org-mode with installing
~org-plus-contrib~  that now resides outside of the org-mode package.
#+begin_src emacs-lisp :lexical no :tangle no
;; org-plus-contrib
(use-package org-plus-contrib
  :quelpa (org-plus-contrib
           :fetcher git
           :url "https://git.sr.ht/~bzg/org-contrib"
           :files ("lisp/*.el")))
#+end_src

org-plus-contrib contain the files that are included with Emacs plus all
contributions from the org-mode repository.

** A function for checking the package loading
#+begin_src emacs-lisp
;; define a function for checking the package loading
(defmacro after (feature &rest body)
  "Execute FEATURE and REST in BODY after loading,.
FEATURE may be any one of:
    'evil            => (with-eval-after-load 'evil BODY)
    \"evil-autoloads\" => (with-eval-after-load \"evil-autolaods\" BODY)
    [evil cider]     => (with-eval-after-load 'evil
                          (with-eval-after-load 'cider
                            BODY))."
  (declare (indent 1))
  (cond
   ((vectorp feature)
    (let ((prog (macroexp-progn body)))
      (cl-loop for f across feature
               do
               (progn
                 (setq prog (append `(',f) `(,prog)))
                 (setq prog (append '(with-eval-after-load) prog))))
      prog))
   (t
    `(with-eval-after-load ,feature ,@body))))
#+end_src

* Startup hooks
Here we can place any items that are supposed to be run during the =emacs=
startup using the startup hook trigger.

** Profiling
Add a ~hook~  to report how long and how  many garbage collections the
startup took. We use  a ~hook~ to run it at the very  end, so that the
message doesn't get clobbered by other messages during startup.

#+begin_src emacs-lisp
;; after the startup
(let ((init-time (float-time (time-subtract (current-time) aqua/init-start-time)))
      (total-time (string-to-number (emacs-init-time "%f"))))

  (message "---------------------------------------------------------------")
  (message "Emacs Initialization time:             %.2fs (+ %.2f system time)"
           init-time (- total-time init-time)))
  (message "---------------------------------------------------------------")
#+end_src

** End if init - gc

Restore the cons threshold to a lower number for shorter GC pauses. Initially,
it is set to a higher value in the =early-init.el= settings to reduce the GC time
during startup.

Here, we will dial the GC threshold back down so that garbage collection happens
more frequently but in less time.
#+begin_src emacs-lisp :lexical no
;; Make gc pauses faster by decreasing the threshold (3MB)
(setq gc-cons-threshold (* 3 1000 1000))
(setq gc-cons-percentage 0.1)
#+end_src

* Loading of the Literate Mode Configurations                              :CFGLST:
Configuration for individual or specific modules, functions, modes and languages

 #+begin_src shell :results replace raw :eval no
for i in `ls modules/*.org`;do echo "- " file:${i}; done
 #+end_src

 #+RESULTS:
 -  file:modules/addons-config.org
 -  file:modules/buffermgmt-config.org
 -  file:modules/color-themes.org
 -  file:modules/company-config.org
 -  file:modules/completion-config.org
 -  file:modules/custom-config.org
 -  file:modules/documentation-config.org
 -  file:modules/eglot-config.org
 -  file:modules/eldoc-config.org
 -  file:modules/flycheck-config.org
 -  file:modules/flyspell-config.org
 -  file:modules/keymapping-config.org
 -  file:modules/lsp-config.org
 -  file:modules/neotree-config.org
 -  file:modules/org-config.org
 -  file:modules/pdftools-config.org
 -  file:modules/presentations-config.org
 -  file:modules/ranbow-config.org
 -  file:modules/yas-config.org

* Profiling

** Final report

#+begin_src emacs-lisp
(aqua/report-time "config")
#+end_src
